#!/bin/env bash

#####################################################################
#
# Run the Mithril signer in the background
#
#####################################################################
mithrilNetwork() {
  case "$1" in
    preview)
      echo "dev-preview"
      ;;
    preprod)
      echo "release-preprod"
      ;;
    mainnet)
      echo "release-mainnet"
      ;;
  esac
}

mithrilNetworkForConfigFiles() {
  case "$1" in
    preview)
      echo "testing-preview"
      ;;
    preprod)
      echo "release-preprod"
      ;;
    mainnet)
      echo "release-mainnet"
      ;;
  esac
}

setRunEnv () {
    MITHRIL_NETWORK=$(mithrilNetwork $NETWORK)
    MITHRIL_NETWORK_CONFIG_FILES=$(mithrilNetworkForConfigFiles $NETWORK)
    TESTING_PREVIEW_ERA_ADDR=addr_test1qzzngukkj9ydjemqjlgfn42sevy2xnvauay46weushlpuq9thd4ray00csjssf4sxftv04xeequ3xfx72nujg9y4d5ysgkxxlh
    TESTING_PREVIEW_ERA_VKEY=5b35352c3232382c3134342c38372c3133382c3133362c34382c382c31342c3138372c38352c3134382c39372c3233322c3235352c3232392c33382c3234342c3234372c3230342c3139382c31332c33312c3232322c32352c3136342c35322c3130322c39312c3132302c3230382c3134375d

    export PARTY_ID=$PARTY_ID
    #export KES_SECRET_KEY_PATH=$CARDANO_SHELLEY_KES_KEY
    #export OPERATIONAL_CERTIFICATE_PATH=$CARDANO_SHELLEY_OPERATIONAL_CERTIFICATE
    export NETWORK=$NETWORK
    export AGGREGATOR_ENDPOINT=https://aggregator.${MITHRIL_NETWORK}.api.mithril.network/aggregator
    export RUN_INTERVAL=$RUN_INTERVAL
    #export DB_DIRECTORY=$CARDANO_DATABASE_PATH
    export DB_DIRECTORY=/data/db
    #export CARDANO_NODE_SOCKET_PATH=$CARDANO_SOCKET_PATH
    export CARDANO_NODE_SOCKET_PATH=/ipc/node.socket
    export CARDANO_CLI_PATH=/usr/local/bin/cardano-cli
    export DATA_STORES_DIRECTORY=/data/mithril/stores
    export STORE_RETENTION_LIMIT=$STORE_RETENTION_LIMIT
    export ERA_READER_ADAPTER_TYPE=cardano-chain
    #ERA_READER_ADAPTER_PARAMS=$(jq -nc --arg address $(curl -s https://raw.githubusercontent.com/input-output-hk/mithril/main/mithril-infra/configuration/${MITHRIL_NETWORK_CONFIG_FILES}/era.addr) --arg verification_key $(curl -s https://raw.githubusercontent.com/input-output-hk/mithril/main/mithril-infra/configuration/${MITHRIL_NETWORK_CONFIG_FILES}/era.vkey) '{"address": $address, "verification_key": $verification_key}')
    export ERA_READER_ADAPTER_PARAMS=$(jq -nc --arg address $TESTING_PREVIEW_ERA_ADDR --arg verification_key $TESTING_PREVIEW_ERA_VKEY '{"address": $address, "verification_key": $verification_key}')

}

#####################################################################
#
# Run the Mithril signer in the background
#
#####################################################################
runMithrilSignerNode () {
    local max_retries=1000
    local count=0
    local success=0

    while [[ $count -lt $max_retries ]]; do
        /usr/local/bin/mithril-signer -vvv >> /data/mithril/signer.log 2>&1 && success=1 && break
        echo "Signer failed to start (attempt $((count+1))/$max_retries), retrying in 5 seconds..."
        sleep 5
        ((count++))
    done

    if [[ $success -eq 0 ]]; then
        echo "Signer failed to start after $max_retries attempts."
        return 1
    fi
}

if [[ $CARDANO_BLOCK_PRODUCER == true ]]; then
  # Start Mithril signer in the background
  echo "Starting Mithril Signer..."
  setRunEnv
  runMithrilSignerNode
else
  echo "No Mithril node to start"
fi