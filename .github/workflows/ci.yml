name: CI

# do not run workflow twice on PRs
on:
  push:
  pull_request:
    types: [opened, reopened]

jobs:
  build:
    if: github.event.pull_request.draft == false
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v2

      - name: Install stable toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          components: clippy, rustfmt
          override: true

      - uses: actions/cache@v2.1.5
        name: Cache mithril-core/Cargo.toml
        with:
          path: |
            mithril-core/target
          key: ${{ runner.os }}-${{ hashFiles('mithril-core/Cargo.toml') }}
          restore-keys: |
              ${{ runner.os }}-key

      - name: Cargo build
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release --manifest-path ./mithril-core/Cargo.toml
      - name: Cargo check
        uses: actions-rs/cargo@v1
        with:
          command: check
          args: --release --all-targets --manifest-path ./mithril-core/Cargo.toml

      - name: Cargo fmt
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all --manifest-path ./mithril-core/Cargo.toml -- --check

      - name: Clippy Check
        uses: actions-rs/clippy-check@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          args: --manifest-path ./mithril-core/Cargo.toml --all-features

      - name: Compile benchmarks
        uses: actions-rs/cargo@v1
        continue-on-error: false
        with:
          command: bench
          args: --no-run --locked --manifest-path ./mithril-core/Cargo.toml

      - name: Run cargo test
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --release --manifest-path ./mithril-core/Cargo.toml

      - name: Run cargo doc
        uses: actions-rs/cargo@v1
        with:
          command: doc
          args: --manifest-path ./mithril-core/Cargo.toml

      - name: Publish Documentation
        uses: peaceiris/actions-gh-pages@v3
        if: github.event_name == 'push'
        with:
          github_token: ${{ secrets.GITHUB_TOKEN || github.token }}
          publish_dir: mithril-core/target/doc

      - name: Set up Clang
        uses: egor-tensin/setup-clang@v1
        with:
          version: latest
          platform: x64

      - name: Install gtest manually
        run: sudo apt-get install libgtest-dev && cd /usr/src/gtest && sudo cmake CMakeLists.txt && sudo make && sudo cp lib/*.a /usr/lib && sudo ln -s /usr/lib/libgtest.a /usr/local/lib/libgtest.a && sudo ln -s /usr/lib/libgtest_main.a /usr/local/lib/libgtest_main.a

      - name: Build C test
        run: clang -x c++ tests.c stms.c -g -o tests -L ../target/release -lmithril -lpthread -lstdc++ -lgtest -lgtest_main
        working-directory: mithril-core/c-tests

      - name: Run C test
        run: LD_LIBRARY_PATH=../target/release ./tests --gtest_output=xml:test-results.xml
        working-directory: mithril-core/c-tests

      - name: Publish Unit Test Results
        uses: EnricoMi/publish-unit-test-result-action@v1
        with:
          files: ./**/test-results.xml

  go-tests:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v2

      - uses: actions/setup-go@v2
        with:
          go-version: '1.17.1'

      - uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - uses: actions/cache@v2
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          components: clippy, rustfmt
          override: true

      - name: install mlib
        run: make mlib
        working-directory: mithril-proto/mithril-node-poc/

      - name: Golang Tests
        run: go test ./...
        working-directory: mithril-proto/mithril-node-poc/

  build-and-push-image:
    if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
    runs-on: ubuntu-latest
    needs: [ build, go-tests ] 
    permissions:
      contents: read
      packages: write
      
    env:
      PUSH_PACKAGES: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
      REGISTRY: ghcr.io
      IMAGE_NAME: ${{ github.repository }}
      DOCKER_FILE: ./mithril-proto/mithril-node-poc/Dockerfile
      CONTEXT: .
      GITHUB_REF: ${{ github.ref}}

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set outputs
        id: vars
        run: echo "::set-output name=sha_short::$(git rev-parse --short HEAD)"

      - name: Extract branch name
        shell: bash
        run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
        id: extract_branch

      - name: Log in to the Container registry
        uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags:
            type=raw,value={{branch}}-{{sha}}

      - name: Build and push Docker image
        uses: docker/build-push-action@ad44023a93711e3deb337508980b4b5e9bcdc5dc
        with:
          context: ${{ env.CONTEXT }}
          file: ${{ env.DOCKER_FILE }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}

  openapi-ui:
    if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v2
      - name: Generate OpenAPI UI
        uses: Legion2/swagger-ui-action@v1
        with:
          output: openapi-ui
          spec-file: ./openapi.yaml
      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN || github.token }}
          publish_dir: openapi-ui
          destination_dir: openapi-ui
