name: deploy-terraform-infrastructure
description: |
  Deploy the infrastructure of a Mithril network with terraform.
inputs:
  dry_run:
    description: Dry run will not apply the terraform infrastructure, just plan it.
    required: true
  terraform_backend_bucket:
    description: terraform backend bucket used to store terraform state.
    required: true
  environment_prefix:
    description: Mithril network environment prefix.
    required: true
  environment:
    description: Mithril network environment name.
    required: true
  cardano_network:
    description: Cardano network name.
    required: true
  cardano_node_version:
    description: Cardano node version.
    required: true
  cardano_node_docker_registry:
    description: Cardano node Docker image registry.
    required: false
    default: "ghcr.io/intersectmbo/cardano-node"
  google_region:
    description: Google Cloud region name.
    required: true
  google_zone:
    description: Google Cloud zone name.
    required: true
  google_machine_type:
    description: Google Cloud VM name.
    required: true
  google_compute_instance_boot_disk_size:
    description: Google Cloud attached boot disk size in GB.
    required: true
  google_compute_instance_boot_disk_type:
    description: Google Cloud type of attached boot disk.
    required: false
    default: "pd-standard"
  google_compute_instance_boot_disk_snapshot:
    description: Google Cloud snapshot used to restore the boot disk.
    required: false
  google_compute_instance_data_disk_size:
    description: Google Cloud attached data disk size in GB.
    required: true
  google_compute_instance_data_disk_type:
    description: Google Cloud type of attached data disk.
    required: false
    default: "pd-standard"
  google_compute_instance_data_disk_snapshot:
    description: Google Cloud snapshot used to restore the data disk.
    required: false
  google_application_credentials:
    description: Google Cloud application credentials (service account).
    required: true
  google_compute_instance_ssh_keys_environment:
    description: Google Cloud VM SSH keys environment (`testing` or `production`).
    required: true
  mithril_use_p2p_network:
    description: Mithril use P2P network (experimental, for test only).
    required: false
    default: "false"
  mithril_p2p_use_dmq_protocol:
    description: Mithril P2P network use DMQ protocol (experimental, for test only).
    required: false
    default: "false"
  mithril_p2p_network_bootstrap_peer:
    description: Mithril P2P network bootstrap peer (experimental, for test only).
    required: false
    default: ""
  mithril_p2p_signer_relay_signer_registration_mode:
    description: Mithril P2P network signer relay signer registration mode ('p2p' or 'passthrough') (experimental, for test only).
    required: false
    default: "passthrough"
  mithril_p2p_signer_relay_signature_registration_mode:
    description: Mithril P2P network signer relay signature registration mode ('p2p' or 'passthrough') (experimental, for test only).
    required: false
    default: "p2p"
  mithril_api_domain:
    description: Mithril network api domain root.
    required: true
  mithril_image_id:
    description: Mithril Docker image id to deploy.
    required: true
  mithril_protocol_parameters:
    description: Mithril protocol parameters.
    required: true
  mithril_signers:
    description: Mithril signers settings.
    required: true
  mithril_genesis_secret_key:
    description: Mithril genesis secret key (only for test networks).
    required: false
  mithril_genesis_verification_key_url:
    description: Mithril genesis verification key location.
    required: true
  mithril_era_reader_adapter_type:
    description: Mithril era reader adapter type.
    required: false
    default: "cardano-chain"
  mithril_era_reader_address_url:
    description: Mithril era reader address location.
    required: true
  mithril_era_reader_verification_key_url:
    description: Mithril era reader verification key url.
    required: true
  mithril_era_reader_secret_key:
    description: Mithril era reader secret key (onlye for test networks).
    required: false
  mithril_aggregator_signed_entity_types:
    description: Mithril aggregator signed entity types parameters (discriminants names in an ordered comma separated list).
    required: false
    default: ""
  mithril_aggregator_aggregate_signature_type:
    description: Mithril aggregator aggregate signature type used to create certificates.
    required: false
    default: "Concatenation"
  mithril_aggregator_cdn_cname:
    description: Mithril aggregator uses CDN domain for constructing snapshot url.
    required: true
  mithril_aggregator_snapshot_use_cdn_domain:
    description: Mithril aggregator CNAME field used for the snapshot CDN.
    required: false
    default: "false"
  mithril_aggregator_snapshot_compression_algorithm:
    description: Mithril aggregator snapshot compression algorithm.
    required: false
  mithril_aggregator_zstandard_parameters_level:
    description: Mithril aggregator snapshot zstandard compression level.
    required: false
  mithril_aggregator_zstandard_parameters_workers:
    description: Mithril aggregator snapshot zstandard number of workers.
    required: false
  mithril_aggregator_cexplorer_pools_url:
    description: CExplorer url of the list of pools that is used by the mithril aggregator.
    required: false
  mithril_aggregator_allow_unparsable_block:
    description: If set no error is returned in case of unparsable block and an error log is written instead. Will be ignored on (pre)production networks.
    required: false
    default: "false"
  mithril_aggregator_cardano_transactions_prover_cache_pool_size:
    description: Mithril aggregator cardano transactions prover cache pool size.
    required: true
  mithril_aggregator_cardano_transactions_database_connection_pool_size:
    description: Mithril aggregator cardano transactions database connection pool size.
    required: true
  mithril_aggregator_cardano_transactions_signing_config_security_parameter:
    description: Mithril aggregator number of blocks to discard from the tip of the chain when importing Cardano transactions
    required: true
  mithril_aggregator_cardano_transactions_signing_config_step:
    description: Mithril aggregator number of blocks between signature of the Cardano transactions
    required: true
  mithril_aggregator_leader_aggregator_endpoint:
    description: Mithril aggregator leader aggregator endpoint to follow.
    required: false
    default: ""
  mithril_aggregator_ancillary_signer_type:
    description: Mithril aggregator ancillary signer type ('secret-key' or 'gcp-kms').
    required: true
  mithril_aggregator_ancillary_signer_secret_key:
    description: Mithril aggregator ancillary signer secret key used to sign ancillary files (used with mithril_aggregator_ancillary_signer_type='secret-key').
    required: false
    default: ""
  mithril_aggregator_ancillary_signer_gcp_kms_resource_name:
    description: Mithril aggregator ancillary signer GCP KMS resource name used to sign ancillary files (used with mithril_aggregator_ancillary_signer_type='gcp-kms').
    required: false
    default: ""
  mithril_aggregator_ancillary_signer_gcp_kms_credentials:
    description: Mithril aggregator ancillary signer JSON credentials to access GCP KMS (used with mithril_aggregator_ancillary_signer_type='gcp-kms').
    required: false
    default: ""
  mithril_aggregator_custom_origin_tag_white_list:
    description: Mithril aggregator origin tags white list used by the mithril aggregator (comma separated list of tags).
    required: false
    default: ""
  prometheus_auth_username:
    description: Prometheus metrics endpoint username.
    required: false
  prometheus_auth_password:
    description: Prometheus metrics endpoint password.
    required: false
  prometheus_ingest_host:
    description: Prometheus ingester endpoint location.
    required: false
  prometheus_ingest_username:
    description: Prometheus ingester endpoint username.
    required: false
  prometheus_ingest_password:
    description: Prometheus ingester endpoint password.
    required: false
  loki_auth_username:
    description: Loki metrics endpoint username.
    required: false
  loki_auth_password:
    description: Loki metrics endpoint password.
    required: false
  loki_ingest_host:
    description: Loki ingester endpoint location.
    required: false
  loki_ingest_username:
    description: Loki ingester endpoint username.
    required: false
  loki_ingest_password:
    description: Loki ingester endpoint password.
    required: false

runs:
  using: "composite"
  steps:
    - name: Checkout sources
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_wrapper: false

    - name: Prepare service account credentials
      shell: bash
      working-directory: mithril-infra
      run: |
        echo '${{ inputs.google_application_credentials }}' > ./google-application-credentials.json
        chmod u+x ./assets/tools/utils/google-credentials-public-key.sh
        ./assets/tools/utils/google-credentials-public-key.sh ./google-application-credentials.json ./assets/ssh_keys-${{ inputs.google_compute_instance_ssh_keys_environment }} curry

    - name: Prepare variables
      shell: bash
      id: prepare
      run: |
        MITHRIL_AGGREGATOR_ANCILLARY_SIGNER_GCP_KMS_CREDENTIALS_BASE64=$(echo '${{ inputs.mithril_aggregator_ancillary_signer_gcp_kms_credentials }}' | base64 -w 0)
        echo "::add-mask::$MITHRIL_AGGREGATOR_ANCILLARY_SIGNER_GCP_KMS_CREDENTIALS_BASE64"
        echo "mithril_aggregator_ancillary_signer_gcp_kms_credentials_base64=$MITHRIL_AGGREGATOR_ANCILLARY_SIGNER_GCP_KMS_CREDENTIALS_BASE64" >> $GITHUB_OUTPUT

    - name: Prepare terraform variables
      shell: bash
      working-directory: mithril-infra
      run: |
        cat > ./env.variables.tfvars << EOF
          environment_prefix                                                        = "${{ inputs.environment_prefix }}"
          cardano_network                                                           = "${{ inputs.cardano_network }}"
          cardano_image_id                                                          = "${{ inputs.cardano_node_version }}"
          cardano_image_registry                                                    = "${{ inputs.cardano_node_docker_registry }}"
          google_region                                                             = "${{ inputs.google_region }}"
          google_zone                                                               = "${{ inputs.google_zone }}"
          google_machine_type                                                       = "${{ inputs.google_machine_type }}"
          google_compute_instance_boot_disk_size                                    = "${{ inputs.google_compute_instance_boot_disk_size }}"
          google_compute_instance_boot_disk_type                                    = "${{ inputs.google_compute_instance_boot_disk_type }}"
          google_compute_instance_boot_disk_snapshot                                = "${{ inputs.google_compute_instance_boot_disk_snapshot }}"
          google_compute_instance_data_disk_size                                    = "${{ inputs.google_compute_instance_data_disk_size }}"
          google_compute_instance_data_disk_type                                    = "${{ inputs.google_compute_instance_data_disk_type }}"
          google_compute_instance_data_disk_snapshot                                = "${{ inputs.google_compute_instance_data_disk_snapshot }}"
          google_compute_instance_ssh_keys_environment                              = "${{ inputs.google_compute_instance_ssh_keys_environment }}"
          google_service_credentials_json_file                                      = "./google-application-credentials.json"
          mithril_use_p2p_network                                                   = "${{ inputs.mithril_use_p2p_network }}"
          mithril_p2p_use_dmq_protocol                                              = "${{ inputs.mithril_p2p_use_dmq_protocol }}"
          mithril_p2p_network_bootstrap_peer                                        = "${{ inputs.mithril_p2p_network_bootstrap_peer }}"
          mithril_p2p_signer_relay_signer_registration_mode                         = "${{ inputs.mithril_p2p_signer_relay_signer_registration_mode }}"
          mithril_p2p_signer_relay_signature_registration_mode                      = "${{ inputs.mithril_p2p_signer_relay_signature_registration_mode }}"
          mithril_api_domain                                                        = "${{ inputs.mithril_api_domain }}"
          mithril_image_id                                                          = "${{ inputs.mithril_image_id }}"
          mithril_genesis_verification_key_url                                      = "${{ inputs.mithril_genesis_verification_key_url }}"
          mithril_genesis_secret_key                                                = "${{ inputs.mithril_genesis_secret_key }}"
          mithril_protocol_parameters                                               = ${{ fromJSON(inputs.mithril_protocol_parameters) }}
          mithril_signers                                                           = ${{ fromJSON(inputs.mithril_signers) }}
          mithril_era_reader_adapter_type                                           = "${{ inputs.mithril_era_reader_adapter_type }}"
          mithril_era_reader_address_url                                            = "${{ inputs.mithril_era_reader_address_url }}"
          mithril_era_reader_verification_key_url                                   = "${{ inputs.mithril_era_reader_verification_key_url }}"
          mithril_era_reader_secret_key                                             = "${{ inputs.mithril_era_reader_secret_key }}"
          mithril_aggregator_signed_entity_types                                    = "${{ inputs.mithril_aggregator_signed_entity_types }}"
          mithril_aggregator_aggregate_signature_type                               = "${{ inputs.mithril_aggregator_aggregate_signature_type }}"
          mithril_aggregator_cdn_cname                                              = "${{ inputs.mithril_aggregator_cdn_cname }}"
          mithril_aggregator_snapshot_use_cdn_domain                                = ${{ inputs.mithril_aggregator_snapshot_use_cdn_domain }}
          mithril_aggregator_snapshot_compression_algorithm                         = "${{ inputs.mithril_aggregator_snapshot_compression_algorithm }}"
          mithril_aggregator_zstandard_parameters_level                             = "${{ inputs.mithril_aggregator_zstandard_parameters_level }}"
          mithril_aggregator_zstandard_parameters_workers                           = "${{ inputs.mithril_aggregator_zstandard_parameters_workers }}"
          mithril_aggregator_cexplorer_pools_url                                    = "${{ inputs.mithril_aggregator_cexplorer_pools_url }}"
          mithril_aggregator_allow_unparsable_block                                 = "${{ inputs.mithril_aggregator_allow_unparsable_block }}"
          mithril_aggregator_cardano_transactions_prover_cache_pool_size            = "${{ inputs.mithril_aggregator_cardano_transactions_prover_cache_pool_size }}"
          mithril_aggregator_cardano_transactions_database_connection_pool_size     = "${{ inputs.mithril_aggregator_cardano_transactions_database_connection_pool_size }}"
          mithril_aggregator_cardano_transactions_signing_config_security_parameter = "${{ inputs.mithril_aggregator_cardano_transactions_signing_config_security_parameter }}"
          mithril_aggregator_cardano_transactions_signing_config_step               = "${{ inputs.mithril_aggregator_cardano_transactions_signing_config_step }}"
          mithril_aggregator_leader_aggregator_endpoint                             = "${{ inputs.mithril_aggregator_leader_aggregator_endpoint }}"
          mithril_aggregator_ancillary_signer_type                                  = "${{ inputs.mithril_aggregator_ancillary_signer_type }}"
          mithril_aggregator_ancillary_signer_secret_key                            = "${{ inputs.mithril_aggregator_ancillary_signer_secret_key }}"
          mithril_aggregator_ancillary_signer_gcp_kms_resource_name                 = "${{ inputs.mithril_aggregator_ancillary_signer_gcp_kms_resource_name }}"
          mithril_aggregator_ancillary_signer_gcp_kms_credentials                   = "${{ steps.prepare.outputs.mithril_aggregator_ancillary_signer_gcp_kms_credentials_base64 }}"
          mithril_aggregator_custom_origin_tag_white_list                           = "${{ inputs.mithril_aggregator_custom_origin_tag_white_list }}"
          prometheus_auth_username                                                  = "${{ inputs.prometheus_auth_username }}"
          prometheus_auth_password                                                  = "${{ inputs.prometheus_auth_password }}"
          prometheus_ingest_host                                                    = "${{ inputs.prometheus_ingest_host }}"
          prometheus_ingest_username                                                = "${{ inputs.prometheus_ingest_username }}"
          prometheus_ingest_password                                                = "${{ inputs.prometheus_ingest_password }}"
          loki_auth_username                                                        = "${{ inputs.loki_auth_username }}"
          loki_auth_password                                                        = "${{ inputs.loki_auth_password }}"
          loki_ingest_host                                                          = "${{ inputs.loki_ingest_host }}"
          loki_ingest_username                                                      = "${{ inputs.loki_ingest_username }}"
          loki_ingest_password                                                      = "${{ inputs.loki_ingest_password }}"
        EOF
        terraform fmt ./env.variables.tfvars
        cat ./env.variables.tfvars

    - name: Init Terraform
      shell: bash
      working-directory: mithril-infra
      run: |
        GOOGLE_APPLICATION_CREDENTIALS=./google-application-credentials.json terraform init -backend-config="bucket=${{ inputs.terraform_backend_bucket }}" -backend-config="prefix=terraform/mithril-${{ inputs.environment }}" -upgrade

    - name: Check Terraform
      shell: bash
      working-directory: mithril-infra
      run: terraform fmt -check

    - name: Terraform Plan
      if: inputs.dry_run == 'true'
      shell: bash
      working-directory: mithril-infra
      run: |
        GOOGLE_APPLICATION_CREDENTIALS=./google-application-credentials.json terraform plan --var-file=./env.variables.tfvars

    - name: Terraform Apply
      shell: bash
      working-directory: mithril-infra
      if: inputs.dry_run == 'false'
      run: |
        GOOGLE_APPLICATION_CREDENTIALS=./google-application-credentials.json terraform apply -auto-approve --var-file=./env.variables.tfvars

    - name: Cleanup
      shell: bash
      working-directory: mithril-infra
      run: |
        rm -f ./env.variables.tfvars
        rm -f ./google-application-credentials.json
