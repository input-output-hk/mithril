name: prepare-distribution
description: |
  Package, add crates table, sign artifacts

  The artifacts for all supported environments must have been downloaded
  in "package-{EnvName}-x64" subfolders before calling this action.
inputs:
  tag:
    description: The tag to use for the distribution
    required: true
  download-url-base:
    description: Base url where the released distribution will be downloadable
    required: true
  gpg-secret-key:
    description: A GPG secret key to sign the distribution
    required: true
  compatibility-table:
    description: A json in which each key corresponds to a network and each value describes its compatibility
    required: true
runs:
  using: "composite"
  steps:
    - name: Get short SHA
      id: slug
      shell: bash
      run: echo "sha8=$(echo ${{ github.sha }} | cut -c1-7)" >> $GITHUB_OUTPUT

    - name: Compute version name
      id: compute-version-name
      shell: bash
      run: |
        if [[ "${{ inputs.tag }}" == "unstable" ]]; then
          echo "version-name=unstable-${{ steps.slug.outputs.sha8 }}" >> $GITHUB_OUTPUT
        else
          echo "version-name=${{ inputs.tag }}" >> $GITHUB_OUTPUT
        fi

    - name: Package distribution (Linux-X64)
      shell: bash
      run: |
        python3 ./.github/workflows/scripts/package-distribution.py \
        --input package-Linux-X64/ \
        --dest package/ \
        --version "${{ steps.compute-version-name.outputs.version-name }}" \
        --target "linux-x64"

    - name: Package distribution (Linux-ARM64)
      shell: bash
      run: |
        python3 ./.github/workflows/scripts/package-distribution.py \
        --input package-Linux-ARM64/ \
        --dest package/ \
        --version "${{ steps.compute-version-name.outputs.version-name }}" \
        --target "linux-arm64"

    - name: Package distribution (macOS-ARM64)
      shell: bash
      run: |
        python3 ./.github/workflows/scripts/package-distribution.py \
        --input package-macOS-ARM64/ \
        --dest package/ \
        --version "${{ steps.compute-version-name.outputs.version-name }}" \
        --target "macos-arm64"

    - name: Package distribution (Windows-X64)
      shell: bash
      run: |
        python3 ./.github/workflows/scripts/package-distribution.py \
        --input package-Windows-X64/ \
        --dest package/ \
        --version "${{ steps.compute-version-name.outputs.version-name }}" \
        --target "windows-x64"

    - name: Package Explorer
      shell: bash
      run: |
        python3 ./.github/workflows/scripts/package-distribution.py \
        --input package-explorer/ \
        --dest package/ \
        --name "mithril-explorer" \
        --version "${{ steps.compute-version-name.outputs.version-name }}"

    - name: Prepare crates versions table
      shell: bash
      run: |
        cat > ./release-notes-addon.txt << EOF

        ## Crates Versions
        |  Crate  |  Version  |
        |---------- |-------------|
        EOF

        cargo metadata --quiet --no-deps | \
          jq -r '.packages | sort_by(.name) | .[] | select([.name] | inside(["mithril-stm", "mithril-aggregator", "mithril-client", "mithril-client-cli", "mithril-client-wasm", "mithril-signer", "mithril-common"])) | "| \(.name) | `\(.version)` |"' \
          >> ./release-notes-addon.txt

    - name: Add compatibility table
      shell: bash
      run: |
        cat >> ./release-notes-addon.txt << EOF

        ## Networks Compatibility :warning:
        |  Network  |  Compatible  |
        |---------- |:-------------:|
        EOF

        echo '${{ inputs.compatibility-table }}' \
          | jq -r 'keys_unsorted[] as $network | "| \($network) | \(.[$network]) |"' \
          >> ./release-notes-addon.txt

    - name: Add platform support table
      shell: bash
      run: |
        cat >> ./release-notes-addon.txt << EOF

        ## Platform Support

        Summary of the platforms for which pre-built binaries are provided.

        | Binary             | Linux x64 | Linux arm64 | macOS arm64 | Windows x64 |
        | ------------------ | :-------: | :---------: | :---------: | :---------: |
        | mithril-aggregator |     ✔     |   ✔ ⁽\*⁾    |     ⛔      |     ⛔      |
        | mithril-signer     |     ✔     |   ✔ ⁽\*⁾    |     ⛔      |     ⛔      |
        | mithril-client     |     ✔     |   ✔ ⁽\*⁾    |      ✔      |      ✔      |

        ⁽\*⁾⚠️ Linux arm64 builds are provided on a best-effort basis and are not officially supported.

        ### Linux Requirements
        The Linux binaries target \`glibc\`: to run them or install the \`.deb\` packages you must have \`glibc\` version \`2.35+\` installed.
        Compatible systems include, but are not limited to, \`Ubuntu 22.04+\` or \`Debian 12+\` (Bookworm)).
        EOF

    - name: Fetch the latest version of the unstable tag
      if: contains(inputs.tag, 'unstable')
      shell: bash
      run: |
        cat >> ./release-notes-addon.txt << EOF

        ## Fetch the latest version of the \`unstable\` tag
        The \`unstable\` tag is updated with a new commit id when a new \`unstable\` release is published.
        To fetch the latest version of the unstable tag, execute the command:
        \`git tag -d unstable && git fetch origin tag unstable\`
        EOF

    - name: Download a binary asset
      shell: bash
      run: |
        cat >> ./release-notes-addon.txt << EOF

        ## Download a binary asset
        To simplify the installation and updating of Mithril binaries, we have created a one line installer that downloads and installs the Mithril binaries for you.
        This installer is available for Linux and macOS and supports the Mithril signer, Mithril aggregator, and Mithril client CLI.

        Use the following commands to install the Mithril nodes:

        - Download the **Mithril signer** in the current directory:
        \`\`\`bash
        curl --proto '=https' --tlsv1.2 -sSf https://raw.githubusercontent.com/input-output-hk/mithril/refs/heads/main/mithril-install.sh | sh -s -- -c mithril-signer -d ${{ inputs.tag }} -p \$(pwd)
        \`\`\`

        - Download the **Mithril client CLI** in the current directory:
        \`\`\`bash
        curl --proto '=https' --tlsv1.2 -sSf https://raw.githubusercontent.com/input-output-hk/mithril/refs/heads/main/mithril-install.sh | sh -s -- -c mithril-client -d ${{ inputs.tag }} -p \$(pwd)
        \`\`\`

        - Download the **Mithril aggregator** in the current directory:
        \`\`\`bash
        curl --proto '=https' --tlsv1.2 -sSf https://raw.githubusercontent.com/input-output-hk/mithril/refs/heads/main/mithril-install.sh | sh -s -- -c mithril-aggregator -d ${{ inputs.tag }} -p \$(pwd)
        \`\`\`
        EOF

    - name: Create and sign sha256 checksum
      shell: bash
      env:
        GPG_SECRET_KEY: ${{ inputs.gpg-secret-key }}
      run: ./.github/workflows/scripts/sign-distribution.sh

    - name: Create a procedure to verify the distribution
      shell: bash
      env:
        GPG_SECRET_KEY: ${{ inputs.gpg-secret-key }}
        PROCEDURE_FILE_PATH: ./release-notes-addon.txt
        DOWNLOAD_URL_BASE: ${{ inputs.download-url-base }}
      run: ./.github/workflows/scripts/verify-distribution.sh

    - name: Download a Docker image
      shell: bash
      run: |
        if [[ "${{ inputs.tag }}" == "unstable" ]]; then
          MITHRIL_IMAGE_ID="main-${{ steps.slug.outputs.sha8 }}"
        else
          MITHRIL_IMAGE_ID="${{ inputs.tag }}-${{ steps.slug.outputs.sha8 }}"
        fi

        cat >> ./release-notes-addon.txt << EOF

        ## Download a Docker image
        You can directly pull prebuilt Mithril Docker images:

        | Binary             |              Image name              |                             URL                              |
        | ------------------ | :----------------------------------: | :----------------------------------------------------------: |
        | mithril-aggregator | mithril-aggregator:$MITHRIL_IMAGE_ID | ghcr.io/input-output-hk/mithril-aggregator:$MITHRIL_IMAGE_ID |
        | mithril-signer     |   mithril-signer:$MITHRIL_IMAGE_ID   |   ghcr.io/input-output-hk/mithril-signer:$MITHRIL_IMAGE_ID   |
        | mithril-client     |   mithril-client:$MITHRIL_IMAGE_ID   |   ghcr.io/input-output-hk/mithril-client:$MITHRIL_IMAGE_ID   |
        EOF

    - name: List packaged assets
      shell: bash
      run: ls -al ./package
