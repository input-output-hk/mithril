name: prepare-distribution
description: |
  Package, add crates table, sign artifacts

  The artifacts for all supported environments must have been downloaded
  in "package-{EnvName}-x64" subfolders before calling this action.
inputs:
  version-name:
    description: Name of the version to package
    required: true
  download-url-base:
    description: Base url where the released distribution will be downloadable
    required: true
  gpg-secret-key:
    description: A GPG secret key to sign the distribution
    required: true
  compatibility-table:
    description: A json in which each key corresponds to a network and each value describes its compatibility
    required: true
runs:
  using: "composite"
  steps:
    - name: Package distribution (Linux-X64)
      shell: bash
      run: |
        python3 ./.github/workflows/scripts/package-distribution.py \
        --input package-Linux-X64/ \
        --dest package/ \
        --version "${{ inputs.version-name }}" \
        --target "linux-x64"

    - name: Package distribution (macOS-X64)
      shell: bash
      run: |
        python3 ./.github/workflows/scripts/package-distribution.py \
        --input package-macOS-X64/ \
        --dest package/ \
        --version "${{ inputs.version-name }}" \
        --target "macos-x64"

    - name: Package distribution (macOS-ARM64)
      shell: bash
      run: |
        python3 ./.github/workflows/scripts/package-distribution.py \
        --input package-macOS-ARM64/ \
        --dest package/ \
        --version "${{ inputs.version-name }}" \
        --target "macos-arm64"

    - name: Package distribution (Windows-X64)
      shell: bash
      run: |
        python3 ./.github/workflows/scripts/package-distribution.py \
        --input package-Windows-X64/ \
        --dest package/ \
        --version "${{ inputs.version-name }}" \
        --target "windows-x64"

    - name: Prepare crates versions table
      shell: bash
      run: |
        cat > ./release-notes-addon.txt << EOF

        ## Crates Versions
        |  Crate  |  Version  |
        |---------- |-------------|
        EOF

        cargo metadata --quiet --no-deps | \
          jq -r '.packages | sort_by(.name) | .[] | select([.name] | inside(["mithril-stm", "mithril-aggregator", "mithril-client", "mithril-client-cli", "mithril-client-wasm", "mithril-signer", "mithril-common"])) | "| \(.name) | `\(.version)` |"' \
          >> ./release-notes-addon.txt

    - name: Add compatibility table
      shell: bash
      run: |
        cat >> ./release-notes-addon.txt << EOF

        ## Networks Compatibility :warning:
        |  Network  |  Compatible  |
        |---------- |:-------------:|
        EOF

        echo '${{ inputs.compatibility-table }}' \
          | jq -r 'keys_unsorted[] as $network | "| \($network) | \(.[$network]) |"' \
          >> ./release-notes-addon.txt

    - name: Add minimum supported libc version
      shell: bash
      run: |
        cat >> ./release-notes-addon.txt << EOF

        ## Linux Requirements
        The Linux binaries target \`glibc\`: to run them or install the \`.deb\` packages you must have \`glibc\` version \`2.31+\` installed.
        Compatible systems include, but are not limited to, \`Ubuntu 20.04+\` or \`Debian 11+\` (Bullseye)).
        EOF

    - name: Fetch the latest version of the unstable tag
      if: contains(inputs.version-name, 'unstable')
      shell: bash
      run: |
        cat >> ./release-notes-addon.txt << EOF

        ## Fetch the latest version of the \`unstable\` tag
        The \`unstable\` tag is updated with a new commit id when a new \`unstable\` release is published.
        To fetch the latest version of the unstable tag, execute the command:
        \`git tag -d unstable && git fetch origin tag unstable\`
        EOF

    - name: Create and sign sha256 checksum
      shell: bash
      env:
        GPG_SECRET_KEY: ${{ inputs.gpg-secret-key }}
      run: ./.github/workflows/scripts/sign-distribution.sh

    - name: Create a procedure to verify the distribution
      shell: bash
      env:
        GPG_SECRET_KEY: ${{ inputs.gpg-secret-key }}
        PROCEDURE_FILE_PATH: ./release-notes-addon.txt
        DOWNLOAD_URL_BASE: ${{ inputs.download-url-base }}
      run: ./.github/workflows/scripts/verify-distribution.sh

    - name: List packaged assets
      shell: bash
      run: ls -al ./package
