name: Mithril Client multi-platform test

on:
  workflow_dispatch:
    inputs:
      commit_sha:
        description: |
          SHA of the commit on which the mithril-client binary should be obtained, a "ci.yml" workflow must have run
          on it else no binary would be available leading to the failure of this.

          If not provided the last commit on the main branch will be used instead.
        required: false
        type: string
      docker_image_id:
        description: The selected Docker image id.
        required: true
        type: string
        default: latest
      network:
        description: The name of the selected Cardano network.
        required: true
        type: string
        default: preview
      aggregator_endpoint:
        description: The endpoint of the selected aggregator of the Mithril network.
        required: true
        type: string
        default: https://aggregator.pre-release-preview.api.mithril.network/aggregator
      genesis_verification_key:
        description: The genesis verification key location for the Mithril network.
        required: false
        type: string
        default: https://raw.githubusercontent.com/input-output-hk/mithril/main/mithril-infra/configuration/pre-release-preview/genesis.vkey
      transactions_hashes_to_certify:
        description: Comma separated list of transactions hashes to test certification on.
        required: false
        type: string
      ancillary_verification_key:
        description: The ancillary verification key location to verify the ancillary files.
        required: false
        type: string
        default: https://raw.githubusercontent.com/input-output-hk/mithril/main/mithril-infra/configuration/pre-release-preview/ancillary.vkey
      enable_debug:
        description: Enable debug output ("-vvv") for the mithril-client calls
        required: true
        type: boolean
        default: false
  workflow_call:
    inputs:
      commit_sha:
        type: string
      docker_image_id:
        type: string
        default: unstable
      network:
        type: string
        default: preview
      aggregator_endpoint:
        type: string
        default: https://aggregator.testing-preview.api.mithril.network/aggregator
      genesis_verification_key:
        type: string
        default: https://raw.githubusercontent.com/input-output-hk/mithril/main/mithril-infra/configuration/testing-preview/genesis.vkey
      transactions_hashes_to_certify:
        type: string
        default: 1f7dbc899a898ceb4274bbc33b31ca5f0de497753c6c6795fa34838fc252de9b,c43e809de628f7c1ba41a44f188ed3872bb1f97aa101271e35424a8e1d95bea9,c61e22ac4a79a02b28ed36217369ff6959465790a4fe9e66738b7a820e174fcd
      ancillary_verification_key:
        type: string
        default: https://raw.githubusercontent.com/input-output-hk/mithril/main/mithril-infra/configuration/testing-preview/ancillary.vkey
      enable_debug:
        type: boolean
        default: false

jobs:
  test-binaries:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-24.04, ubuntu-24.04-arm, macos-14, windows-latest]
        extra_args: ["", "--include-ancillary"]

    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Prepare environment variables
        id: prepare
        shell: bash
        run: |
          if [[ -n "${{ inputs.commit_sha }}" ]]; then
            echo "sha=${{ inputs.commit_sha }}" >> $GITHUB_OUTPUT
          else
            echo "branch=main" >> $GITHUB_OUTPUT
          fi

          if [[ "${{ inputs.enable_debug }}" == "true" ]]; then
            echo "debug_level=-vvv" >> $GITHUB_OUTPUT
          fi

          echo "NETWORK=${{ inputs.network }}" >> $GITHUB_ENV
          echo "AGGREGATOR_ENDPOINT=${{ inputs.aggregator_endpoint }}" >> $GITHUB_ENV
          echo "GENESIS_VERIFICATION_KEY=$(curl -s ${{ inputs.genesis_verification_key }})" >> $GITHUB_ENV
          echo "TRANSACTIONS_HASHES_TO_CERTIFY=${{ inputs.transactions_hashes_to_certify }}" >> $GITHUB_ENV

          echo "ANCILLARY_VERIFICATION_KEY=$(curl -s ${{ inputs.ancillary_verification_key }})" >> $GITHUB_ENV

      - name: Assessing aggregator capabilities (Unix)
        id: aggregator_capability_unix
        if: runner.os != 'Windows'
        shell: bash
        run: |
          CARDANO_TRANSACTIONS_CAPABILITY=$(wget -q -O - $AGGREGATOR_ENDPOINT | jq '.capabilities.signed_entity_types | contains(["CardanoTransactions"])')
          CARDANO_STAKE_DISTRIBUTION_CAPABILITY=$(wget -q -O - $AGGREGATOR_ENDPOINT | jq '.capabilities.signed_entity_types | contains(["CardanoStakeDistribution"])')
          CARDANO_DATABASE_V2_CAPABILITY=$(wget -q -O - $AGGREGATOR_ENDPOINT | jq '.capabilities.signed_entity_types | contains(["CardanoDatabase"])')
          echo "cardano_transactions_enabled=$CARDANO_TRANSACTIONS_CAPABILITY" >> $GITHUB_OUTPUT
          echo "cardano_stake_distribution_enabled=$CARDANO_STAKE_DISTRIBUTION_CAPABILITY" >> $GITHUB_OUTPUT
          echo "cardano_database_v2_enabled=$CARDANO_DATABASE_V2_CAPABILITY" >> $GITHUB_OUTPUT

      - name: Assessing aggregator capabilities (Windows)
        id: aggregator_capability_windows
        if: runner.os == 'Windows'
        shell: bash
        run: |
          aria2c -o aggregator_capabilities.json $AGGREGATOR_ENDPOINT
          CARDANO_TRANSACTIONS_CAPABILITY=$(jq '.capabilities.signed_entity_types | contains(["CardanoTransactions"])' aggregator_capabilities.json)
          CARDANO_STAKE_DISTRIBUTION_CAPABILITY=$(jq '.capabilities.signed_entity_types | contains(["CardanoStakeDistribution"])' aggregator_capabilities.json)
          CARDANO_DATABASE_V2_CAPABILITY=$(jq '.capabilities.signed_entity_types | contains(["CardanoDatabase"])' aggregator_capabilities.json)
          echo "cardano_transactions_enabled=$CARDANO_TRANSACTIONS_CAPABILITY" >> $GITHUB_OUTPUT
          echo "cardano_stake_distribution_enabled=$CARDANO_STAKE_DISTRIBUTION_CAPABILITY" >> $GITHUB_OUTPUT
          echo "cardano_database_v2_enabled=$CARDANO_DATABASE_V2_CAPABILITY" >> $GITHUB_OUTPUT

      - name: Checkout binary
        uses: dawidd6/action-download-artifact@v6
        with:
          name: mithril-distribution-${{ runner.os }}-${{ runner.arch }}
          path: ./bin
          commit: ${{ steps.prepare.outputs.sha }}
          branch: ${{ steps.prepare.outputs.branch }}
          workflow: ci.yml
          workflow_conclusion: success

      - name: Set permissions
        shell: bash
        working-directory: ./bin
        run: chmod +x ./mithril-client

      - name: Show client version
        shell: bash
        working-directory: ./bin
        run: ./mithril-client ${{ steps.prepare.outputs.debug_level }} --version

      - name: Cardano Database Snapshot / list and get last digest
        shell: bash
        working-directory: ./bin
        run: |
          ./mithril-client ${{ steps.prepare.outputs.debug_level }} --origin-tag CI cardano-db snapshot list --backend v1
          echo "CDB_SNAPSHOT_DIGEST=$(./mithril-client --origin-tag CI cardano-db snapshot list --json | jq -r '.[0].digest')" >> $GITHUB_ENV

      - name: Cardano Database Snapshot / download & restore latest
        shell: bash
        working-directory: ./bin
        run: ./mithril-client ${{ steps.prepare.outputs.debug_level }} --origin-tag CI cardano-db download $CDB_SNAPSHOT_DIGEST --backend v1 --download-dir v1 ${{ matrix.extra_args }} 2>&1 | tee cdb-download-output.txt

      - name: Cardano Database Snapshot / verify Cardano node starts successfully
        if: matrix.os == 'ubuntu-24.04'
        shell: bash
        run: .github/workflows/scripts/verify-cardano-db-restoration.sh ./bin/cdb-download-output.txt "${{ matrix.extra_args }}"

      # The 'snapshot-converter' binary is not currently supported on Linux ARM64 platforms.
      - name: Ledger state snapshot conversion from InMemory to LMDB
        if: matrix.os != 'ubuntu-24.04-arm' && matrix.extra_args == '--include-ancillary'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: bash
        working-directory: ./bin
        run: ./mithril-client ${{ steps.prepare.outputs.debug_level }} tools utxo-hd snapshot-converter --db-directory v1/db --cardano-node-version latest --utxo-hd-flavor LMDB --commit

      - name: Remove downloaded artifacts to free up disk space (Linux, Windows)
        if: runner.os != 'macOS'
        shell: bash
        working-directory: ./bin
        run: rm --force v1/db/immutable/*.{chunk,primary,secondary}

      - name: Remove downloaded artifacts to free up disk space (macOs)
        if: runner.os == 'macOS'
        shell: bash
        working-directory: ./bin
        run: sudo rm -rf v1/db/

      - name: Mithril Stake Distribution / list and get last hash
        shell: bash
        working-directory: ./bin
        run: |
          ./mithril-client ${{ steps.prepare.outputs.debug_level }} --origin-tag CI mithril-stake-distribution list
          echo "MITHRIL_STAKE_DISTRIBUTION_HASH=$(./mithril-client --origin-tag CI mithril-stake-distribution list --json | jq -r '.[0].hash')" >> $GITHUB_ENV

      - name: Mithril Stake Distribution / download & restore latest
        shell: bash
        working-directory: ./bin
        run: ./mithril-client ${{ steps.prepare.outputs.debug_level }} --origin-tag CI mithril-stake-distribution download $MITHRIL_STAKE_DISTRIBUTION_HASH

      - name: Cardano transaction / list and get last snapshot
        if: steps.aggregator_capability_unix.outputs.cardano_transactions_enabled == 'true' || steps.aggregator_capability_windows.outputs.cardano_transactions_enabled == 'true'
        shell: bash
        working-directory: ./bin
        run: |
          ./mithril-client ${{ steps.prepare.outputs.debug_level }} --origin-tag CI cardano-transaction snapshot list
          echo "CTX_SNAPSHOT_HASH=$(./mithril-client --origin-tag CI cardano-transaction snapshot list --json | jq -r '.[0].hash')" >> $GITHUB_ENV

      - name: Cardano transaction / show snapshot
        if: steps.aggregator_capability_unix.outputs.cardano_transactions_enabled == 'true' || steps.aggregator_capability_windows.outputs.cardano_transactions_enabled == 'true'
        shell: bash
        working-directory: ./bin
        run: ./mithril-client --origin-tag CI cardano-transaction snapshot show $CTX_SNAPSHOT_HASH

      - name: Cardano transaction certify
        if: steps.aggregator_capability_unix.outputs.cardano_transactions_enabled == 'true' || steps.aggregator_capability_windows.outputs.cardano_transactions_enabled == 'true'
        shell: bash
        working-directory: ./bin
        run: ./mithril-client ${{ steps.prepare.outputs.debug_level }} --origin-tag CI cardano-transaction certify $TRANSACTIONS_HASHES_TO_CERTIFY

      - name: Cardano Stake Distribution / list and get last epoch and hash
        if: steps.aggregator_capability_unix.outputs.cardano_stake_distribution_enabled == 'true' || steps.aggregator_capability_windows.outputs.cardano_stake_distribution_enabled == 'true'
        shell: bash
        working-directory: ./bin
        run: |
          ./mithril-client ${{ steps.prepare.outputs.debug_level }} --origin-tag CI cardano-stake-distribution list
          CMD_OUTPUT=$(./mithril-client --origin-tag CI cardano-stake-distribution list --json)
          echo "CARDANO_STAKE_DISTRIBUTION_EPOCH=$(echo "$CMD_OUTPUT" | jq -r '.[0].epoch')" >> $GITHUB_ENV
          echo "CARDANO_STAKE_DISTRIBUTION_HASH=$(echo "$CMD_OUTPUT" | jq -r '.[0].hash')" >> $GITHUB_ENV

      - name: Cardano Stake Distribution / download & restore latest by epoch
        if: steps.aggregator_capability_unix.outputs.cardano_stake_distribution_enabled == 'true' || steps.aggregator_capability_windows.outputs.cardano_stake_distribution_enabled == 'true'
        shell: bash
        working-directory: ./bin
        run: ./mithril-client ${{ steps.prepare.outputs.debug_level }} --origin-tag CI cardano-stake-distribution download $CARDANO_STAKE_DISTRIBUTION_EPOCH

      - name: Cardano Stake Distribution / download & restore latest by hash
        if: steps.aggregator_capability_unix.outputs.cardano_stake_distribution_enabled == 'true' || steps.aggregator_capability_windows.outputs.cardano_stake_distribution_enabled == 'true'
        shell: bash
        working-directory: ./bin
        run: ./mithril-client ${{ steps.prepare.outputs.debug_level }} --origin-tag CI cardano-stake-distribution download $CARDANO_STAKE_DISTRIBUTION_HASH

      - name: Cardano Database V2 Snapshot / list and get last hash
        if: steps.aggregator_capability_unix.outputs.cardano_database_v2_enabled == 'true' || steps.aggregator_capability_windows.outputs.cardano_database_v2_enabled == 'true'
        shell: bash
        working-directory: ./bin
        run: |
          ./mithril-client ${{ steps.prepare.outputs.debug_level }} --origin-tag CI cardano-db snapshot list --backend v2
          echo "CARDANO_DATABASE_V2_SNAPSHOT_HASH=$(./mithril-client --origin-tag CI cardano-db snapshot list --backend v2 --json | jq -r '.[0].hash')" >> $GITHUB_ENV

      - name: Cardano Database V2 Snapshot / show snapshot
        if: steps.aggregator_capability_unix.outputs.cardano_database_v2_enabled == 'true' || steps.aggregator_capability_windows.outputs.cardano_database_v2_enabled == 'true'
        shell: bash
        working-directory: ./bin
        run: ./mithril-client --origin-tag CI cardano-db snapshot show --backend v2 $CARDANO_DATABASE_V2_SNAPSHOT_HASH

      - name: Cardano Database V2 Snapshot / download & restore latest (Full restoration)
        if: steps.aggregator_capability_unix.outputs.cardano_database_v2_enabled == 'true' || steps.aggregator_capability_windows.outputs.cardano_database_v2_enabled == 'true'
        shell: bash
        working-directory: ./bin
        run: ./mithril-client ${{ steps.prepare.outputs.debug_level }} --origin-tag CI cardano-db download --backend v2 --download-dir v2 $CARDANO_DATABASE_V2_SNAPSHOT_HASH ${{ matrix.extra_args }} 2>&1 | tee cdb-v2-download-output.txt

      - name: Cardano Database V2 Snapshot / verify immutables
        if: steps.aggregator_capability_unix.outputs.cardano_database_v2_enabled == 'true' || steps.aggregator_capability_windows.outputs.cardano_database_v2_enabled == 'true'
        shell: bash
        working-directory: ./bin
        run: ./mithril-client ${{ steps.prepare.outputs.debug_level }} --origin-tag CI cardano-db verify --backend v2 --db-dir v2/db $CARDANO_DATABASE_V2_SNAPSHOT_HASH | tee cdb-v2-verify-output.txt

      - name: Cardano Database V2 Snapshot / verify Cardano node starts successfully
        if: matrix.os == 'ubuntu-24.04' && steps.aggregator_capability_unix.outputs.cardano_database_v2_enabled == 'true'
        shell: bash
        run: .github/workflows/scripts/verify-cardano-db-restoration.sh ./bin/cdb-v2-download-output.txt "${{ matrix.extra_args }}"

  test-docker:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-24.04]
        extra_args: ["", "--include-ancillary"]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Prepare environment variables
        id: prepare
        shell: bash
        run: |
          if [[ "${{ inputs.enable_debug }}" == "true" ]]; then
            echo "debug_level=-vvv" >> $GITHUB_OUTPUT
          fi

          echo "MITHRIL_IMAGE_ID=${{ inputs.docker_image_id }}" >> $GITHUB_ENV
          echo "NETWORK=${{ inputs.network }}" >> $GITHUB_ENV
          echo "AGGREGATOR_ENDPOINT=${{ inputs.aggregator_endpoint }}" >> $GITHUB_ENV
          echo "GENESIS_VERIFICATION_KEY=$(curl -s ${{ inputs.genesis_verification_key }})" >> $GITHUB_ENV
          echo "TRANSACTIONS_HASHES_TO_CERTIFY=${{ inputs.transactions_hashes_to_certify }}" >> $GITHUB_ENV

          echo "ANCILLARY_VERIFICATION_KEY=$(curl -s ${{ inputs.ancillary_verification_key }})" >> $GITHUB_ENV

      - name: Assessing aggregator capabilities
        id: aggregator_capability
        shell: bash
        run: |
          CARDANO_TRANSACTIONS_CAPABILITY=$(wget -q -O - $AGGREGATOR_ENDPOINT | jq '.capabilities.signed_entity_types | contains(["CardanoTransactions"])')
          CARDANO_STAKE_DISTRIBUTION_CAPABILITY=$(wget -q -O - $AGGREGATOR_ENDPOINT | jq '.capabilities.signed_entity_types | contains(["CardanoStakeDistribution"])')
          CARDANO_DATABASE_V2_CAPABILITY=$(wget -q -O - $AGGREGATOR_ENDPOINT | jq '.capabilities.signed_entity_types | contains(["CardanoDatabase"])')
          echo "cardano_transactions_enabled=$CARDANO_TRANSACTIONS_CAPABILITY" >> $GITHUB_OUTPUT
          echo "cardano_stake_distribution_enabled=$CARDANO_STAKE_DISTRIBUTION_CAPABILITY" >> $GITHUB_OUTPUT
          echo "cardano_database_v2_enabled=$CARDANO_DATABASE_V2_CAPABILITY" >> $GITHUB_OUTPUT

      - name: Prepare Mithril client command
        id: command
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: bash
        run: |
          mkdir -p $PWD/data
          chmod -R a+w $PWD/data
          echo "mithril_client=docker run --rm -e NETWORK=$NETWORK -e GENESIS_VERIFICATION_KEY=$GENESIS_VERIFICATION_KEY -e ANCILLARY_VERIFICATION_KEY=$ANCILLARY_VERIFICATION_KEY -e AGGREGATOR_ENDPOINT=$AGGREGATOR_ENDPOINT -e GITHUB_TOKEN=$GITHUB_TOKEN --name='mithril-client' -v $PWD/data:/app/data ghcr.io/input-output-hk/mithril-client:$MITHRIL_IMAGE_ID"  >> $GITHUB_OUTPUT

      - name: Show client version
        shell: bash
        run: ${{ steps.command.outputs.mithril_client }} ${{ steps.prepare.outputs.debug_level }} --version

      - name: Cardano Database Snapshot / list and get last digest
        shell: bash
        run: |
          ${{ steps.command.outputs.mithril_client }} --origin-tag CI cardano-db snapshot list --backend v1
          echo "CDB_SNAPSHOT_DIGEST=$(${{ steps.command.outputs.mithril_client }} --origin-tag CI cardano-db snapshot list --backend v1 --json | jq -r '.[0].digest')" >> $GITHUB_ENV

      - name: Cardano Database Snapshot / download & restore latest
        shell: bash
        run: ${{ steps.command.outputs.mithril_client }} ${{ steps.prepare.outputs.debug_level }} --origin-tag CI cardano-db download $CDB_SNAPSHOT_DIGEST --backend v1 --download-dir /app/data/v1 ${{ matrix.extra_args }}

      - name: Ledger state snapshot conversion from InMemory to LMDB
        if: matrix.extra_args == '--include-ancillary'
        shell: bash
        run: ${{ steps.command.outputs.mithril_client }} ${{ steps.prepare.outputs.debug_level }}  tools utxo-hd snapshot-converter --db-directory /app/data/v1/db --cardano-node-version latest --utxo-hd-flavor LMDB --commit

      - name: Remove downloaded artifacts to free up disk space
        shell: bash
        run: sudo rm -rf $PWD/data/v1/db/

      - name: Mithril Stake Distribution / list and get last hash
        shell: bash
        run: |
          ${{ steps.command.outputs.mithril_client }} --origin-tag CI mithril-stake-distribution list
          echo "MITHRIL_STAKE_DISTRIBUTION_HASH=$(${{ steps.command.outputs.mithril_client }} --origin-tag CI mithril-stake-distribution list --json | jq -r '.[0].hash')" >> $GITHUB_ENV

      - name: Mithril Stake Distribution / download & restore latest
        shell: bash
        run: ${{ steps.command.outputs.mithril_client }}  ${{ steps.prepare.outputs.debug_level }} --origin-tag CI mithril-stake-distribution download $MITHRIL_STAKE_DISTRIBUTION_HASH --download-dir /app/data

      - name: Cardano transaction / list and get last snapshot
        if: steps.aggregator_capability.outputs.cardano_transactions_enabled == 'true'
        shell: bash
        run: |
          ${{ steps.command.outputs.mithril_client }} --origin-tag CI cardano-transaction snapshot list
          echo "CTX_SNAPSHOT_HASH=$(${{ steps.command.outputs.mithril_client }} --origin-tag CI cardano-transaction snapshot list --json | jq -r '.[0].hash')" >> $GITHUB_ENV

      - name: Cardano transaction / show snapshot
        if: steps.aggregator_capability.outputs.cardano_transactions_enabled == 'true'
        shell: bash
        run: ${{ steps.command.outputs.mithril_client }} --origin-tag CI cardano-transaction snapshot show $CTX_SNAPSHOT_HASH

      - name: Cardano transaction certify
        if: steps.aggregator_capability.outputs.cardano_transactions_enabled == 'true'
        shell: bash
        run: ${{ steps.command.outputs.mithril_client }} ${{ steps.prepare.outputs.debug_level }} --origin-tag CI cardano-transaction certify $TRANSACTIONS_HASHES_TO_CERTIFY

      - name: Cardano Stake Distribution / list and get last epoch and hash
        if: steps.aggregator_capability.outputs.cardano_stake_distribution_enabled == 'true'
        shell: bash
        run: |
          ${{ steps.command.outputs.mithril_client }} --origin-tag CI cardano-stake-distribution list
          CMD_OUTPUT=$(${{ steps.command.outputs.mithril_client }} --origin-tag CI cardano-stake-distribution list --json)
          echo "CARDANO_STAKE_DISTRIBUTION_EPOCH=$(echo "$CMD_OUTPUT" | jq -r '.[0].epoch')" >> $GITHUB_ENV
          echo "CARDANO_STAKE_DISTRIBUTION_HASH=$(echo "$CMD_OUTPUT" | jq -r '.[0].hash')" >> $GITHUB_ENV

      - name: Cardano Stake Distribution / download & restore latest by epoch
        if: steps.aggregator_capability.outputs.cardano_stake_distribution_enabled == 'true'
        shell: bash
        run: ${{ steps.command.outputs.mithril_client }} ${{ steps.prepare.outputs.debug_level }} --origin-tag CI cardano-stake-distribution download $CARDANO_STAKE_DISTRIBUTION_EPOCH --download-dir /app/data

      - name: Cardano Stake Distribution / download & restore latest by hash
        if: steps.aggregator_capability.outputs.cardano_stake_distribution_enabled == 'true'
        shell: bash
        run: ${{ steps.command.outputs.mithril_client }} ${{ steps.prepare.outputs.debug_level }} --origin-tag CI cardano-stake-distribution download $CARDANO_STAKE_DISTRIBUTION_HASH --download-dir /app/data

      - name: Cardano Database V2 Snapshot / list and get last digest
        if: steps.aggregator_capability.outputs.cardano_database_v2_enabled == 'true'
        shell: bash
        run: |
          ${{ steps.command.outputs.mithril_client }} --origin-tag CI cardano-db snapshot list --backend v2
          echo "CARDANO_DATABASE_V2_SNAPSHOT_HASH=$(${{ steps.command.outputs.mithril_client }} --origin-tag CI cardano-db snapshot list --backend v2 --json | jq -r '.[0].hash')" >> $GITHUB_ENV

      - name: Cardano Database V2 Snapshot / show snapshot
        if: steps.aggregator_capability.outputs.cardano_database_v2_enabled == 'true'
        shell: bash
        run: ${{ steps.command.outputs.mithril_client }} --origin-tag CI cardano-db snapshot show --backend v2 $CARDANO_DATABASE_V2_SNAPSHOT_HASH

      - name: Cardano Database V2 Snapshot / download & restore latest (Full restoration)
        if: steps.aggregator_capability.outputs.cardano_database_v2_enabled == 'true'
        shell: bash
        run: ${{ steps.command.outputs.mithril_client }} ${{ steps.prepare.outputs.debug_level }} --origin-tag CI cardano-db download --backend v2 $CARDANO_DATABASE_V2_SNAPSHOT_HASH --download-dir /app/data/v2 ${{ matrix.extra_args }}

      - name: Cardano Database V2 Snapshot / verify immutables
        if: steps.aggregator_capability.outputs.cardano_database_v2_enabled == 'true'
        shell: bash
        run: ${{ steps.command.outputs.mithril_client }} ${{ steps.prepare.outputs.debug_level }} --origin-tag CI cardano-db verify --backend v2 $CARDANO_DATABASE_V2_SNAPSHOT_HASH --db-dir /app/data/v2/db

  test-mithril-client-wasm:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-24.04]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Download built artifacts
        uses: dawidd6/action-download-artifact@v6
        with:
          name: mithril-distribution-wasm
          path: ./mithril-client-wasm
          commit: ${{ steps.prepare.outputs.sha }}
          branch: ${{ steps.prepare.outputs.branch }}
          workflow: ci.yml
          workflow_conclusion: success

      - name: Unpack 'mithril-client-wasm' package
        working-directory: mithril-client-wasm
        run: tar -xvzf *.tgz && mv package/dist .

      - name: Install dependencies
        working-directory: mithril-client-wasm
        run: make ci-test-install

      - name: Create .env file
        working-directory: mithril-client-wasm
        run: |
          echo "AGGREGATOR_ENDPOINT=${{ inputs.aggregator_endpoint }}" > ./ci-test/.env
          echo "GENESIS_VERIFICATION_KEY=$(curl -s ${{ inputs.genesis_verification_key }})" >> ./ci-test/.env
          echo "TRANSACTIONS_HASHES_TO_CERTIFY=${{ inputs.transactions_hashes_to_certify }}" >> ./ci-test/.env

      - name: Start the server
        working-directory: mithril-client-wasm
        shell: bash
        run: make ci-test-serve &

      - name: Wait for the server to be ready
        shell: bash
        run: |
          MAX_ATTEMPTS=30
          CURRENT_ATTEMPT=0
          while true
          do
            sleep 1
            CURRENT_ATTEMPT=$(( ${CURRENT_ATTEMPT} + 1 ))
            if nc -z localhost 8080; then
              echo "Server is ready."
              break
            fi
            if [ "$CURRENT_ATTEMPT" -ge "$MAX_ATTEMPTS" ]; then
              echo "Error: Server not ready after $MAX_ATTEMPTS attempts."
              exit 1
            fi
          done

      - name: Install selenium
        shell: bash
        run: pip install selenium

      - name: Run Chrome headless
        shell: bash
        run: |
          python3 ./.github/workflows/scripts/run-wasm-tests-browser-headless.py chrome
          ./.github/workflows/scripts/parse-wasm-headless-tests-results.sh chrome-results.html

      - name: Run Firefox headless
        shell: bash
        run: |
          python3 ./.github/workflows/scripts/run-wasm-tests-browser-headless.py firefox
          ./.github/workflows/scripts/parse-wasm-headless-tests-results.sh firefox-results.html

      - name: Upload Results Artifacts
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: mithril-client-wasm-tests-artifacts-run_${{ github.run_number }}-attempt_${{ github.run_attempt }}-os_${{ matrix.os }}
          path: |
            chrome-results.html
            chrome-driver.log
            chrome-console.log
            firefox-results.html
            firefox-driver.log
          if-no-files-found: error
