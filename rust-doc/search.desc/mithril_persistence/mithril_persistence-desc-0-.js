searchState.loadedDescShard("mithril_persistence", 0, "Shared datatypes and traits used to for the persistence …\ndatabase module. This module contains queries and entities …\nSQLite module. This module provides a minimal yet useful …\nDefine traits of StakeStorer.\nAggregator node type\nApplication using a database\nEntity related to the <code>db_version</code> database table.\nStruct to perform application version check in the …\nDatabase version.\nQuery to get DatabaseVersion entities.\nHelper struct to hydrate common data.\nSigner node type\nRepresent a file containing SQL structure or data …\nQuery to UPSERT DatabaseVersion entities.\nRegister a migration.\nSQL statements to alter the database.\nName of the application.\nApply migrations\nMigration module for cardano transactions store\nMethod to create the table at the beginning of the …\nThe distribution version the user can fallback to in order …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nQuery to read the application version from the database.\nCreate a SignedEntityType from data coming from the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nconstructor\nApplicationNodeType constructor.\nCreate a new SQL migration instance.\nCreate a new squashed SQL migration instance with the …\nDefine a query that will UPSERT the given version.\nRead a signed entity beacon column from the database\nShared database records\nShared database repositories\nTry to convert an i64 field from the database to a u64\nDate of the last version upgrade\nVersion of the database structure.\nThe semver version this migration targets.\nGet all the migrations required by this version of the …\nBlock range root record is the representation of block …\nCardano Transaction record is the representation of a …\nBlock hash of the transaction\nBlock number of the transaction\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMerkle root of the block range, computed from the list of …\nCardanoTransactionRecord factory\nRange of block numbers covered\nSlot number of the transaction\nUnique hash of the transaction\nCardano transaction repository\nCreate new BlockRangeRootRecords in the database.\nCreate a new CardanoTransactionRecord in the database.\nCreate new CardanoTransactionRecords in the database.\nReturns the argument unchanged.\nRetrieve all the CardanoTransaction in database.\nRetrieve all the BlockRangeRootRecord in database.\nReturn all the CardanoTransactionRecords in the database.\nGet the closest block number above a given slot number\nGet the highest start BlockNumber of the block range roots …\nReturn the CardanoTransactionRecord for the given …\nGet the CardanoTransactionRecord for the given block …\nGet the CardanoTransactionRecord for the given transaction …\nGet the highest ChainPoint of the cardano transactions …\nReturn all the CardanoTransactionRecords in the database …\nCalls <code>U::from(self)</code>.\nInstantiate service\nPrune the transactions older than the given number of …\nRemove transactions and block range roots that are in a …\nRemove transactions and block range roots that are in a …\nRetrieve all the Block Range Roots in database up to the …\nRetrieve the block range root with the highest bounds in …\nStore the given transactions in the database.\nBuilder of SQLite connection\nExtension trait for the SqliteConnection type.\nOptions to apply to the connection\nEnable foreign key support\nEnable Write Ahead Log journal mod (not available for in …\nEntity type returned by the result cursor.\nDatabase query result Iterator wrapper. This wrapper …\nDisable foreign key support after the migrations are run\nGet all condition builder.\nSqLite hydration error\ndata do not conform to expectations\nProjection is a definition of field mapping during a query.\nEach projection field is defined by\nDefine a query to perform on database and return iterator …\nHandful tool to store SQL source aliases.\nHow to hydrate an entity from a SQLite result row\nThe SqliteCleaner is responsible for cleaning up databases …\nTasks that can be performed by the SqliteCleaner\nType of the connection used in Mithril\nPool of Sqlite connections\nSqliteConnection wrapper for a pooled connection\nSqlite transaction wrapper.\nReconstruct the database file, repacking it into a minimal …\nRun a checkpoint to transfer the data from the WAL file to …\nWhere condition builder.\nAdd a new field to the definition. This is one of the …\nAdd a new parameter using a AND operator\nApply a query that do not return data from the …\nApply a query that do not return data from the …\nApply a list of migration to the connection.\nBegin a new transaction.\nBegin a transaction on the connection.\nBuild a connection based on the builder configuration\nCreate a new pool with the given size by calling the given …\nReturns a single resource pool connection\nCommit the transaction.\nGet a connection from the pool\nField definition. Some field definitions can be fairly …\nHelpers to handle SQLite errors\nTurn the Projection into a string suitable for use in SQL …\nTurn the condition into a SQL string representation.\nFetch entities from the database using the given query.\nFetch entities from the database using the given query and …\nFetch entities from the database using the given query and …\nFetch the first entity from the database returned using …\nFetch the first entity from the database returned using …\nReturn the filters to apply to the query.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a Projection from a list of tuples …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the condition for a get all query.\nGet the condition for a get all query.\nReturn the definition of this query, ie the actual SQL …\nReturns the list of the ProjectionFields of this …\nget an iterator from the current alias map\nConstruct a Projection that will allow to hydrate this …\nThis method is intended to be used when creating new …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet the log message for the task.\nField name alias, this is the output name of the field.\nCreate a new instance of the <code>SqliteCleaner</code>.\nCreate a new SqlitePooledConnection\nEntityCursor constructor.\nProjectionField constructor\nInstantiate a new Projection\nInstantiate a new condition from an expression.\nCreate a new alias from a <code>&amp;[(name, alias)]</code> list\nSpawning entities from Result iterator. This iterator will …\nBuilder of file SQLite connection\nBuilder of in memory SQLite connection\nAdd a new condition with a OR operator\nThis indicates the SQL type of the output data.\nExecute the given sql query and return the value of the …\nRollback the transaction.\nCleanup the database by performing the defined tasks.\nInstantiate a condition with a <code>IN</code> statement.\nSet the logger to be used by the cleaner.\nSet the logger to log to at build time\nSet migrations to apply at build time\nSet the node type (default: ApplicationNodeType::Signer).\nSet the ConnectionOptions to enabled on the connection.\nSet the SqliteCleaningTask to be performed by the cleaner.\nSQLITE_BUSY error code\nSqlite error type used in Mithril\nThe error code.\nThe error message.\nRepresent a way to store the stake of mithril party …\nGet the stakes of all party at a given <code>epoch</code>.\nSave the stakes in the store for a given <code>epoch</code>.")