searchState.loadedDescShard("mithril_dmq", 0, "This crate provides mechanisms to publish and consume …\nTrait for the client side of consuming messages from a DMQ …\nA DMQ client consumer implementation.\nTrait for the server side of consuming messages from a DMQ …\nA DMQ server implementation for messages notification from …\nWrapper for a DMQ message which can be serialized and …\nA builder for creating DMQ messages.\nTrait for the client side of publishing messages from a …\nA DMQ client publisher implementation.\nTrait for the server side of publishing messages from a …\nA DMQ server implementation for messages publication to a …\nBuilds a DMQ message from the provided message bytes.\nConsume messages from the DMQ node.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new <code>DmqConsumerClientPallas</code> instance.\nCreates a new instance of DmqConsumerServerPallas.\nCreates a new instance of <code>DmqMessageBuilder</code>.\nCreates a new instance of DmqPublisherClientPallas.\nCreates a new instance of DmqPublisherServerPallas.\nProcesses the next message received from the DMQ network.\nProcesses the next message received from the DMQ network.\nPublishes a message to the DMQ node.\nRegisters the receiver for DMQ messages (only one receiver …\nRegisters a transmitter for DMQ messages.\nRuns the DMQ consumer server.\nRuns the DMQ publisher server.\nSets the timestamp provider for the DMQ message builder.\nSets the TTL (Time To Live) for DMQ messages in seconds.\nTest utilities.\nTest doubles\nFake message computation for testing purposes.\nDmqMessageTestPayload module for tests only\nA fake implementation of the DmqConsumerClient trait for …\nA fake implementation of the DmqPublisherClient trait for …\nFake implementation of a Unix current timestamp provider. …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nComputes the maximum timestamp that can be used with the …\nCreates a new <code>DmqConsumerFake</code> instance with the provided …\nCreates a new <code>DmqPublisherFake</code> instance with the provided …\nCreates a new <code>FakeUnixTimestampProvider</code> with the given …\nComputes a fake DMQ message for testing purposes.\nA test message payload for the DMQ.\nCreates a dummy <code>DmqMessageTestPayload</code> with a predefined …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreates a new <code>DmqMessageTestPayload</code> with the given bytes.")