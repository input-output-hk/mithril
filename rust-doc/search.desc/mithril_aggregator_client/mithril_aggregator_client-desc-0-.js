searchState.loadedDescShard("mithril_aggregator_client", 0, "This crate provides a client to request data from a …\nA client to send HTTP requests to a Mithril Aggregator\nA builder of AggregatorClient\nError structure for the Aggregator Client.\nAggregator-client result type\nContains the error value\nFailed to join the query endpoint to the aggregator url\nCould not parse response.\nContains the success value\nNo signer registration round opened yet\nError raised when querying the aggregator returned a 4XX …\nError raised when querying the aggregator returned a 5XX …\nCould not reach aggregator.\nUnhandled status code\nReturns an AggregatorClient based on the builder …\nCreates a AggregatorClientBuilder to configure a …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate an <code>AggregatorClientError</code> from a response.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConstructs a new <code>AggregatorClientBuilder</code>.\nProvides queries to retrieve or send data to a Mithril …\nSend the given query to the Mithril Aggregator\n<code>ToString::to_string</code>, but without panic on OOM.\nSet the APIVersionProvider to use.\nAdd a set of http headers that will be sent on client …\nSet the Logger to use.\nSet the address of the relay\nSet a timeout to enforce on each request\nGet the details of a certificate\nInstantiate a query to get a certificate by hash\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nInstantiate a query to get the latest genesis certificate")