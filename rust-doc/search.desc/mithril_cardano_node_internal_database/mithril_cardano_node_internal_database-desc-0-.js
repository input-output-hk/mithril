searchState.loadedDescShard("mithril_cardano_node_internal_database", 0, "This crate provides components to read the files of a …\nDirectory name for the immutable files.\nRaised when immutable file listing fails.\nRetrieve data on ImmutableFile from a cardano database.\nImmutableFileObserver related errors.\nAn ImmutableFileObserver using the filesystem.\nDirectory name for the ledger files.\nRaised when the no immutables files were available.\nDirectory name for the volatile files.\nTools to compute Mithril digests from a Cardano node …\nEntities related to a Cardano node internal database.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the ImmutableFileNumber of the last immutable file in …\nReturns the names of the files that compose an immutable …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nImmutableFileSystemObserver factory.\nSignable Builders for Cardano node internal database …\nTest utilities.\nA digester working directly on a Cardano DB immutables …\nComputed immutables digests\nError raised when the digest computation failed.\nA digester than can compute the digest used for mithril …\nImmutableDigester related Errors.\nError raised when the files listing failed.\nError raised when the Merkle tree computation failed.\nError raised when there’s less than the required number …\nCache provider to accelerate …\nCompute the digest\nCompute the digests for a range of immutable files\nCompute the digests merkle tree\nA map of ImmutableFile to their respective digest.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nImmutableDigester factory\nA cardano node DB directory\nExpected last ImmutableFileNumber.\nLast ImmutableFileNumber found when listing ImmutableFiles.\nA specialized result type for …\nContains the error value\nError raised by ImmutableFileDigestCacheProvider::get.\nImmutableFileDigestCacheProvider::get related errors.\nImmutableFileDigestCacheProvider related errors.\nImmutableFileDigestCacheProvider::store related errors.\nA cache provider that store individual ImmutableFile …\nRaised when an IO error is raised when storing a cache.\nRaised when an IO error is raised when getting a cache.\nRaised when json cache deserialization fails.\nA in memory ImmutableFileDigestCacheProvider.\nA JsonImmutableFileDigestCacheProvider builder.\nRaised when json cache serialization fails.\nA in memory ImmutableFileDigestCacheProvider.\nContains the success value\nError raised by ImmutableFileDigestCacheProvider::store.\nRaised when the underlying store failed storing a cache.\nRaised when the underlying store failed getting a cache.\nBuild a JsonImmutableFileDigestCacheProvider based on the …\nIf set will create the cache directory if it doesn’t …\nReturns the argument unchanged.\nReturns the argument unchanged.\nBuild a new MemoryImmutableFileDigestCacheProvider that …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nAssociate each given immutable files with a cached value …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nJsonImmutableFileDigestCacheProvider factory\nJsonImmutableFileDigestCacheProviderBuilder factory.\nReset the stored values\nSet if existing cached values in the provider must be …\nStore the given digests\nSet the Logger to use.\nThe file name used to serialize and deserialize …\nAlias of SignableManifest for Ancillary files\nErrors that can occur when verifying the integrity of the …\nThe hash of a file does not match the hash in the manifest\nRaised when the immutable file filename extraction fails.\nRaised when the immutable file number parsing, from the …\nRaised when the immutable file stem extraction fails.\nAn error occurred while computing the hash of a file\nFilename of the in-memory ledger snapshot ‘meta’ file\nFilename of the in-memory ledger snapshot ‘state’ file\nDirectory name of the in-memory ledger snapshot ‘tables…\nFilename of the in-memory ledger snapshot ‘tables/tvar’…\nRepresent an immutable file in a Cardano node database …\nRaised when ImmutableFile::new fails.\nImmutableFile::new related errors.\nImmutableFile::list_completed_in_dir related errors.\nSnapshot of an UTxO-HD in-memory ledger state\nRepresent an ledger file in a Cardano node database …\nLedgerStateSnapshot::list_all_in_dir related errors.\nSnapshot of a legacy ledger state (before UTxO-HD)\nRaised when the metadata of a file could not be read.\nRaised when no immutable files could be found in the ‘…\nRaised when the “immutable” folder could not be found …\nRaised when the “ledger” folder could not be found in …\nCheck if at least one immutable file exists in the given …\nAggregates the hashes of all the keys and values of the …\nCompute the hash of this immutable file.\nThe filename\nList the files that this manifest signs\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert a path to a LedgerStateSnapshot if it satisfies …\nCreates a new manifest, without a signature, from the …\nReturn paths to all files that constitute this snapshot\n<code>LedgerStateSnapshot::InMemory</code> factory\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n<code>LedgerStateSnapshot::Legacy</code> factory\nList all <code>ImmutableFile</code> in a given directory by recursively …\nList all <code>LedgerStateSnapshot</code> in a given directory.\nList all complete <code>ImmutableFile</code> in a given directory.\nInstantiates a new <code>AncillaryFilesManifest</code>\nImmutableFile factory\nInstantiates a new <code>AncillaryFilesManifest</code>, without a …\nThe immutable file number\nThe path to the immutable file\nSet the signature\nInner manifest\nGet the manifest signature\nReturn the slot number when this snapshot was taken\nVerifies the integrity of the data in the manifest\nActual hash of the file\nExpected hash of the file according to the manifest\nPath of the file that has a hash mismatch\nPath of the file\nSource of the error\nPath for which file stem extraction failed.\nPath for which filename extraction failed.\nThe filename\nName of the ledger state folder\nThe path to the ledger file\nThe path to the ledger file\nThe ledger file slot number\nThe ledger file slot number\nThis structure is responsible for calculating the message …\nThis structure is responsible for calculating the message …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConstructor\nConstructor\nA dummy cardano db.\nA DummyCardanoDbBuilder builder.\nAdd an immutable chunk file and its primary &amp; secondary to …\nMakes build add another trio of immutables file, that won…\nBuild a DummyCardanoDb.\nTest doubles\nFake data builders for testing.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturn the cardano db directory path.\nReturn the immutable db directory path.\nReturn the file number of the last immutable\nReturn the ledger directory path.\nReturn the path of the files in the ledger directory.\nReturn the non-immutables files in the immutables directory\nReturn the non-ledger state snapshot files in the ledger …\nReturn the volatile directory path.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn the file number of the last immutable\nDummyCardanoDbBuilder factory, will create a folder with …\nSet the size of all immutable files written by build to …\nSet the size of all ledger files written by build to the …\nSet the size of all volatile files written by build to the …\nSet the immutables file number that will be used to …\nSet the slot numbers of utxo-hd in-memory snapshot folders …\nSet legacy ledger state snapshot slot numbers to write to …\nSet filenames to write to the db that doesn’t follow the …\nSet filenames to write to the ‘ledger’ subdirectory …\nSet volatile files to write to the db in the ‘volatile’…\nA ImmutableDigester returning configurable result for …\nAn ImmutableFileObserver yielding fixed results for test …\nReturns the argument unchanged.\nReturns the argument unchanged.\nIncrease by one the stored immutable file number, return …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDumbImmutableFileObserver factory.\nUpdate the stored immutable file number.\nThe ImmutableFileNumber that shall be returned by …\nUpdate digest returned by compute_digest\nUpdate the leaves used to construct the merkle tree …\nSet the digest returned by compute_digest\nSet the leaves used to construct the merkle tree returned …\nFake ImmutableFile, bypass the checks done by …")