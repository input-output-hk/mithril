searchState.loadedDescShard("mithril_metric", 0, "metrics module. This module contains the tools to create a …\nThe MetricsServer is responsible for exposing the metrics …\nMetrics service exporter gives the possibility of …\nMetrics server endpoint.\nStart building a new <code>MetricsServer</code> instance.\nCreate a MetricService.\nExport metrics.\nReturns the argument unchanged.\nHelper to create a metric service.\nCalls <code>U::from(self)</code>.\nThis module contains wrapper to prometheus metrics for use …\nServe the metrics server.\nType alias for a counter value.\nMetric collector\nMetric counter\nMetric counter with labels\nMetric gauge\nType alias for a metric name.\nWrapped prometheus collector\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the counter value.\nGet the counter value.\nGet the gauge value.\nIncrement the counter.\nIncrement the counter.\nIncrement the counter by a value.\nIncrement the counter by a value.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMetric name\nCreate a new metric counter.\nCreate a new metric counter.\nCreate a new metric gauge.\nRecord a value in the gauge.")