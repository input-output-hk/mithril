searchState.loadedDescShard("mithril_client", 0, "Define all the tooling necessary to manipulate Mithril …\nA Cardano node database snapshot\nList items of Cardano node database snapshot\nA Cardano stake distribution. Message structure of a …\nList item of Cardano stake distributions. Message …\nA snapshot that allow to know up to which point of time …\nList item of a Cardano transaction snapshot. Message …\nA cryptographic proof for a set of Cardano transactions\nA cryptographic proof of a set of Cardano transactions is …\nStructure that aggregates the available clients for each …\nBuilder than can be used to create a Client easily or with …\nOptions that can be used to configure the client.\nContains the error value\nThe verification of an individual …\nAn individual CardanoTransactionsSetProofMessagePart could …\nA MessageBuilder can be used to compute the message of …\nA Mithril certificate.\nList item of Mithril certificates\nCertificateListItemMessage represents the metadata …\nCertificateMetadata represents the metadata associated to …\nMithril error type, an alias of anyhow::Error\nMithril result type, an alias of anyhow::Result\nAn individual signer of a Mithril certificate\nA Mithril stake distribution.\nList item of Mithril stake distributions.\nNo certified transactions set proof to verify\nNot all certified transactions set proof have the same …\nContains the success value\nA Mithril snapshot of a Cardano Node database.\nList item of Mithril snapshots\nSet of transactions verified by …\nError encountered or produced by the cardano transaction …\nAdd a feedback receiver to receive events for tasks that …\nAggregate verification key The AVK used to sign during the …\nAggregate verification key The AVK used to sign during the …\nConstructs a new <code>ClientBuilder</code> that fetches data from the …\nMechanisms to exchange data with an Aggregator.\nLocations of the ancillary files.\nLocations where the snapshot of the ancillary files can be …\nLocations where the snapshot of the ancillary files can be …\nSize of the ancillary files in Bytes\nSize of the ancillary files in Bytes\nMithril beacon on the Cardano chain.\nMithril beacon on the Cardano chain\nMithril beacon on the Cardano chain\nMithril beacon on the Cardano chain\nBlock number of the Cardano transactions snapshot\nBlock number of the Cardano transactions snapshot\nReturns a <code>Client</code> that uses the dependencies provided to …\nGet the client that fetches and downloads Mithril …\nA client to retrieve Cardano databases data from an …\nGet the client that fetches and downloads Cardano database …\nVersion of the Cardano node used to create the snapshot.\nVersion of the Cardano node used to create the snapshot.\nCardano node version\nCardano node version\nGet the client that fetches Cardano stake distributions.\nA client to retrieve Cardano stake distributions data from …\nGet the client that fetches and verifies Mithril Cardano …\nA client to retrieve from an aggregator cryptographic …\nGet the client that fetches and verifies Mithril …\nA client which retrieves and validates certificates from …\nHash of the certificate that signs this struct Merkle root.\nHash of the associated certificate\nHash of the associated certificate\nHash of the associated certificate\nHash of the associated certificate\nHash of the associated certificate\nHash of the associated certificate\nHash of the certificate that validate this proof merkle …\nHash of the associated certificate\nHash of the associated certificate\nHash of the associated certificate\nHash of the associated certificate\nHashes of the certified transactions\nTransactions that have been certified\n<code>mithril-common</code> re-exports\nCompression algorithm of the snapshot archive\nCompression algorithm of the snapshot archive\nCompute message for a Cardano database.\nCompute message for a Cardano stake distribution.\nCompute message for a Cardano Transactions Proofs.\nCompute message for a Mithril stake distribution.\nCompute message for a snapshot (based on the directory …\nCompute the total size of the snapshot including ancillary …\nDate and time at which the snapshot was created\nDate and time at which the snapshot was created\nDateTime of creation\nDate and time at which the Cardano Stake Distribution was …\nDateTime of creation\nDateTime of creation\nDateTime of creation\nDate and time at which the Mithril Stake Distribution was …\nDate and time at which the snapshot was created\nDate and time at which the snapshot was created\nDigest that is signed by the signer participants\nDigest that is signed by the signer participants\nLocations of the the immutable file digests.\nReturn a dummy CardanoDatabaseSnapshotMessage (test-only).\nReturn a dummy CardanoDatabaseSnapshotListItemMessage …\nReturn a dummy CardanoStakeDistributionMessage (test-only).\nReturn a dummy CardanoStakeDistributionListItemMessage …\nReturn a dummy CertificateMessage (test-only).\nReturn a dummy CertificateMessage (test-only).\nReturn a dummy CertificateMessage (test-only).\nReturn a dummy CertificateListItemMessage (test-only).\nReturn a dummy CardanoTransactionsSetProofMessagePart …\nReturn a dummy CertificateMetadataMessagePart (test-only).\nReturn a dummy SignerWithStakeMessagePart (test-only).\nReturn a dummy MithrilStakeDistributionMessage (test-only).\nReturn a dummy MithrilStakeDistributionListItemMessage …\nReturn a dummy SnapshotMessage (test-only).\nReturn a dummy SnapshotListItemMessage (test-only).\nEpoch at the end of which the Cardano stake distribution …\nEpoch at the end of which the Cardano stake distribution …\nEpoch of the Cardano transactions snapshot\nEpoch of the Cardano transactions snapshot\nEpoch of the Cardano chain\nEpoch of the Cardano chain\nEpoch at which the Mithril Stake Distribution is created\nEpoch at which the Mithril Stake Distribution is created\nA client to retrieve the current Mithril era.\nLong task feedbacks\nFile downloader module.\nFill the given ProtocolMessage with the data associated …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert a set of signers into message parts\nGenesis signature created from the original stake …\nHash of the Cardano database snapshot.\nHash of the Cardano database snapshot.\nHash of the Cardano Stake Distribution\nHash of the Cardano Stake Distribution\nHash of the Cardano Transactions snapshot\nHash of the Cardano Transactions snapshot\nHash of the current certificate Computed from the other …\nHash of the current certificate Computed from the other …\nHash of the Mithril Stake Distribution (different from the …\nHash of the Mithril Stake Distribution (different from the …\nHTTP headers to include in the client requests.\nLocations of the immutable files.\nDate and time when the certificate was initiated …\nDate and time when the certificate was initiated …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe KES period used to compute the verification key …\nLatest block number that has been certified\nLocations where the snapshot of the immutable files can be …\nLocations where the snapshot of the immutable files can be …\nCheck that the certificate signed message match the given …\nMerkle root of the Cardano database snapshot.\nMerkle root of the Cardano database snapshot\nMerkle root of the Cardano transactions snapshot\nMerkle root of the Cardano transactions snapshot\nCertificate metadata aka METADATA(p,n)\nCertificate metadata aka METADATA(p,n)\nGet the client that fetches the current Mithril era.\nGet the client that fetches Mithril stake distributions.\nA client to retrieve Mithril stake distributions data from …\nSTM multi signature created from a quorum of single …\nCardano network\nCardano network part of METADATA(p,n)\nCardano network part of METADATA(p,n)\nCardano network\nCardano network\nConstructs a new <code>ClientBuilder</code> without any dependency set.\nConstructs a new <code>MessageBuilder</code>.\nInstantiate a new ClientOptions.\nCreate a new <code>CardanoTransactionsProofsMessage</code>\nTransactions that could not be certified\nThe encoded operational certificate of stake pool operator …\nThe unique identifier of the signer\nHash of the previous certificate in the chain This is …\nHash of the previous certificate in the chain This is …\nProof of the transactions\nStructured message that is used to create the signed …\nStructured message that is used to create the signed …\nProtocol parameters part of METADATA(p,n)\nProtocol parameters part of METADATA(p,n)\nProtocol parameters used to compute AVK\nProtocol Version (semver) Useful to achieve backward …\nProtocol Version (semver) Useful to achieve backward …\nDate and time when the certificate was sealed Represents …\nDate and time when the certificate was sealed Represents …\nSet the ancillary verification key to use when verifying …\nThe signed entity type of the message. aka BEACON(p,n)\nThe signed entity type of the message. aka BEACON(p,n)\nMessage that is signed by the signers aka H(MSG(p,n) || …\nMessage that is signed by the signers aka H(MSG(p,n) || …\nThe list of the active signers with their stakes and …\nList of signers with stakes of the Mithril Stake …\nSize of the immutables snapshot file in Bytes\nSize of the immutables snapshot file in Bytes\nGet the client that fetches and downloads Mithril …\nA client to retrieve snapshots data from an Aggregator.\nThe signer stake\nRepresents the list of participants in the Cardano chain …\nSize of the uncompressed Cardano database files.\nSize of the uncompressed Cardano database files.\nThe number of signers that contributed to the certificate …\nTransactions that have been certified\nHashes of the certified transactions\nConvert a set of signer message parts into a set of …\n<code>ToString::to_string</code>, but without panic on OOM.\nThe public key used to authenticate signer signature\nThe encoded signer ‘Mithril verification key’ …\nVerify that all the certified transactions proofs are valid\nSet the AggregatorClient that will be used to request data …\nSet the CertificateVerifier that will be used to validate …\nSet the CertificateVerifierCache that will be used to …\nSet the client type.\nSets the EraFetcher that will be used by the client to …\nSet the FileDownloader that will be used to download …\nSet the ImmutableDigester to be used for the message …\nSet the Logger to use.\nSet the Logger to use.\nSets the options to be used by the client.\nSet the origin tag.\nError source\nHashes of the invalid transactions\nAPI that defines a client for the Aggregator\nError tied with the Aggregator client\nResponsible for HTTP transport and API version check.\nWhat can be read from an AggregatorClient.\nGet a specific Cardano database snapshot from the …\nGet a specific Cardano stake distribution from the …\nGet a specific Cardano stake distribution from the …\nGet a specific Cardano transaction snapshot\nGet a specific certificate from the aggregator\nGet a specific Mithril stake distribution from the …\nGet a specific snapshot from the aggregator\nGet proofs that the given set of Cardano transactions is …\nIncrements the aggregator Cardano database snapshot …\nIncrements the aggregator Cardano database snapshot …\nIncrements the aggregator Cardano database snapshot …\nIncrements the aggregator Cardano database snapshot …\nIncrements the aggregator snapshot download statistics\nLists the aggregator Cardano database snapshots\nLists the aggregator Cardano stake distribution\nLists the aggregator Cardano transaction snapshot\nLists the aggregator certificates\nLists the aggregator Mithril stake distribution\nLists the aggregator snapshots\nError raised when querying the aggregator returned a 4XX …\nError raised when querying the aggregator returned a 5XX …\nGet information about the aggregator status\nHTTP subsystem error\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the request body to send to the aggregator\nGet the content back from the Aggregator\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConstructs a new <code>AggregatorHTTPClient</code>\nPost information to the Aggregator\nGet the request route relative to the aggregator root …\n<code>ToString::to_string</code>, but without panic on OOM.\nDigest of the snapshot to retrieve\nEpoch at the end of which the Cardano stake distribution …\nHash of the certificate to retrieve\nHash of the Mithril stake distribution to retrieve\nHash of the snapshot to retrieve\nHash of the Cardano transaction snapshot to retrieve\nHash of the Cardano stake distribution to retrieve\nNumber of immutable files restored\nSnapshot as HTTP request body\nHashes of the transactions to get proofs for.\nHTTP client for CardanoDatabase API from the Aggregator\nCardano database Verification related errors.\nError related to the immutable files digests computation.\nOptions for downloading and unpacking a Cardano database\nFrom a specific immutable file number (included) to the …\nFrom the first (included) to the last immutable file …\nImmutable file range representation\nError related to the immutable files range.\nError related to the verification of immutable files.\nType containing the lists of immutable files that are …\nError related to the Merkle proof verification.\nFrom a specific immutable file number (included) to …\nFrom the first immutable file number (included) up to a …\nRepresents the verified digests and the Merkle tree built …\nIncrements the aggregator Cardano database snapshot …\nAllow overriding the destination directory\nChecks if immutable directory exists with at least one …\nA map of immutable file names to their corresponding …\nDownload and verify the digests against the certificate.\nDownload and unpack the given Cardano database parts data …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the given Cardano database data by hash\nThe immutables files directory.\nInclude ancillary files in the download\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the length of the immutable file range\nFetch a list of signed CardanoDatabase\nMaximum number of parallel downloads\nThe Merkle tree built from the digests.\nList of missing immutable files.\nConstructs a new <code>CardanoDatabase</code>.\nList of non-verifiable immutable files.\nList of tampered immutable files.\nReturns the range of immutable file numbers\n<code>ToString::to_string</code>, but without panic on OOM.\nVerify if the target directory is writable.\nVerify a local cardano database\nVerify if the download options are compatible with the …\nHTTP client for CardanoStakeDistribution API from the …\nReturns the argument unchanged.\nGet the given Cardano stake distribution data by hash.\nGet the given Cardano stake distribution data by epoch.\nCalls <code>U::from(self)</code>.\nFetch a list of signed CardanoStakeDistribution\nConstructs a new <code>CardanoStakeDistribution</code>.\nHTTP client for CardanoTransactionsAPI from the Aggregator\nReturns the argument unchanged.\nGet proofs that the given subset of transactions is …\nGet the given Cardano transaction snapshot data. If it …\nCalls <code>U::from(self)</code>.\nFetch a list of signed Cardano transaction snapshots.\nConstructs a new <code>CardanoTransactionClient</code>.\nAggregator client for the Certificate\nAPI that defines how to validate certificates.\nAPI that defines how to cache certificates validation …\nA in-memory cache for the certificate verifier.\nImplementation of a CertificateVerifier that can send …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a single certificate full information from the …\nGet the previous hash of the certificate with the given …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn true if the cache is empty\nGet the number of elements in the cache\nFetch a list of certificates\nConstructs a new <code>CertificateClient</code>.\nConstructs a new <code>MithrilCertificateVerifier</code>.\n<code>MemoryCertificateVerifierCache</code> factory\nReset the stored values\nStore a validated certificate hash and its parent hash in …\nValidate the chain starting with the given certificate.\nValidate the chain starting with the certificate with …\nAggregator digest route location.\nLocations of the ancillary files.\nThe message part that represents the locations of the …\nHash of a Cardano Block\nBlockNumber is the block number of a Cardano transaction.\nThe epoch offset used to retrieve the epoch at the end of …\nCardano Database\nThe ProtocolMessage part key associated to the Cardano …\nA point in the Cardano chain at which a Mithril …\nFull Cardano Immutable Files\nThe Cardano Network that is being targeted\nCardano Stake Distribution\nThe ProtocolMessage part key associated to the epoch for …\nThe ProtocolMessage part key associated to the Cardano …\nCardano Transactions\nThe ProtocolMessage part key associated to the Cardano …\nThe Cardano chain point which is used to identify a …\nCloud storage location.\nCloud storage location.\nCloud storage location.\nCompression algorithm for the snapshot archive artifacts.\nThe ProtocolMessage part key associated to the current …\nLocations of the immutable file digests.\nThe message part that represents the locations of the …\nThe epoch offset used for aggregator epoch settings …\nEpoch represents a Cardano epoch\nGzip compression format\nImmutableFileNumber represents the id of immutable files …\nLocations of the immutable files.\nThe message part that represents the locations of the …\nThe ProtocolMessage part key associated to the latest …\nMainnet magic ID\nA Merkle proof\nCardano Network magic identifier\nThe Cardano mainnet network\nMithril stake distribution\nMultiFilesUri represents a unique location uri for …\nThe epoch offset used to retrieve the signers stake …\nThe ProtocolMessage part key associated to the Next epoch …\nThe ProtocolMessage part key associated to the Next epoch …\nPreprod magic ID\nPreview magic ID\nProtocolMessage represents a message that is signed (or …\nThe key of a ProtocolMessage\nProtocol cryptographic parameters\nPythagoras era\nThe epoch offset used to retrieve the epoch at which a …\nThe epoch offset used for signers stake distribution and …\nThe epoch offset used for signers stake distribution and …\nThe epoch offset used to retrieve, given the epoch at …\nThe signed entity type that represents a type of data …\nCardano Slot number\nThe ProtocolMessage part key associated to the Snapshot …\nStakeDistribution represents the stakes of multiple …\nThe era that the software is running or will run\nURI template representing several URI\nTemplateUri represents an URI pattern used to build a file…\nA Cardano test network (preview, preprod or private …\nTransactionHash is the unique identifier of a cardano …\nCatchall for unknown location variants.\nCatchall for unknown location variants.\nCatchall for unknown location variants.\nZstandard compression format\nAverage size for one immutable file.\nThe hex encoded block hash\nThe block number\nDetermines whether unparsable blocks should be allowed …\nComputes the hash of a CardanoDbBeacon\nComputes the hash of the protocol message\nComputes the hash of ProtocolParameters\nCheck if the proof contains the given leaves\nReturn a dummy ChainPoint (test-only).\nReturn a dummy SignedEntityType (test-only).\nReturn a dummy SupportedEra (test-only).\nCardano chain epoch number\nRetrieve the list of supported eras\nExpand the template to a file URI for a specific immutable …\nExpand the template to one file URI\nExpand the template to a list of file URIs\nExtract a template from a list of URIs\nThose ratio will be multiplied by the snapshot size to …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert the proof from bytes\nInstantiates a CardanoNetwork from its code and magic id\nCreate a new signed entity type for a genesis certificate …\nReturn the epoch from the signed entity.\nReturn the epoch at which the signed entity type is signed.\nReturn a JSON serialized value of the internal beacon\nGet the message part associated with a key\nReturn the associated open message timeout\nCheck if there is a gap with another Epoch.\nNumber of the last included immutable files for the digest …\nGet the database value from enum’s instance\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nQuorum parameter\nList the leaves of the proof\nList all the available algorithms.\nLocations of the digests.\nLocations of the immutable files.\nLocations of the ancillary files.\nSecurity parameter (number of lotteries)\nReturns the magic ID of the network\nMap of the messages combined into the digest aka MSG(p,n)\nChainPoint factory\nCardanoDbBeacon factory\nProtocolMessage factory\nProtocolParameters factory\nComputes the next Epoch\nComputes a new Epoch by applying an epoch offset.\nApply the cardano stake distribution snapshot epoch offset …\nApply the epoch settings recording offset to this epoch\nApply the recording offset to this epoch\nApply the next signer retrieval offset to this epoch\nApply the recording offset to this epoch\nApply the retrieval offset to this epoch\nApply the signer signing offset to this epoch\nf in phi(w) = 1 - (1 - f)^w, where w is the stake of a …\nphi_f_fixed is a fixed decimal representation of phi_f …\nComputes the previous Epoch\nReturn a reference to its merkle root.\nReturn the list of locations without the unknown …\nReturn the list of locations without the unknown …\nReturn the list of locations without the unknown …\nSet the message part associated with a key Returns …\nSize of the uncompressed digests file.\nSize of the uncompressed ancillary file.\nThe slot number\nGet the extension associated to tar archive using the …\nConvert the proof to bytes\n<code>ToString::to_string</code>, but without panic on OOM.\n<code>ToString::to_string</code>, but without panic on OOM.\n<code>ToString::to_string</code>, but without panic on OOM.\n<code>ToString::to_string</code>, but without panic on OOM.\n<code>ToString::to_string</code>, but without panic on OOM.\n<code>ToString::to_string</code>, but without panic on OOM.\n<code>ToString::to_string</code>, but without panic on OOM.\n<code>ToString::to_string</code>, but without panic on OOM.\n<code>ToString::to_string</code>, but without panic on OOM.\n<code>ToString::to_string</code>, but without panic on OOM.\nVerification of a Merkle proof\nCompression algorithm of the Cardano database artifacts.\nURI of the cloud storage location.\nCompression algorithm of the Cardano database artifacts.\nURI of the cloud storage location.\nURI of the aggregator digests route location.\nCompression algorithm of the Cardano database artifacts.\nURI of the cloud storage location.\nAn implementation of EraFetcher that retrieves the current …\nTrait for retrieving the current Mithril era.\nWrapper around a raw Mithril era string.\nClient for retrieving the current Mithril era.\nMithril era.\nFetches the current Mithril era.\nFetch the current Mithril era.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConstructs a new MithrilEraClient.\nConstructs a new AggregatorHttpEraFetcher.\nAttempts to convert the internal Mithril era string to a …\nAn ancillary archive file download has completed\nAn ancillary archive file download is in progress\nAn ancillary archive file download has started\nCardano database related events\nThe whole certificate chain is valid.\nA certificate chain validation has started\nAn individual certificate of a chain have been fetched …\nAn individual certificate of a chain have been validated.\nCardano Database download sequence completed\nA digest file download has completed\nA digest file download is in progress\nA digest file download has started\nA receiver of MithrilEvent.\nA sender of MithrilEvent.\nAn immutable archive file download has completed\nAn immutable archive file download is in progress\nAn immutable archive file download has started\nEvent that can be reported by a FeedbackReceiver.\nEvent that can be reported by a FeedbackReceiver for …\nA FeedbackReceiver that writes the event it receives in a …\nA snapshot ancillary download has completed\nA snapshot ancillary download is in progress\nA snapshot ancillary download has started\nA snapshot download has completed\nA snapshot download is in progress\nA snapshot download has started\nA FeedbackReceiver that stacks the events that it receives …\nCardano Database download sequence started\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCallback called by a FeedbackSender when it needs to send …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new SlogFeedbackReceiver.\nCreate a new StackFeedbackReceiver.\nCreate a new FeedbackSender.\nGenerate a random unique identifier to identify a Cardano …\nGenerate a random unique identifier to identify a …\nGenerate a random unique identifier to identify a snapshot …\nSend the given event to the known receivers.\nReturns a copy of the stored stacked events.\n<code>ToString::to_string</code>, but without panic on OOM.\n<code>ToString::to_string</code>, but without panic on OOM.\nUnique identifier used to track this specific certificate …\nUnique identifier used to track this specific certificate …\nUnique identifier used to track this specific certificate …\nUnique identifier used to track this specific certificate …\nThe validated certificate hash\nThe fetched certificate hash\nDigest of the downloaded snapshot\nUnique identifier used to track this specific snapshot …\nUnique identifier used to track this specific snapshot …\nUnique identifier used to track this specific snapshot …\nUnique identifier used to track this specific snapshot …\nUnique identifier used to track this specific snapshot …\nUnique identifier used to track this specific snapshot …\nNumber of bytes that have been downloaded\nNumber of bytes that have been downloaded\nSize of the downloaded archive\nSize of the downloaded archive\nSize of the downloaded archive\nSize of the downloaded archive\nUnique identifier used to track a cardano database download\nUnique identifier used to track a cardano database download\nUnique identifier used to track a cardano database download\nUnique identifier used to track a cardano database download\nUnique identifier used to track a cardano database download\nUnique identifier used to track a cardano database download\nUnique identifier used to track a cardano database download\nUnique identifier used to track a cardano database download\nUnique identifier used to track a cardano database download\nUnique identifier used to track a cardano database download\nUnique identifier used to track a cardano database download\nNumber of bytes that have been downloaded\nNumber of bytes that have been downloaded\nNumber of bytes that have been downloaded\nImmutable file number downloaded\nImmutable file number downloaded\nImmutable file number downloaded\nTotal number of ancillary files\nSize of the downloaded archive\nSize of the downloaded archive\nSize of the downloaded archive\nSize of the downloaded archive\nSize of the downloaded archive\nSize of the downloaded archive\nTotal number of immutable files\nAncillary file download\nDigest file download\nA download event\nPolicy for retrying file downloads.\nA file downloader\nA file downloader URI\nA single file URI\nDatabase download of all immutable files together\nDownload of the ancillary file associated with a full …\nA file downloader that only handles download through HTTP.\nImmutable file download\nRetryDownloader is a wrapper around FileDownloader that …\nGet the URI as a string\nNumber of attempts to download a file.\nBuild a download completed event\nBuild a download started event\nBuild a download started event\nCreate a default retry policy.\nDelay between two attempts.\nGet the unique download identifier\nDownload and unpack (if necessary) a file on the disk.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a policy that never retries.\nConstructs a new <code>HttpFileDownloader</code>.\nCreate a new RetryDownloader.\nDigest of the downloaded snapshot\nUnique download identifier\nUnique download identifier\nUnique download identifier\nUnique download identifier\nUnique download identifier\nImmutable file number\nHTTP client for MithrilStakeDistribution API from the …\nReturns the argument unchanged.\nGet the given stake distribution data. If it cannot be …\nCalls <code>U::from(self)</code>.\nFetch a list of signed MithrilStakeDistribution\nConstructs a new <code>MithrilStakeDistributionClient</code>.\nMissing ancillary verifier\nDownload location does not work\nAggregator client for the snapshot artifact\nError for the Snapshot client\nIncrements the aggregator snapshot download statistics\nDownload and unpack the given immutable files of the …\nDownload and unpack the given snapshot, including its …\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the given snapshot data. If it cannot be found, a None …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn a list of available snapshots\nConstructs a new <code>SnapshotClient</code>.\n<code>ToString::to_string</code>, but without panic on OOM.\ngiven digest\nlist of locations tried")