searchState.loadedDescShard("mithril_common", 0, "Shared datatypes and traits used by Mithril rust projects\nThe type of STM aggregate signature.\nConcatenation proof system.\nContains the error value\nFuture proof system. Not suitable for production.\nMithril aggregator node version header name\nMithril API protocol version header name\nMithril client type of the request\nMithril origin of the request\nMithril signer node version header name\nContains the success value\nGeneric error type\nGeneric result type\nAPI Version provider service\nCompare a directory against a string representing its …\nAssert that two iterators are equivalent\nCompare two json strings ignoring keys order\nTools to retrieve, validate the Certificate Chain created …\nTools and types to abstract the use of the Mithril STM …\nReturns the name of the function that called this macro.\nReturns the path of the function that called this macro.\nCreates a test-specific <code>TestLogger</code> struct that can creates …\nThe entities used by, and exchanged between, the …\nMacro used to mark the code that should be cleaned up when …\nReturns the argument unchanged.\nCreate an aggregate signature type from a prefix byte.\nThe prefix byte used in the byte representation of the …\nCalls <code>U::from(self)</code>.\nLogging utilities for the Mithril project.\nMessages module This module aims at providing shared …\nProtocol module\nThe module used for building signables\nReturn a temporary directory based on the current function …\nCreate and return a temporary directory based on the …\nTest utilities\nAPI Version provider\nTrait to get the discriminant that identifies the …\nOpen API file name\nCompute all the sorted list of all versions\nCompute the current api version\nCompute the current api version requirement\nReturns the argument unchanged.\nGet the discriminant that identifies the alternate <code>openapi</code> …\nBuild Open API versions mapping\nCalls <code>U::from(self)</code>.\nVersion provider factory\nError raised when validating the certificate chain if the …\nError raised when validating the certificate chain if the …\nError raised when validating the certificate chain if the …\nError raised when validating the certificate chain if a …\nError raised when validating the certificate chain if the …\nError raised when validating the certificate chain if the …\nError raised when the Genesis Signature stored in a …\nCertificateGenesisProducer is in charge of producing a …\nError raised when the hash stored in a Certificate doesn’…\nError raised when validating the certificate chain if the …\nCertificateRetriever is in charge of retrieving a …\nCertificateRetriever related errors.\nCertificateVerifier is the cryptographic engine in charge …\nCertificateVerifier related errors.\nError raised when …\nError raised when …\nMithrilCertificateVerifier is an implementation of the …\nError raised when the multi signatures verification fails.\nCreate a Genesis Certificate\nCreate the Genesis protocol message\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet Certificate details\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMithrilCertificateVerifier factory\nCertificateGenesisProducer factory\nSign the Genesis protocol message (test only)\nVerify if a Certificate is valid and returns the previous …\nVerify a certificate\nVerify that the Certificate Chain associated to a …\nVerify that the Certificate Chain associated to a …\nVerify Genesis certificate\nVerify Standard certificate\nAlias for a byte\nError raised when the encoding or decoding fails\nError raised when a core registration error occurs\nError raised when a core registration error occurs\nThe description of the Cardano key\nA cryptographic signer that is responsible for signing the …\nAn era markers verifier that checks the authenticity of …\nEraMarkersSigner and EraMarkersVerifier related errors.\nEra markers verifier secret key\nEra markers verifier signature\nEra markers verifier verification key\nPeriod of key file does not match with period provided by …\nPeriod of key file does not match with period provided by …\nThe KES period that is used to check if the KES keys is …\nError raised when a KES Period is needed but not provided\nError raised when a KES Period is needed but not provided\nError raised when a KES Signature verification fails\nError raised when a KES Signature verification fails\nError raised when a KES Signature is needed but not …\nError raised when a KES Signature is needed but not …\nTrait for KES (Key Evolving Signature) signing operation.\nStandard KES Signer implementation which uses a KES secret …\nError raised when a KES update error occurs\nError raised when a KES update error occurs\nTrait for KES (Key Evolving Signature) verification …\nA standard KES signature verifier.\nKES verification error\nA map, where the keys and values are merkelized and …\nThe trait implemented by the keys of a MKMap\nA merkelized map node that is used to represent multi …\nA MKMapProof that proves membership of an entry in the …\nThe trait implemented by the values of a MKMap\nA Merkle proof\nA Merkle tree\nThe Merkle tree leaves indexer trait\nAlias for a Merkle tree leaf position\nA node of a Merkle tree\nA Merkle tree store in memory\nThe Merkle tree storer trait\nManifest signature\nA cryptographic signer that is responsible for signing the …\nA manifest verifier that checks the authenticity of a …\nManifestSigner and ManifestVerifier related errors.\nManifest verifier secret key\nManifest verifier verification key\nA Merkle map\nNot enough signatures were collected, got this many …\nParsed Operational Certificate\nError raised when an operational certificate is invalid\nError raised when an operational certificate is invalid\nError raised when an operational certificate is invalid\nError raised when the operational certificate is missing\nError raised when the operational certificate is missing\nParsed Operational Certificate without cold verification …\nThe current protocol version\nError raised when a party id is needed but not provided\nError raised when a party id is needed but not provided\nError raised when a party id is not available in the …\nError raised when a party id is not available in the …\nError raised when a pool address encoding fails\nError raised when a pool address encoding fails\nWrapper of MithrilStm:AggregateVerificationKey.\nAlias of MithrilStm:AggregationError.\nAlias of MithrilStm:Clerk.\nAlias of a wrapper of MithrilStm:ClosedKeyRegistration.\nProtocolGenesisSigner and ProtocolGenesisVerifier related …\nA protocol Genesis verifier secret key\nA protocol Genesis signature\nA protocol Genesis Signer that is responsible for signing …\nA protocol Genesis verification key\nA protocol Genesis Verifier that is responsible for …\nAlias of a wrapper of MithrilStm:Initializer.\nError raised when the underlying protocol initializer fails\nError raised when the underlying protocol initializer fails\nAlias of a wrapper of …\nNew initializer error\nA ProtocolKey is a wrapped that add Serialization …\nThe codec used to serialize/deserialize a ProtocolKey.\nAlias of a wrapper of MithrilStm:KeyRegistration.\nAlias of MithrilStm::Index.\nWrapper of MKProof to add serialization utilities.\nWrapper of MithrilStm:AggregateSignature to add …\nWrapper of OpCert to add serialization utilities.\nAlias of MithrilStm::Parameters.\nThe id of a mithril party.\nAlias of a wrapper of …\nNew registration error\nAlias of MithrilStm:Signer.\nWrapper of MithrilStm:VerificationKeyProofOfPossession to …\nWrapper of KES:Sum6KesSig to add serialization utilities.\nWrapper of MithrilStm:SingleSignature to add serialization …\nAlias of MithrilStm:Stake.\nA list of Party Id associated with its Stake.\nA protocol version\nTrait that allows any structure that implements Serialize …\nError raised when a KES Signature verification fails\nWe need to create this struct because the design of …\nThe type of Cardano key\nA full Merkle tree\nA Merkle tree node\nTraits for deserializing from bytes\nTraits for serializing to bytes\nThe proof system used in the aggregate signature is not …\nThis error happens when we try to convert a u64 to a usize …\nAppend elements at the given position\nAppend leaves to the Merkle tree\nTry to create a new instance of the storer\nCan the merkelized map value compute a proof\nCompress the merkelized map\nCompute the hash of an OpCert\nCompute the proof for a set of values of the merkelized map\nGet the proof for a set of values of the merkelized map …\nGenerate Merkle proof of memberships in the tree\nCompute protocol party id as pool id bech 32\nCompute protocol party id as hash\nGet the root of the merkelized map value\nGet the root of the merkle tree of the merkelized map\nGenerate root of the Merkle tree\nGet the root of the merkelized map proof\nCheck if the merkelized map value contains a leaf\nCheck if the merkelized map contains a leaf (and returns …\nCheck if the Merkle tree contains the given leaf\nCheck if the merkelized map proof contains a leaf\nCheck if the proof contains the given leaves\nCheck if the Merkle tree contains the given leaf\nCheck if the Merkle tree contains the given leaf\nDo the decoding of the given key\nDo the decoding of the given key\nEd25519 cryptographic helpers\nEncode to bech32 given Human Readable Part (hrp) and data\nDo the encoding of the given key\nDo the encoding of the given key\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert the proof from bytes\nConvert the proof from bytes\nCreate an instance from bytes\nCreate an instance from a bytes hex representation\nDeserialize a type <code>T: Serialize + DeserializeOwned</code> from …\nDeserialize a type <code>T: Serialize + DeserializeOwned</code> from …\nDeserialize a type <code>T: Serialize + DeserializeOwned</code> from …\nDeserialize a type <code>T: Serialize + DeserializeOwned</code> from …\nDeserialize a type <code>T: Serialize + DeserializeOwned</code> from …\nDeserialize a type <code>T: Serialize + DeserializeOwned</code> from …\nDeserialize a Cardano key from file. Cardano KES key …\nCreate a MKTreeNode from a hex representation\nCreate an instance from a JSON hex representation\nGet the value of the merkelized map for a given key\nGet the certificate signature\nGet the cold verification key\nGet the element at the given position\nGet the issue number\nGet the KES verification key\nGet the position of the leaf in the Merkle tree\nGet the OpCert without cold verification key\nGet the start KES period\nInsert a new key-value pair Important: keys must be …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsume self and return the inner key\nCheck if the merkelized map is empty\nGet an iterator for the key and values of the merkelized …\nQuorum parameter.\nDecode key from hex helper\nEncode key to hex helper\nCreate a bytes hex representation of the given key\nCreate a JSON hash representation of the given key\nList of leaves with their positions in the Merkle tree\nList of leaves with their positions in the Merkle tree\nList the leaves of the merkelized map proof\nList the leaves of the proof\nGet the length of the merkelized map\nSecurity parameter, upper bound on indices.\nUnique public key out of the key registration instance.\nCreate a new instance of <code>StandardKesSigner</code>.\nMKMap factory\nMKTree factory\nOpCert factory / test only\nCodecError factory.\nMKMapProof factory\nMKTreeNode factory\nCreate a ProtocolKey from the given key\nMKMap factory\n<code>f</code> in phi(w) = 1 - (1 - f)^w, where w is the stake of a …\nRead from file in JSON hex format\nOrdered list of registered parties.\nReplace the value of an existing key\nReturn a reference to its merkle root.\nGet the position of the leaf in the Merkle tree\nReturn signed bytes with the KES secret key and the …\nKES period at which KES key is initalized\nConvert the proof to bytes\nConvert the proof to bytes\nTry to convert to hex bytes representation\nTry to convert to hex bytes representation\nCreate a bytes hex representation of the key\nTry to convert to a bytes vector.\nSerialize the structure to a CBOR bytes representation.\nSerialize the structure to a CBOR bytes representation.\nSerialize the structure to a CBOR hex representation.\nSerialize the structure to a CBOR hex representation.\nSerialize a type <code>T: Serialize + DeserializeOwned</code> to file …\nSerialize a type <code>T: Serialize + DeserializeOwned</code> to file …\nCreate a hex representation of the MKTreeNode\nCreate a JSON hex representation of the key\nNumber of leaves in the Merkle tree\nNumber of leaves in the Merkle tree\nTotal stake of the registered parties.\nTry to convert from a bytes slice.\nTry to convert from hex string encoded bytes.\nTry to convert from hex string encoded bytes.\nValidate a certificate\nVerify the signed message and return the original message.\nVerify the signed message and return the original message.\nVerify the merkelized map proof\nVerification of a Merkle proof\nVerifies the signature of a message\nWrite to file in JSON hex format\nWrapper of Ed25519:SigningKey.\nWrapper of Ed25519:Signature.\nA cryptographic signer that is responsible for signing …\nWrapper of Ed25519:PublicKey.\nEd25519 verifier that checks the authenticity of Ed25519 …\nEd25519Signer and Ed25519Verifier related errors.\nEd25519Signer deterministic\nEd25519Signer non deterministic\nEd25519Signer factory\nCreate a Ed25519Verifier\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nEd25519Signer from Ed25519SecretKey\nEd25519Verifier from Ed25519VerificationKey\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet the Ed25519SecretKey\nSigns a message and returns a Ed25519Signature\nEd25519Verifier to Ed25519VerificationKey\nGet the Ed25519VerificationKey\nVerifies the signature of a message\nVerifies the signature of a message\nAggregator digest route location.\nLocations of the ancillary files.\nAncillary locations of the Cardano database related files.\nThe signer that emitted the signature is authenticated\nHash of a Cardano Block\nBlockNumber is the block number of a Cardano transaction.\nBlockRange for the Cardano chain\nBlockRangeLength is the length of a block range.\nA continuous iterable sequence of block ranges.\nThe epoch offset used to retrieve the epoch at the end of …\nCardano Database\nCardano Database\nThe ProtocolMessage part key associated to the Cardano …\nCardano database snapshot.\nStructure holding artifacts data needed to create a …\nA point in the Cardano chain at which a Mithril …\nCardano Era\nFull Cardano Immutable Files\nFull Cardano Immutable Files\nThe Cardano Network that is being targeted\nCardano Stake Distribution\nCardano Stake Distribution\nCardano Stake Distribution\nThe ProtocolMessage part key associated to the epoch for …\nThe ProtocolMessage part key associated to the Cardano …\nCardano transaction representation\nCardano Transactions\nCardano Transactions\nThe ProtocolMessage part key associated to the Cardano …\nA cryptographic proof of a set of Cardano transactions is …\nConfiguration for the signing of Cardano transactions\nSnapshot of a set of Cardano transactions\nCertificate represents a Mithril certificate embedding a …\nCertificateMetadata represents the metadata associated to …\nThe signature of a Certificate\nThe Cardano chain point which is used to identify a …\nRepresentation of a Client Error raised by an http server\nCloud storage location.\nCloud storage location.\nCloud storage location.\nCompression algorithm for the snapshot archive artifacts.\nAn iterator over the variants of CompressionAlgorithm\nThe ProtocolMessage part key associated to the current …\nDefault allowed discriminants\nLocations of the immutable file digests.\nDigests locations of the Cardano database related files.\nThe epoch offset used for aggregator epoch settings …\nEpoch represents a Cardano epoch\nEpochError is an error triggered by an Epoch\nError raised when the computation of an epoch using an …\nFileUri represents a file URI used to identify the file’…\nGenesis signature created from the original stake …\nGzip compression format\nHex encoded Aggregate Verification Key\nHex encoded Sha256 Digest\nHex encoded Era Markers Secret Key\nHex encoded Genesis Secret Key\nHex encoded Genesis Verification Key\nHex encoded key\nHex encoded key slice\nHex encoded Operational Certificate\nHex encoded Single Signature\nHex encoded Verification Key\nHex encoded Verification Key Signature\nImmutableFileName represents the filename, with extension, …\nImmutableFileNumber represents the id of immutable files …\nLocations of the immutable files.\nImmutables locations of the Cardano database related files.\nThe length of the block range Important: this value should …\nThe ProtocolMessage part key associated to the latest …\nLotteryIndex represents the index of a Mithril single …\nMainnet magic ID\nCardano Network magic identifier\nThe Cardano mainnet network\nMithril Stake Distribution\nMithril stake distribution\nMithril stake distribution\nMultiFilesUri represents a unique location uri for …\nSTM multi signature created from a quorum of single …\nThe epoch offset used to retrieve the signers stake …\nThe ProtocolMessage part key associated to the Next epoch …\nThe ProtocolMessage part key associated to the Next epoch …\nPreprod magic ID\nPreview magic ID\nPartyId represents a signing party in Mithril protocol\nProtocolMessage represents a message that is signed (or …\nThe key of a ProtocolMessage\nThe value of a ProtocolMessage\nProtocol cryptographic parameters\nProtocol version\nPythagoras era\nThe epoch offset used to retrieve the epoch at which a …\nThe epoch offset used for signers stake distribution and …\nThe epoch offset used for signers stake distribution and …\nThe epoch offset used to retrieve, given the epoch at …\nRepresentation of a Server Error raised by a http server\nStores a map of files and their hashes, with an optional …\nConvert TimePoint to SignedEntityType and list allowed …\nThe signed entity type that represents a type of data …\nThe discriminants of the SignedEntityType enum.\nAn iterator over the variants of …\nSigner represents a signing participant in the network\nSigner represents a signing party in the network …\nSingleSignatures represent single signatures originating …\nStatus of the authentication of the signer that emitted …\nCardano Slot number\nSnapshot represents a snapshot file and its metadata\nThe ProtocolMessage part key associated to the Snapshot …\nStake represents the stakes of a participant in the …\nStakeDistribution represents the stakes of multiple …\nThis represents a stakeholder.\nThe era that the software is running or will run\nAn iterator over the variants of SupportedEra\nURI template representing several URI\nTemplateUri represents an URI pattern used to build a file…\nA Cardano test network (preview, preprod or private …\nTimePoint aggregates all types of point in the Cardano …\nNumber of SPOs\nTransactionHash is the unique identifier of a cardano …\nThe signer that emitted the signature is not authenticated\nCatchall for unknown location variants.\nCatchall for unknown location variants.\nCatchall for unknown location variants.\nZstandard compression format\nAggregate verification key The AVK used to sign during the …\nGet all the discriminants\nGet all BlockRange strictly contained in the given interval\nList of discriminants that the node is allowed to sign\nLocations of the Cardano database ancillary.\nLocations of the Cardano database ancillary.\nLocations where the snapshot of the ancillary files can be …\nSize of the ancillary files in Bytes\nAppend to the given list of allowed signed entity types …\nStatus of the authentication of the signer that emitted …\nAverage size for one immutable file.\nMithril beacon on the Cardano chain.\nMithril beacon on the Cardano chain\nThe hex encoded block hash\nBlock hash of the transaction\nThe block number\nBlock number of the transaction\nBeacon of the Cardano transactions set\nVersion of the Cardano node used to create the snapshot.\nVersion of the Cardano node used to create snapshot …\nCardano transactions signing configuration\nChain point\nCompression algorithm of the snapshot archive\nDetermines whether unparsable blocks should be allowed …\nCompute the block number to be signed based on the chain …\nComputes the hash of a CardanoDbBeacon\nComputes the hash of a Certificate\nAs a sub structure of certificate, Party must be hashable.\nComputes the hash of the certificate metadata\nComputes the hash of the protocol message\nComputes the hash of ProtocolParameters\nComputes the hash of Signer\nComputes the hash of SignerWithStake\nReturns <code>true</code> if range is contained in the sequence.\nThe data stored in the manifest\nDigest that is signed by the signer participants\nLocations of the Cardano database digests.\nLocations of the Cardano database digests.\nReturn a dummy ChainPoint (test-only).\nReturn a dummy CardanoTransactionsSetProof (test-only).\nReturn a dummy SignedEntityConfig (test-only).\nReturn a dummy CardanoTransactionsSigningConfig …\nReturn a dummy SignedEntityType (test-only).\nReturn a dummy SupportedEra (test-only).\nReturn a dummy TimePoint (test-only).\nReturns the end of the block ranges sequence.\nCardano chain epoch number\nEpoch at which the Cardano Stake Distribution is computed\nCardano chain epoch number\nEpoch at which the Mithril Stake Distribution is created\nCardano chain epoch number\nRetrieve the list of supported eras\nExpand the template to a file URI for a specific immutable …\nExpand the template to one file URI\nExpand the template to a list of file URIs\nExtract a template from a list of URIs\nThose ratio will be multiplied by the snapshot size to …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a BlockRange from a block number\nInstantiates a CardanoNetwork from its code and magic id\nGet the discriminant associated with the given id\nTurn a Signer into a SignerWithStake.\nTransform a list of signers into a list of `…\nCreate a new signed entity type for a genesis certificate …\nReturn the epoch from the signed entity.\nReturn the epoch at which the signed entity type is signed.\nReturn a JSON serialized value of the internal beacon\nGet the message part associated with a key\nReturn the associated open message timeout\nDeduce the stake distribution from the metadata signers\nCheck if there is a gap with another Epoch.\nUnique hash of the Cardano database snapshot.\nUnique hash of the Cardano Stake Distribution\nHash of the Cardano transactions set\nHash of the current certificate Computed from the other …\nHash of the Mithril Stake Distribution (different from the …\nNumber of the last included immutable files for the digest …\nNumber of the last immutable files used for the digest …\nLocations of the Cardano database immutables.\nLocations of the Cardano database immutables.\nGet the database value from enum’s instance\nGet the database value from enum’s instance\nDate and time when the certificate was initiated …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsume <code>self</code> into a new Vec\nCheck that the signer that emitted the signature is …\nReturn true if the certificate is chaining into itself …\nReturns <code>true</code> if the block ranges sequence contains no …\nTell if the certificate is a genesis certificate\nQuorum parameter\nThe kes period used to compute the verification key …\nThe kes period used to compute the verification key …\nerror label\nList all the available algorithms.\nCreate the deduplicated list of allowed signed entity …\nCreate the deduplicated list of allowed signed entity …\nLocations of the immutable files digests.\nLocations of the immutable files.\nLocations of the ancillary files.\nLocations where the snapshot of the immutable files can be …\nSecurity parameter (number of lotteries)\nReturns the magic ID of the network\nCheck that the certificate signed message match the given …\nReturn the hex encoded merkle root of this proof\nMerkle root of the Cardano database snapshot.\nMerkle root of the Cardano transactions set\nerror message\nerror message\nMap of the messages combined into the digest aka MSG(p,n)\nCertificate metadata aka METADATA(p,n)\nCardano network.\nCardano network\nCardano network\nBuild the BlockRangesSequence strictly contained in the …\nChainPoint factory\nCardanoDatabaseSnapshot factory\nCardanoDbBeacon factory\nConstructor\nCardanoTransaction factory\nCardanoTransactionsSetProof factory\nCreates a new CardanoTransactionsSnapshot\nCertificate factory\nCertificateMetadata factory\nInternalServerError factory\nClientError factory\nMithrilStakeDistribution artifact factory\nProtocolMessage factory\nProtocolParameters factory\nSigner factory\nSignerWithStake factory\n<code>SingleSignatures</code> factory\nTimePoint factory\nComputes the next Epoch\nComputes a new Epoch by applying an epoch offset.\nApply the cardano stake distribution snapshot epoch offset …\nApply the epoch settings recording offset to this epoch\nApply the recording offset to this epoch\nApply the next signer retrieval offset to this epoch\nApply the recording offset to this epoch\nApply the retrieval offset to this epoch\nApply the signer signing offset to this epoch\nThe encoded operational certificate of stake pool operator …\nThe encoded operational certificate of stake pool operator …\nParse the deduplicated list of signed entity types …\nParty identifier as in the stake distribution\nThe unique identifier of the signer\nThe unique identifier of the signer\nThe unique identifier of the signer\nf in phi(w) = 1 - (1 - f)^w, where w is the stake of a …\nphi_f_fixed is a fixed decimal representation of phi_f …\nComputes the previous Epoch\nHash of the previous certificate in the chain This is …\nStructured message that is used to create the signed …\nProtocol parameters part of METADATA(p,n)\nProtocol parameters used to sign this stake distribution\nProtocol Version (semver) Useful to achieve backward …\nDate and time when the certificate was sealed Represents …\nNumber of blocks to discard from the tip of the chain when …\nSet the message part associated with a key Returns …\nCertificate signature\nThe signature of the manifest\nThe single signature of the digest\nGet the certificate signed entity type.\nMessage that is signed by the signers aka H(MSG(p,n) || …\nThe list of the active signers with their stakes and …\nList of signers with stakes of the Mithril Stake …\nSize of the immutables snapshot file in Bytes\nSize of the uncompressed digests file.\nSize of the uncompressed ancillary file.\nThe slot number\nSlot number of the transaction\nAmount of stake owned by the party.\nThe signer stake\nStakeDistribution represents the list of participants in …\nGet the start of the block range that contains the given …\nReturns the start of the block ranges sequence.\nThe number of blocks between signature of the transactions.\nGet the extension associated to tar archive using the …\nConvert this time point to a signed entity type based on …\nConvert this SingleSignature to its corresponding …\nSize of the uncompressed Cardano database files.\nSize of the uncompressed Cardano database files.\nUnique hash of the transaction\nGet the hashes of the transactions certified by this proof\nConvert the given values to a vec of signers.\nThe public key used to authenticate signer signature\nThe public key used to authenticate signer signature\nThe encoded signer ‘Mithril verification key’ …\nThe encoded signer ‘Mithril verification key’ …\nVerify that transactions set proof is valid\nThe indexes of the won lotteries that lead to the single …\nCompression algorithm of the Cardano database artifacts.\nURI of the cloud storage location.\nCompression algorithm of the Cardano database artifacts.\nURI of the cloud storage location.\nURI of the aggregator digests route location.\nCompression algorithm of the Cardano database artifacts.\nURI of the cloud storage location.\nExtension trait for <code>slog::Logger</code>\nCreate a new child logger with a <code>src</code> key containing the …\nCreate a new child logger with a <code>src</code> key containing the …\nCapabilities of an Aggregator\nMessage advertised by an Aggregator to inform about its …\nMessage advertised by an aggregator to inform about its …\nThe message part that represents the locations of the …\nMessage structure of a Cardano database digest list item\nMessage structure of a Cardano database digests list\nMessage structure of an immutable files restoration\nMessage structure of a Cardano database snapshot list item\nMessage structure of a Cardano database snapshot list\nCardano database snapshot.\nMessage structure of a Cardano Stake Distribution list item\nMessage structure of a Cardano Stake Distribution list\nMessage structure of a Cardano Stake Distribution\nMessage structure of a Cardano Transactions Snapshot list …\nMessage structure of a Cardano Transactions Snapshots list\nMessage structure of a Cardano Transactions snapshot\nA cryptographic proof for a set of Cardano transactions\nCardano transactions prover capabilities\nA cryptographic proof of a set of Cardano transactions is …\nMessage structure of a certificate list item\nCertificateListItemMessage represents the metadata …\nMessage structure of a certificate list\nMessage structure of a certificate\nCertificateMetadata represents the metadata associated to …\nThe message part that represents the locations of the …\nEpochSettings represents the settings of an epoch\nFrom message adapter trait\nThe message part that represents the locations of the …\nThe verification of an individual …\nAn individual CardanoTransactionsSetProofMessagePart could …\nMessage structure of a Mithril Stake Distribution list item\nMessage structure of a Mithril Stake Distribution list\nMessage structure of a Mithril Stake Distribution\nNo certified transactions set proof to verify\nNot all certified transactions set proof have the same …\nMessage structure to register single signature through the …\nMessage structure to register single signature through …\nRegister Signer Message\nSigner Message\nSigner with Stake Message\nMessage structure of a snapshot\nMessage structure of a snapshot list item\nMessage structure of a snapshot list\nMessage structure of a snapshot\nTo message adapter trait\nTryFrom message adapter trait\nTryTo message adapter trait\nSet of transactions verified by …\nError encountered or produced by the cardano transaction …\nAdapt entity to message\nAdapt message to entity\nAggregate signature type used by the aggregator\nAggregate verification key The AVK used to sign during the …\nAggregate verification key The AVK used to sign during the …\nAggregator node version\nLocations of the ancillary files.\nLocations where the snapshot of the ancillary files can be …\nLocations where the snapshot of the ancillary files can be …\nLocations where the snapshot of the ancillary files can be …\nSize of the ancillary files in Bytes\nSize of the ancillary files in Bytes\nSize of the ancillary files in Bytes\nAverage size for one immutable file.\nMithril beacon on the Cardano chain.\nMithril beacon on the Cardano chain\nMithril beacon on the Cardano chain\nMithril beacon on the Cardano chain\nMithril beacon on the Cardano chain\nBlock number of the Cardano transactions snapshot\nBlock number of the Cardano transactions snapshot\nCapabilities of the Aggregator\nCurrent Cardano era\nCardano network\nCardano node version\nVersion of the Cardano node used to create the snapshot.\nVersion of the Cardano node used to create the snapshot.\nCardano node version\nCardano node version\nCardano node version\nCardano transactions prover capabilities\nCardano transactions signing configuration for the current …\nHash of the certificate that signs this struct Merkle root.\nHash of the associated certificate\nHash of the associated certificate\nHash of the associated certificate\nHash of the associated certificate\nHash of the associated certificate\nHash of the associated certificate\nHash of the certificate that validate this proof merkle …\nHash of the associated certificate\nHash of the associated certificate\nHash of the associated certificate\nHash of the associated certificate\nHashes of the certified transactions\nTransactions that have been certified\nCompression algorithm of the snapshot archive\nCompression algorithm of the snapshot archive\nCompression algorithm of the snapshot archive\nCompute the total size of the snapshot including ancillary …\nDate and time at which the snapshot was created\nDate and time at which the snapshot was created\nDateTime of creation\nDate and time at which the Cardano Stake Distribution was …\nDateTime of creation\nDateTime of creation\nDateTime of creation\nDate and time at which the Mithril Stake Distribution was …\nDate and time at which the snapshot was created\nDate and time at which the snapshot was created\nCurrent Signers\nDigest of an immutable file\nDigest that is signed by the signer participants\nDigest that is signed by the signer participants\nDigest that is signed by the signer participants\nLocations of the the immutable file digests.\nURL of the documentation\nReturn a dummy AggregatorFeaturesMessage (test-only).\nReturn a dummy CardanoDatabaseSnapshotMessage (test-only).\nReturn a dummy CardanoDatabaseDigestListItemMessage …\nReturn a dummy CardanoDatabaseImmutableFilesRestoredMessage…\nReturn a dummy CardanoDatabaseSnapshotListItemMessage …\nReturn a dummy CardanoStakeDistributionMessage (test-only).\nReturn a dummy CardanoStakeDistributionListItemMessage …\nReturn a dummy CertificateMessage (test-only).\nReturn a dummy CertificateMessage (test-only).\nReturn a dummy CertificateMessage (test-only).\nReturn a dummy CertificateListItemMessage (test-only).\nReturn a dummy EpochSettingsMessage (test-only).\nReturn a dummy CardanoTransactionsSetProofMessagePart …\nReturn a dummy CertificateMetadataMessagePart (test-only).\nReturn a dummy SignerWithStakeMessagePart (test-only).\nReturn a dummy SignerMessagePart (test-only).\nReturn a dummy MithrilStakeDistributionMessage (test-only).\nReturn a dummy MithrilStakeDistributionListItemMessage …\nReturn a dummy RegisterSignatureMessageHttp (test-only).\nReturn a dummy RegisterSignatureMessageDmq (test-only).\nReturn a dummy RegisterSignerMessage (test-only).\nReturn a dummy SnapshotMessage (test-only).\nReturn a dummy SnapshotDownloadMessage (test-only).\nReturn a dummy SnapshotListItemMessage (test-only).\nCurrent epoch\nEpoch at the end of which the Cardano stake distribution …\nEpoch at the end of which the Cardano stake distribution …\nEpoch of the Cardano transactions snapshot\nEpoch of the Cardano transactions snapshot\nEpoch of the Cardano chain\nEpoch of the Cardano chain\nCurrent Epoch\nEpoch at which the Mithril Stake Distribution is created\nEpoch at which the Mithril Stake Distribution is created\nEpoch at which registration is sent\nFill the given ProtocolMessage with the data associated …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert a set of signers into message parts\nConvert a set of signers into message parts\nGenesis signature created from the original stake …\nHash of the Cardano database snapshot.\nHash of the Cardano database snapshot.\nHash of the Cardano Stake Distribution\nHash of the Cardano Stake Distribution\nHash of the Cardano Transactions snapshot\nHash of the Cardano Transactions snapshot\nHash of the current certificate Computed from the other …\nHash of the current certificate Computed from the other …\nHash of the Mithril Stake Distribution (different from the …\nHash of the Mithril Stake Distribution (different from the …\nImmutable file name\nLocations of the immutable files.\nDate and time when the certificate was initiated …\nDate and time when the certificate was initiated …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe KES period used to compute the verification key …\nThe KES period used to compute the verification key …\nThe KES period used to compute the verification key …\nLatest block number that has been certified\nLocations of the digests.\nLocations of the immutable files.\nLocations of the ancillary files.\nLocations where the snapshot of the immutable files can be …\nLocations where the snapshot of the immutable files can be …\nLocations where the snapshot of the immutable files can be …\nCheck that the certificate signed message match the given …\nMaximum number of hashes allowed for a single request\nMerkle root of the Cardano database snapshot.\nMerkle root of the Cardano database snapshot\nMerkle root of the Cardano transactions snapshot\nMerkle root of the Cardano transactions snapshot\nCertificate metadata aka METADATA(p,n)\nCertificate metadata aka METADATA(p,n)\nCurrent Mithril era\nSTM multi signature created from a quorum of single …\nNumber of immutable files restored.\nCardano network\nCardano network part of METADATA(p,n)\nCardano network part of METADATA(p,n)\nCardano network\nCardano network\nCardano network\nCreate a new <code>CardanoTransactionsProofsMessage</code>\nNext Protocol parameters\nSigners that will be able to sign on the next epoch\nTransactions that could not be certified\nVersion of the OpenAPI specification\nThe encoded operational certificate of stake pool operator …\nThe encoded operational certificate of stake pool operator …\nThe encoded operational certificate of stake pool operator …\nThe unique identifier of the signer\nThe unique identifier of the signer\nThe unique identifier of the signer\nThe unique identifier of the signer\nHash of the previous certificate in the chain This is …\nHash of the previous certificate in the chain This is …\nProof of the transactions\nStructured message that is used to create the signed …\nStructured message that is used to create the signed …\nCurrent Protocol parameters\nProtocol parameters part of METADATA(p,n)\nProtocol parameters part of METADATA(p,n)\nProtocol parameters used to compute AVK\nProtocol Version (semver) Useful to achieve backward …\nProtocol Version (semver) Useful to achieve backward …\nReturn the list of locations without the unknown …\nReturn the list of locations without the unknown …\nReturn the list of locations without the unknown …\nDate and time when the certificate was sealed Represents …\nDate and time when the certificate was sealed Represents …\nThe single signature of the digest\nThe single signature.\nThe signed entity type of the message. aka BEACON(p,n)\nThe signed entity type of the message. aka BEACON(p,n)\nSigned entity type\nSigned entity type\nSigned entity types that are signed by the aggregator\nMessage that is signed by the signers aka H(MSG(p,n) || …\nMessage that is signed by the signers aka H(MSG(p,n) || …\nMessage that is signed by the signer\nSigner Registration Protocol parameters\nThe list of the active signers with their stakes and …\nList of signers with stakes of the Mithril Stake …\nSize of the immutables snapshot file in Bytes\nSize of the immutables snapshot file in Bytes\nSize of the immutables snapshot file in Bytes\nSize of the uncompressed digests file.\nSize of the uncompressed ancillary file.\nThe signer stake\nRepresents the list of participants in the Cardano chain …\nThe number of Cardano SPOs\nThe total stake in Cardano\nSize of the uncompressed Cardano database files.\nSize of the uncompressed Cardano database files.\nThe number of signers that will be able to sign on the …\nThe total stakes of the signers that will be able to sign …\nThe number of signers for the current epoch\nThe number of signers that contributed to the certificate …\nThe total stakes of the signers for the current epoch\nTransactions that have been certified\nHashes of the certified transactions\nAdapt entity to message\nAdapt message to entity\nExtract a <code>RegisterSignatureMessageDmq</code> from bytes.\nConvert a set of signer message parts into a set of …\nConvert a set of signer message parts into a set of signers\nConvert a <code>RegisterSignatureMessageDmq</code> into bytes\nThe public key used to authenticate signer signature\nThe public key used to authenticate signer signature\nThe public key used to authenticate signer signature\nThe encoded signer ‘Mithril verification key’ …\nThe encoded signer ‘Mithril verification key’ …\nThe encoded signer ‘Mithril verification key’ …\nVerify that all the certified transactions proofs are valid\nThe indexes of the won lotteries that lead to the single …\nError source\nHashes of the invalid transactions\nError raised when the list of signers given to the builder …\nMultiSigner is the cryptographic engine in charge of …\nAllow to build Single Or Multi signers to generate a …\nSignerBuilder specific errors\nThe SingleSigner is the structure responsible for issuing …\nTrait to convert a type to a message that can be signed or …\nAggregate the given single signatures into a …\nBuild a MultiSigner based on the registered parties\nBuild deterministic SingleSigner and ProtocolInitializer …\nCompute aggregate verification key from stake distribution\nCompute aggregate verification key from stake distribution\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturn the partyId associated with this Signer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSignerBuilder constructor.\nRestore a SingleSigner based on the registered parties and …\nIssue a single signature for the given message.\nReturn a String representation of the message.\nVerify a single signature\nArtifact is a trait for types that represent signed …\nBeacon trait\nBlock Range Merkle roots retriever\nA CardanoStakeDistributionSignableBuilder builder\nA CardanoTransactionsSignableBuilder builder\nMithril Signable Builder Service\nA MithrilStakeDistributionSignableBuilder builder\nSignableBuilder is a trait for building a protocol message …\nArtifactBuilder Service trait\nSignableBuilders dependencies required by the …\nSignableSeedBuilder is a trait for building seed protocol …\nAggregate for signed entity\nStake Distribution Retriever\nCardano transactions importer\nArtifact\nCertificate id for this signed entity.\nCompute current epoch protocol message part value\nReturns a Merkle map of the block ranges roots up to a …\nReturns a Merkle map of the block ranges roots up to a …\nCompute the Merkle tree of a given StakeDistribution\nCompute next aggregate verification key protocol message …\nCompute next protocol parameters protocol message part …\nCompute a protocol message\nCompute signable from signed entity type\nDate and time when the signed_entity was created\nCreate a dummy SignedEntity for CardanoTransactionsSnapshot…\nCreate a dummy SignedEntity for CardanoStakeDistribution …\nCreate a dummy SignedEntity for Snapshot entity\nCreate a dummy SignedEntity for MithrilStakeDistribution …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet artifact identifier\nImport all transactions up to the given beacon into the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConstructor\nConstructor\nMithrilSignableBuilderService factory\nCreate a new instance of SignableBuilderServiceDependencies…\nRetrieve the StakeDistribution for a given epoch\nReturns a Merkle map of the block ranges roots up to a …\nSigned entity id.\nSigned entity type.\nA structure to compare two directories in a human-readable …\nA builder of temp directory for tests purpose.\nA set of extension traits to add test utilities to this …\nCreate a sorted clone of an iterable.\nCompare a directory against a string representing its …\nAssert that two iterators are equivalent\nCompare two json strings ignoring keys order\nCreate a directory based on the builder configuration in …\nGenerate the path of the temp directory (no IO operation …\nBuilders for test\nCreate on disk a temp directory based on the given module …\nCreate on disk a temp directory based on the given module …\nTest utilities for Mithril STM types\nReturns the name of the function that called this macro.\nReturns the path of the function that called this macro.\nComputes a line-by-line diff between the content of <code>self</code> …\nTest doubles\nA set of extension traits to add test utilities to this …\nCompare two iterators ignoring the order\nReturn the path of the given function. If the last …\nReturn a string representing the path of the given …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new <code>DirStructure</code> from a given path by …\nChange path generation in order to guarantee a path that …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLogging utilities for tests\nA set of tools for working with <code>automock</code>\n<code>TempDir</code> builder factory\nSet the max len that a short path can have\nReturn a temporary directory based on the current function …\nCreate and return a temporary directory based on the …\nExtension trait adding test utilities to APIVersionProvider\n<code>TEST ONLY</code> - Set up an <code>APIVersionProvider</code> that fails to …\n<code>TEST ONLY</code> - Set up an <code>APIVersionProvider</code> with the given …\n<code>TEST ONLY</code> - Replace the open api versions\nBuilder to easily build transactions with consistent …\nA builder for creating a certificate chain. For tests only.\nContext used while building a certificate chain. For tests …\nFixture built from a CertificateChainBuilder, certificates …\nChaining method to use when building a certificate chain …\nUse a custom stake distribution\nA fixture of Mithril data types.\nA builder of mithril types.\nEach party will have a random stake.\nChain certificates sequentially.\nA signer fixture, containing a signer entity with its …\nMethods that can be used to generate the stake …\n<code>default</code> Chain certificates to the ‘master’ certificate …\nMake a stake distribution where all parties will have the …\nDefine how many blocks we generate in each block_range. If …\nBuild the certificate chain.\nTransform the specified parameters to a MithrilFixture.\nBuild a list of transactions to get the number of block …\nBuild the number of transactions requested.\nGet the stake distribution formated as a cardano-cli …\nExtract the chain starting from the certificate with the …\nThe full certificates list, ordered from latest to genesis\nCompute the Aggregate Verification Key for this fixture …\nCompute the Aggregate Verification Key for this fixture.\nComputes the protocol message seed.\nCompute the party id hash\nCreate a genesis certificate using the fixture signers for …\nIf set the generated signers won’t be certified (meaning …\nThe epoch of the certificate.\nThe fixture of the epoch.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturn the genesis certificate of this chain\nThe genesis verifier associated with this chain genesis …\nThe index of the certificate in the chain.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the current certificate is the last one.\nGet the path to this signer kes secret key\nThe path to this signer kes secret key file\nReturn the latest certificate of this chain\nDefine how many transactions we generate in each block.\nCardanoTransactionsBuilder constructor.\nCreate a new CertificateChainBuilder instance.\nMithrilFixture factory.\nThe fixture of the next epoch.\nDecode this signer operational certificate if any\nGet the path to this signer operational certificate\nThe path to this signer operational certificate file\nShortcut to get the party id from the inner signer with …\nA ProtocolClosedKeyRegistration.\nA ProtocolSigner.\nGet the fixture protocol parameters.\nA ProtocolSigner.\nGet the fixture protocol stake distribution.\nReturn a copy of the chain but with reversed order (from …\nSign the given protocol message.\nMake all underlying signers sign the given message, filter …\nA SignerWithStake.\nGet the fixture signers.\nGet the fixture signers.\nGet the fixture signers with stake.\nGet the fixture stake distribution.\nGet certificate metadata signers\nThe total number of certificates in the chain.\nCreate a new SignerFixture with specific protocol …\nDecode this signer verification key certificate\nDecode this signer verification key signature certificate …\nSet the aggregate signature type to use when building the …\nSet the chaining method to use when building the …\nSet the number of certificates per epoch.\nSet the genesis certificate processor.\nSet the seed used to generated the party ids\nSet the protocol parameters.\nSet the protocol_parameters.\nSet the number of signers that will be generated.\nSet the generation method used to compute the stake …\nSet the standard certificate processor.\nSet the total number of certificates to generate.\nSet the total signers per epoch processor.\nThe minimum stake\nThe randomizer seed\nFake KES Signer implementation.\nExtension trait adding test utilities to MKProof\nExtension trait adding test utilities to …\nReturns a dummy signature result that is always successful.\nReturns a dummy signature result that always fails.\nReturns the argument unchanged.\n<code>TEST ONLY</code> - Build a MKProof based on the given leaves\n<code>TEST ONLY</code> - Build a MKProof based on the given leaves\nReturns the messages that were requested to be signed\nCalls <code>U::from(self)</code>.\nCreates a new <code>KesSignerFake</code> instance.\n<code>TEST ONLY</code> - Override the protocol parameters of the …\nInstantiate a certificate chain, use this for tests only.\nInstantiate a ProtocolMessage using fake data, use this …\nInstantiate a ProtocolParameters, use this for tests only.\nInstantiate a list of protocol signers based on the given …\nCreate or retrieve a temporary directory for storing …\nA trait for giving a type a dummy value.\nA dummy implementation of the <code>ApiVersionDiscriminantSource</code> …\nA fake CertificateRetriever that returns a Certificate …\nReturn a dummy value for the type\nFake data builders for testing.\nPre hex encoded StmTypes for testing.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a new FakeCertificaterRetriever\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new instance of <code>DummyApiVersionDiscriminantSource</code> …\nFake Beacon\nFake Cardano Database snapshots\nFake Cardano Stake Distribution\nFake Cardano Stake Distributions\nFake Cardano Transactions\nFake Certificate\nFake ChainPoint\nFake Epoch\nFake Genesis Certificate\nFake Mithril Stake Distribution\nFake network\nFake ProtocolInitializer\nFake ProtocolParameters\nFake Signers\nFake SignersWithStake\nFake SingleSignature\nFake Snapshots\nFake transaction hashes that have valid length &amp; characters\nA list of pre json hex encoded …\nA list of pre json hex encoded Ed25519:Signature.\nA list of pre json hex encoded ed25519_dalek::VerifyingKey\nA list of pre json hex encoded ed25519_dalek::VerifyingKey\nA list of pre json hex encoded …\nA list of pre json hex encoded OpCert\nA list of pre json hex encoded Ed25519:Signature.\nA list of pre json hex encoded …\nA list of pre json hex encoded KES:Sum6KesSig\nA list of pre json hex encoded MithrilStm:SingleSignature\nExtension trait adding test utilities to BlockRange\nExtension trait adding test utilities to …\nExtension trait adding test utilities to SingleSignature\n<code>TEST ONLY</code> - Create a fake SingleSignature with valid …\n<code>TEST ONLY</code> - Helper to create a proof from a list of leaves\n<code>TEST ONLY</code> - BlockRange factory\n<code>TEST ONLY</code> - Try to add two BlockRanges\nA testing infrastructure for logging that consists of two …\nA component that provides methods to analyze logs stored …\nChecks if any log record contains the specified text\nCreates a test-specific <code>TestLogger</code> struct that can creates …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new instance of <code>MemoryDrainForTest</code>\nReturns all log records that contain the specified text\nHelper to create configured Mockall mock.\nCreate a new instance of the mock with the given …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.")