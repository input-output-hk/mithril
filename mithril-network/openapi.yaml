openapi: "3.0.0"
info:
  version: 0.0.1
  title: Mithril Aggregator Server
  description: |
    The REST API provided by a Mithril Aggregator Node in a Mithril network.
    
    You can play with it [here](https://input-output-hk.github.io/mithril/openapi-ui/).
  termsOfService: http://swagger.io/terms/
  contact:
    name: Mithril Team
    url: https://github.com/input-output-hk/mithril
  license:
    name: BSD 3-Clause License
    url: https://github.com/input-output-hk/mithril/blob/main/LICENSE
servers:
  - url: http://localhost:8080/aggregator
paths:
  /certificate-pending:
    get:
      summary: Get current pending certificate informations
      description: |
        Returns the informations related to the current pending certificate:
          * protocol parameters (to setup cryptography)
          * beacon information (where on the chain the pending certificate should be triggered)
          * verification keys of the signers
      responses:
        '200':
          description: pending certificate found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CertificatePending'    
        default:
          description: pending certificate error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /certificate/{certificate_hash}:
    get:
      summary: Get certificate by hash
      description: |
        Returns the certificate identified by its hash
      parameters:
        - name: certificate_hash
          in: path
          description: Hash of the certificate to retrieve
          required: true
          schema:
            type: string
            format: bytes
          example: "AsB0vSvijo8FIfrGFwBtdCNQVhBc9P24qQwKgWw4mr5kRZL"
      responses:
        '200':
          description: certificate found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Certificate'
        '404':
          description: certificate not found  
        default:
          description: pending certificate error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /snapshots:
    get:
      summary: Get most recent snapshots
      description: |
        Returns the list of the most recent snapshots
      responses:
        '200':
          description: snapshot found
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Snapshot'
        default:
          description: snapshot retrieval error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /snapshot/{digest}:
    get:
      summary: Get snapshot informations
      description: |
        Returns the informations of a snapshot and where to retrieve its binary content
      parameters:
        - name: digest
          in: path
          description: Digest of the snapshot to retrieve
          required: true
          schema:
            type: string
            format: bytes
          example: "NQVhBc9frGFwBtdCKgWw4P24qQwAsB0vSvijo8FImr5kRZL"
      responses:
        '200':
          description: snapshot found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Snapshot'
        '404':
          description: snapshot not found
        default:
          description: snapshot retrieval error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /register-signer:
    post:
      summary: Registers signer
      description: |
        Registers a signer for the next certificate production
      requestBody:
        description: Signer informations to register
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Signer'
      responses:
        '201':
          description: signer registration succeeded
        '409':
          description: signer registration already done
        '400':
          description: signer registration bad request
        default:
          description: signer registration error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /register-signatures:
    post:
      summary: Registers signatures
      description: |
        Registers the single signatures from a signer participant for the pending certificate
      requestBody:
        description: List of signatures
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/SingleSignature'
      responses:
        '201':
          description: signatures registration succeeded
        '400':
          description: signer registration bad request
        '409':
          description: signatures registration already done
        default:
          description: signatures registration error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
components:
  schemas:
    ProtocolParameters:
      description: Protocol cryptographic parameters
      type: object
      additionalProperties: true
      required:
        - k
        - m
        - phi_f  
      properties:
        k:
          description: Quorum parameter
          type: integer
          format: int64
        m:
          description: Security parameter (number of lotteries)
          type: integer
          format: int64
        phi_f:
          description: f in phi(w) = 1 - (1 - f)^w, where w is the stake of a participant
          type: number
          format: float
      example:
              {
              "k": 857,
              "m": 6172,
              "phi_f": 0.2
              }

    Beacon:
      description: Beacon represents a point in the Cardano chain at which a Mithril certificate should be produced
      type: object
      additionalProperties: true
      required:
        - network
        - epoch
        - block 
      properties:
        network:
          description: Cardano network
          type: string
        epoch:
          description: Cardano chain epoch number
          type: integer
          format: int64
        block:
          description: Cardano chain block number
          type: integer
          format: int64
      example:
              {
              "network": "mainnet",
              "epoch": 329,
              "block": 7060000,
              }
    
    CertificatePending:
      description: CertificatePending represents all the informations related to the certificate currently expecting to receive quorum of single signatures
      type: object
      additionalProperties: false
      required:
        - beacon
        - protocol
        - previous_hash
        - signers
      properties:
        beacon:
          $ref: '#/components/schemas/Beacon'
        protocol:
          $ref: '#/components/schemas/ProtocolParameters'
        previous_hash:
          description: Hash of the previous certificate
          type: string
          format: bytes
          example: "wKgWw4mr5kRZL+IUA9XXu7RiCHSRem3MmHoKboAsB0vSvijo8FIfrG/FwBtdCNQVhBc9P24qQ" 
        signers:
          type: array
          items:
              $ref: '#/components/schemas/SignerWithStake'

    Stake:
      description: Stake represents the stakes of a participant in the Cardano chain
      type: object
      additionalProperties: true
      required:
      - stake
      properties:
        stake:
          description: Stake value in ADA #TODO: Check if ADA or Lovelace
          type: integer
          format: int64
      example:
              {
                "stake": "1234",
              }

    Signer:
      description: Signer represents a signing participant in the network
      type: object
      additionalProperties: true
      required:
        - party_id
        - verification_key
      properties:
        party_id:
          description: The unique identifier of the signer
          type: integer
          format: int64
        verification_key:
          description: The public key used to authenticate signer signature
          type: string
          format: byte
      example:
              {
              "party_id": 1234567890,
              "verification_key": "AsB0vSvijo8FIfrG/FwBtdCNQVhBc9P24qQwKgWw4mr5kRZL+IUA9XXu7RiCHSRem3MmHoKbo",
              }

    SignerWithStake:
      description: Signer represents a signing party in the network (including its stakes)
      additionalProperties: true
      allOf:
        - $ref: '#/components/schemas/Signer'
        - $ref: '#/components/schemas/Stake'

    SingleSignature:
      description: SingleSignature represents a single signature originating from a participant in the network for a digest at a specific lottery index
      type: object
      additionalProperties: false
      required:
        - party_id
        - index
        - signature
      properties:
        party_id:
          description: The unique identifier of the signer
          type: integer
          format: int64
        index:
          description: The index of the lottery won that lead to the single signature
          type: integer
          format: int64
        signature:
          description: The single signature of the digest
          type: string
          format: byte
      example:
              {
              "party_id": 1234567890,
              "index": 25,
              "signature": "VhBc9P24qQwKgWw4mr5kRAsB0vSvijo8FIfrG/FwBtdCNQZL+IUA9XXuAsB0vSvijo8FIfrG/FwBtdCNQ7RiCHSRem3MmHoKbo",
              }

    Certificate:
      description: Certificate represents a Mithril certificate embedding a Mithril STM multisignature  
      type: object
      additionalProperties: false
      required:
        - hash
        - previous_hash
        - block
        - protocol
        - digest
        - started_at
        - completed_at
        - participants
        - multisignature
      properties:
        hash:
          description: Hash of the current certificate
          type: string
          format: bytes
        previous_hash:
          description: Hash of the previous certificate
          type: string
          format: bytes
        block:
          description: Cardano chain block number
          type: integer
          format: int64
        protocol:
          description: Protocol parameters
          $ref: '#/components/schemas/ProtocolParameters'
        digest:
          description: Digest that is signed by the signer participants
          type: string
          format: bytes
        started_at:
          description: Date and time at which the certificate was initialized and ready to accept single signatures from signers
          type: string
          format: date-time
        completed_at:
          description: Date and time at which the certificate was completed (when the quorum of single signatures was reached so that a multisignature could be aggregated from them)
          type: string
          format: date-time
        participants:
          description: The list of the participants (potential signers) with their stakes and verification keys
          type: array
          items:
            $ref: '#/components/schemas/SignerWithStake'
        multisignature:
          description: STM multisignature created from a quorum of single signatures from the signers
          type: string
          format: bytes
      example:
              {
              "hash": "AsB0vSvijo8FIfrG/FwBtdCNQVhBc9P24qQwKgWw4mr5kRZL+IUA9XXu7RiCHSRem3MmHoKbo",
              "previous_hash": "wKgWw4mr5kRZL+IUA9XXu7RiCHSRem3MmHoKboAsB0vSvijo8FIfrG/FwBtdCNQVhBc9P24qQ",
              "block": "7060659",
              "protocol": {
              "k": 857,
              "m": 6172,
              "phi_f": 0.2
              },
              "digest": "24qQwKgWw4mr5kRZLIUA9XAsB0vSvijo8FIfrGFwBtdCNQVhBc9PXu7RiCHSRem3MmHoKbo",
              "started_at": "2022-07-21T17:32:28Z",
              "completed_at": "2022-07-21T17:43:18Z",
              "participants": [
                {
                  "party_id": 1234567890,
                  "verification_key": "AsB0vSvijo8FIfrG/FwBtdCNQVhBc9P24qQwKgWw4mr5kRZL+IUA9XXu7RiCHSRem3MmHoKbo",
                  "stake": "1234",
                },
                {
                  "party_id": 2345678900,
                  "verification_key": "NQVhBc9P24qQwKgWw4mr5kRZL+IUA9XXu7RiCHSRem3MmHoKboAsB0vSvijo8FIfrG/FwBtdC",
                  "stake": "2345",
                }
              ],
              "multisignature": ""
              }  

    Snapshot:
      description: Snapshot represents a snapshot file and its metadata
      type: object
      additionalProperties: false
      required:
      - digest
      - certificate_hash
      - size
      - created_at
      - locations
      properties:
        digest:
          description: Digest that is signed by the signer participants
          type: string
          format: bytes
        certificate_hash:
          description: Hash of the associated certificate
          type: string
          format: bytes
        size: 
          description: Size of the snapshot file in Bytes
          type: integer
          format: int64
        created_at:
          description: Date and time at which the snapshot was created
          type: string
          format: date-time
        locations:
          description: Locations where the binary content of the snapshot can be retrieved
          type: array
          items:
            type: string
      example:
              {
                "digest": "24qQwKgWw4mr5kRZLIUA9XAsB0vSvijo8FIfrGFwBtdCNQVhBc9PXu7RiCHSRem3MmHoKbo",
                "certificate_hash": "AsB0vSvijo8FIfrG/FwBtdCNQVhBc9P24qQwKgWw4mr5kRZL+IUA9XXu7RiCHSRem3MmHoKbo",
                "size": 26058531636,
                "created_at": "2022-07-21T17:32:28Z",
                "locations":[
                  "https://mithril-cdn-us.iohk.io/snapshot/24qQwKgWw4mr5kRZLIUA9XAsB0vSvijo8FIfrGFwBtdCNQVhBc9PXu7RiCHSRem3MmHoKbo",
                  "https://mithril-cdn-eu.iohk.io/snapshot/24qQwKgWw4mr5kRZLIUA9XAsB0vSvijo8FIfrGFwBtdCNQVhBc9PXu7RiCHSRem3MmHoKbo",
                  "magnet:?xt=urn:sha1:YNCKHTQCWBTRNJIV4WNAE52SJUQCZO5C",
                  "ipfs:QmPXME1oRtoT627YKaDPDQ3PwA8tdP9rWuAAweLzqSwAWT"
                ]
              }

    Error:
      description: Internal error representation
      type: object
      additionalProperties: false
      required:
        - code
        - message
      properties:
        code:
          description: error code
          format: string
          example: "MITHRIL-E0001"
        message:
          description: error message
          type: string
          example: "An error occurred, the operation could not be completed"
