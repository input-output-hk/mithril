use std::sync::Arc;

use anyhow::anyhow;
use async_trait::async_trait;
use sqlite::ConnectionThreadSafe;

use mithril_common::certificate_chain::{CertificateRetriever, CertificateRetrieverError};
use mithril_common::entities::{Certificate, Epoch};
use mithril_common::StdResult;
use mithril_persistence::sqlite::ConnectionExtensions;

use crate::database::query::{
    DeleteCertificateQuery, GetCertificateRecordQuery, InsertCertificateRecordQuery,
    MasterCertificateQuery,
};
use crate::database::record::CertificateRecord;

/// Database frontend API for Certificate queries.
pub struct CertificateRepository {
    connection: Arc<ConnectionThreadSafe>,
}

impl CertificateRepository {
    /// Instantiate a new repository
    pub fn new(connection: Arc<ConnectionThreadSafe>) -> Self {
        Self { connection }
    }

    /// Return the certificate corresponding to the given hash if any.
    pub async fn get_certificate<T>(&self, hash: &str) -> StdResult<Option<T>>
    where
        T: From<CertificateRecord>,
    {
        let record = self
            .connection
            .fetch_first(GetCertificateRecordQuery::by_certificate_id(hash))?;

        Ok(record.map(|c| c.into()))
    }

    /// Return the latest certificates.
    pub async fn get_latest_certificates<T>(&self, last_n: usize) -> StdResult<Vec<T>>
    where
        T: From<CertificateRecord>,
    {
        let cursor = self.connection.fetch(GetCertificateRecordQuery::all())?;

        Ok(cursor.take(last_n).map(|v| v.into()).collect())
    }

    /// Return the latest genesis certificate.
    pub async fn get_latest_genesis_certificate<T>(&self) -> StdResult<Option<T>>
    where
        T: From<CertificateRecord>,
    {
        let record = self
            .connection
            .fetch_first(GetCertificateRecordQuery::all_genesis())?;

        Ok(record.map(|c| c.into()))
    }

    /// Return the first certificate signed per epoch as the reference
    /// certificate for this Epoch. This will be the parent certificate for all
    /// other certificates issued within this Epoch.
    pub async fn get_master_certificate_for_epoch<T>(&self, epoch: Epoch) -> StdResult<Option<T>>
    where
        T: From<CertificateRecord>,
    {
        let record = self
            .connection
            .fetch_first(MasterCertificateQuery::for_epoch(epoch))?;

        Ok(record.map(|c| c.into()))
    }

    /// Create a new certificate in the database.
    pub async fn create_certificate(&self, certificate: Certificate) -> StdResult<Certificate> {
        let record = self
            .connection
            .fetch_first(InsertCertificateRecordQuery::one(
                certificate.clone().into(),
            ))?
            .unwrap_or_else(|| {
                panic!("No entity returned by the persister, certificate = {certificate:#?}")
            });

        Ok(record.into())
    }

    /// Create many certificates at once in the database.
    pub async fn create_many_certificates(
        &self,
        certificates: Vec<Certificate>,
    ) -> StdResult<Vec<Certificate>> {
        if certificates.is_empty() {
            return Ok(vec![]);
        }

        let records: Vec<CertificateRecord> =
            certificates.into_iter().map(|cert| cert.into()).collect();
        let new_certificates =
            self.connection.fetch(InsertCertificateRecordQuery::many(records))?;

        Ok(new_certificates.map(|cert| cert.into()).collect())
    }

    /// Delete all the given certificates from the database
    pub async fn delete_certificates(&self, certificates: &[&Certificate]) -> StdResult<()> {
        let ids = certificates.iter().map(|c| c.hash.as_str()).collect::<Vec<_>>();

        let _ = self.connection.fetch_first(DeleteCertificateQuery::by_ids(&ids))?;

        Ok(())
    }
}

#[async_trait]
impl CertificateRetriever for CertificateRepository {
    async fn get_certificate_details(
        &self,
        certificate_hash: &str,
    ) -> Result<Certificate, CertificateRetrieverError> {
        self.get_certificate(certificate_hash)
            .await
            .map_err(|e| CertificateRetrieverError(anyhow!(e)))?
            .ok_or(CertificateRetrieverError(anyhow!(format!(
                "Certificate does not exist: '{}'",
                certificate_hash
            ))))
    }
}

#[cfg(test)]
mod tests {
    use mithril_common::crypto_helper::tests_setup::setup_certificate_chain;

    use crate::database::test_helper::{insert_certificate_records, main_db_connection};

    use super::*;

    fn insert_golden_certificate(connection: &ConnectionThreadSafe) {
        connection
            .execute(r#"
            -- genesis certificate
            insert into certificate
            values(
                'bfb4efbd48d58f7677ddb7d5fe5b5b9e998e8ca549cbf7583873bdccfc70f194',
                null,
                '08420665c56dcf6981b7d8b64b5a584e148edbf7638f466cb36b278ce962439c',
                'b7944ddc7d728812f8e68abc93b668a84876e9867b97648bc937b20debdff15a8415470ee709599d1a12a50ac5a57a3a4955cf19307d04955fcad6931c3b9505',
                '7b226d745f636f6d6d69746d656e74223a7b22726f6f74223a5b37372c3230382c3138392c3138372c37362c3136322c36382c3233382c3134342c31372c3131342c3137352c36302c3136352c3230322c3134362c3139342c31332c37332c3233392c3233372c3232322c3136392c3230362c352c3130392c3132332c35322c3235342c39382c3133312c37395d2c226e725f6c6561766573223a332c22686173686572223a6e756c6c7d2c22746f74616c5f7374616b65223a32383439323639303636317d',
                241,
                'preview',
                0,
                241,
                '0.1.0',
                '{"k":2422,"m":20973,"phi_f":0.2}',
                '{"message_parts":{
                    "next_aggregate_verification_key":"7b226d745f636f6d6d69746d656e74223a7b22726f6f74223a5b37372c3230382c3138392c3138372c37362c3136322c36382c3233382c3134342c31372c3131342c3137352c36302c3136352c3230322c3134362c3139342c31332c37332c3233392c3233372c3232322c3136392c3230362c352c3130392c3132332c35322c3235342c39382c3133312c37395d2c226e725f6c6561766573223a332c22686173686572223a6e756c6c7d2c22746f74616c5f7374616b65223a32383439323639303636317d"
                }}',
                '[{
                    "party_id":"pool1vapqexnsx6hvc588yyysxpjecf3k43hcr5mvhmstutuvy085xpa",
                    "verification_key":"7b22766b223a5b3133382c33322c3133382c3135322c3134362c3235352c3130382c3139302c37302c34322c3132362c3137322c31392c3135312c3133392c3133392c3235352c33352c3134312c38322c3138372c33372c3133332c3235322c3139322c302c32362c32342c3134342c372c3235332c3136362c3135312c3139332c392c3230392c3131392c3230302c3134312c34312c38302c342c3231372c3132322c3132302c3235332c3230382c3131312c362c37382c3234362c3134362c3131382c352c3235312c31392c3234332c3138342c3233382c3139352c39392c3235312c3135312c342c39342c3133382c3234362c33362c33372c34382c3133362c3130302c3233352c3134312c3232382c392c39362c3131332c35392c3137352c3130322c3232392c39352c39332c3134332c3137312c3130302c32302c3133362c36372c33302c3133312c3135332c32362c35372c3132385d2c22706f70223a5b3137342c3233302c33382c3138312c3131332c38332c372c34332c3130312c38392c3133372c3133302c37302c3135382c3235342c31342c31362c36372c38332c362c3234322c39312c3136372c34352c3232392c3139382c3130312c37302c3232382c36312c3138302c3132302c3130332c3232302c3231312c3134362c3136322c37302c33382c3230352c3139312c3235322c3138342c3235322c39362c3134382c3130322c3133362c3136362c34322c3137382c3133352c3130302c33312c38392c3233342c3135392c3131382c33382c3133392c31362c3134342c3132382c3134382c3132382c3139312c31382c34382c38392c3136352c35342c3134362c36332c3136302c3138362c3139362c31392c3137312c3136302c31342c39322c35382c3232312c3138352c3132392c382c3133322c35352c3231382c3235302c39352c32312c3235302c3135312c36352c3231395d7d",
                    "verification_key_signature":"7b227369676d61223a7b227369676d61223a7b227369676d61223a7b227369676d61223a7b227369676d61223a7b227369676d61223a5b35342c35372c32332c3234302c3234342c3130352c3139322c3138312c3130362c3232312c3132302c3139382c3136392c3134372c3233362c34382c32342c35382c3233352c31332c36302c31352c3231382c33312c34352c3135322c3133302c3230382c36392c38312c34372c3135302c3234352c3234332c32352c39342c3134382c3136322c39322c3136392c3131352c37382c31352c38382c3139382c38342c3233322c3138342c3135372c3139352c35342c3136352c33352c382c3232342c3130312c3138392c38372c32392c3131342c3133322c33382c3132322c31305d2c226c68735f706b223a5b3139322c3135342c3230322c3233342c36352c3234332c3132392c3230302c3131382c3137352c3131342c3233352c3232322c3235342c3134322c3232332c3137372c3233342c31352c31382c34312c31362c38382c38352c37322c3130372c33322c3134382c33352c35312c3132352c34355d2c227268735f706b223a5b3137342c39352c3132342c31382c36322c3135312c3137302c3136382c3232332c36362c3132322c36312c3234322c3130372c3132352c3137372c3137302c3132332c35382c3231362c3137362c392c3234302c3131382c3131302c35362c3232372c3230302c3131322c3130352c32392c3230385d7d2c226c68735f706b223a5b36392c3138322c39392c382c34302c39332c3130382c3233312c382c312c3235322c3131302c3132322c37332c3133302c3230372c3231332c3137312c3130352c3232322c31352c3134322c3230362c3137392c33382c3132302c39322c362c32302c3133352c3130382c3138335d2c227268735f706b223a5b33342c36372c3134302c3132392c3231352c36392c3136302c3135362c3230302c31302c3232362c35382c3132322c36342c33382c3135362c3230362c3230362c302c3137382c3132302c3139332c362c3135332c3131322c3130392c3135372c3131322c3132322c3133372c3233372c38355d7d2c226c68735f706b223a5b37332c3131342c3136352c3137312c34322c3131372c3139322c3139342c3137342c32302c38312c392c3230392c31392c3134352c3233302c3233302c3130392c34382c3135302c31332c3232392c3139322c35342c3138362c3137372c32382c3133362c31352c3230342c3231342c3132305d2c227268735f706b223a5b3139302c32322c3131312c38362c38322c3138362c3231372c3134312c302c3136382c3130382c3230362c3130392c332c3138342c3230342c382c3138362c3136362c32312c39372c34342c3135352c332c3136352c3139392c3132372c39312c3233382c38362c3139302c35305d7d2c226c68735f706b223a5b3135392c37352c3131382c3132372c3139382c34342c3137392c34322c3231382c3131382c3235332c3139392c32342c37312c3133302c362c3136332c3131342c3133392c31332c3130392c31372c3132372c35312c39342c3133312c3132382c3230332c3131382c3231312c3137392c36365d2c227268735f706b223a5b3139312c3136342c33362c3131312c37362c3132372c3231382c3230352c3234322c3134322c3230312c3233322c3235322c3233322c35372c39362c3131372c3232362c37332c34322c3231372c3235342c3130382c3233342c3234372c3137362c3234372c3133302c32342c36332c31392c38355d7d2c226c68735f706b223a5b35342c33392c3235342c33322c3131392c39332c3138322c3132372c3136352c3134362c3230352c33392c36352c3139362c3134362c36392c36392c34332c3139382c3130322c3139342c35372c31332c3230302c3232332c39382c38322c3134312c3133362c35382c3235322c3130325d2c227268735f706b223a5b3137372c34322c33372c3133322c3133352c3130322c3135342c392c3233362c31392c3235302c3235312c39382c36352c3133302c3232352c3136382c3232362c3136352c34392c35302c35322c3134312c3136392c35312c3230342c3234362c3130302c3233372c3234362c39322c32345d7d2c226c68735f706b223a5b33302c38302c3232322c3233372c3139302c342c3130352c3230362c37302c31372c3234382c3134322c362c31332c3137352c3136332c38342c3231352c3132322c3235352c3232302c3131382c34382c33312c34352c33332c3233372c3234352c3235302c3234302c3132392c3131355d2c227268735f706b223a5b3132332c31302c31352c36332c3138312c3231382c31302c36362c3138382c3138312c3130302c3138302c3130302c3139352c3137382c38372c3233362c32382c3138322c35362c3232362c35382c3234302c3131322c392c3133322c39332c33302c33372c3136332c3134322c39315d7d",
                    "operational_certificate":"5b5b5b3131322c39352c34322c39372c382c3235322c31382c3231342c31392c3231382c3231372c3234322c3233302c3138372c3234302c3133392c31342c3135382c3137392c3234392c3231312c36332c3132332c342c32362c3132362c3132312c3234372c302c35372c31362c3136315d2c312c37312c5b3132392c3234382c3133342c3132342c3230372c3130332c3233312c37302c3130372c32382c3134322c3134312c38362c3234392c3230352c31312c33392c3232382c3130382c3132322c3233312c3138322c3132372c3130312c3234352c33332c3135322c3233342c35342c36372c3138312c39362c3137372c3234362c32382c322c3235322c3130382c35392c3231352c3232372c3230392c3131382c3130352c3135342c37312c36332c3134352c3132372c3137352c3133382c3131352c39362c3233352c3131382c31322c3234302c3232352c3130392c3130382c3231322c3232392c35372c31305d5d2c5b33302c3138312c32302c37382c33392c3232332c352c3133372c3134312c3138392c372c3132372c34352c3232372c3230362c3135372c39352c3131352c36312c3132382c3135392c3135362c34332c3132372c302c34302c3134332c3138332c3233302c32352c39312c3137305d5d",
                    "kes_period":22,
                    "stake":1009497432569
                }]',
                '2023-06-23T08:37:49.066Z',
                '2023-06-23T08:37:49.066Z'
            );
            
            -- multi-signature certificate
            insert into certificate
            values(
                '9a86b602d1eda6d3a48967e63f5b35885368795669d9293014e1c289ee0defa7',
                '3997f18bbbe706a77fbf464101a3e6c6476a9d1dd2e10f2ed614f028713b8f11',
                '33975e636d019513d93e9182e6a5e38092909620cd4b650e06a03e2c4cf2e65a',
                '',
                '7b226d745f636f6d6d69746d656e74223a7b22726f6f74223a5b3134302c31332c3135352c3134312c3136332c372c38362c3232372c34372c31392c3138302c3132372c3139362c3130382c3137312c3135382c3134302c37372c3137352c3135392c3133362c3139332c3130382c34322c3134322c3234342c38352c3131362c3235322c3135362c3233352c35305d2c226e725f6c6561766573223a312c22686173686572223a6e756c6c7d2c22746f74616c5f7374616b65223a313030393439373433323536397d',
                142,
                'preview',
                2,
                '{"epoch":142,"immutable_file_number":2838}',
                '0.1.0',
                '{"k":2422,"m":20973,"phi_f":0.2}',
                '{"message_parts":{
                    "snapshot_digest":"cfed71151e42f8208b841531dc95477f10db25083db5eb9759e745155e83ca7c",
                    "next_aggregate_verification_key":"7b226d745f636f6d6d69746d656e74223a7b22726f6f74223a5b3132322c3131322c3131302c37332c3131352c3130302c33352c3131322c37312c3130372c3139392c3139322c3131352c37382c32312c38322c3131362c3136312c35312c34332c3233342c3134332c3139382c3138352c33342c3233302c3131332c3234352c3136392c3137332c3136322c37315d2c226e725f6c6561766573223a322c22686173686572223a6e756c6c7d2c22746f74616c5f7374616b65223a323031383939353036313631357d"
                 }}',
                '[{
                    "party_id":"pool1vapqexnsx6hvc588yyysxpjecf3k43hcr5mvhmstutuvy085xpa",
                    "verification_key":"7b22766b223a5b3133382c33322c3133382c3135322c3134362c3235352c3130382c3139302c37302c34322c3132362c3137322c31392c3135312c3133392c3133392c3235352c33352c3134312c38322c3138372c33372c3133332c3235322c3139322c302c32362c32342c3134342c372c3235332c3136362c3135312c3139332c392c3230392c3131392c3230302c3134312c34312c38302c342c3231372c3132322c3132302c3235332c3230382c3131312c362c37382c3234362c3134362c3131382c352c3235312c31392c3234332c3138342c3233382c3139352c39392c3235312c3135312c342c39342c3133382c3234362c33362c33372c34382c3133362c3130302c3233352c3134312c3232382c392c39362c3131332c35392c3137352c3130322c3232392c39352c39332c3134332c3137312c3130302c32302c3133362c36372c33302c3133312c3135332c32362c35372c3132385d2c22706f70223a5b3137342c3233302c33382c3138312c3131332c38332c372c34332c3130312c38392c3133372c3133302c37302c3135382c3235342c31342c31362c36372c38332c362c3234322c39312c3136372c34352c3232392c3139382c3130312c37302c3232382c36312c3138302c3132302c3130332c3232302c3231312c3134362c3136322c37302c33382c3230352c3139312c3235322c3138342c3235322c39362c3134382c3130322c3133362c3136362c34322c3137382c3133352c3130302c33312c38392c3233342c3135392c3131382c33382c3133392c31362c3134342c3132382c3134382c3132382c3139312c31382c34382c38392c3136352c35342c3134362c36332c3136302c3138362c3139362c31392c3137312c3136302c31342c39322c35382c3232312c3138352c3132392c382c3133322c35352c3231382c3235302c39352c32312c3235302c3135312c36352c3231395d7d",
                    "verification_key_signature":"7b227369676d61223a7b227369676d61223a7b227369676d61223a7b227369676d61223a7b227369676d61223a7b227369676d61223a5b35342c35372c32332c3234302c3234342c3130352c3139322c3138312c3130362c3232312c3132302c3139382c3136392c3134372c3233362c34382c32342c35382c3233352c31332c36302c31352c3231382c33312c34352c3135322c3133302c3230382c36392c38312c34372c3135302c3234352c3234332c32352c39342c3134382c3136322c39322c3136392c3131352c37382c31352c38382c3139382c38342c3233322c3138342c3135372c3139352c35342c3136352c33352c382c3232342c3130312c3138392c38372c32392c3131342c3133322c33382c3132322c31305d2c226c68735f706b223a5b3139322c3135342c3230322c3233342c36352c3234332c3132392c3230302c3131382c3137352c3131342c3233352c3232322c3235342c3134322c3232332c3137372c3233342c31352c31382c34312c31362c38382c38352c37322c3130372c33322c3134382c33352c35312c3132352c34355d2c227268735f706b223a5b3137342c39352c3132342c31382c36322c3135312c3137302c3136382c3232332c36362c3132322c36312c3234322c3130372c3132352c3137372c3137302c3132332c35382c3231362c3137362c392c3234302c3131382c3131302c35362c3232372c3230302c3131322c3130352c32392c3230385d7d2c226c68735f706b223a5b36392c3138322c39392c382c34302c39332c3130382c3233312c382c312c3235322c3131302c3132322c37332c3133302c3230372c3231332c3137312c3130352c3232322c31352c3134322c3230362c3137392c33382c3132302c39322c362c32302c3133352c3130382c3138335d2c227268735f706b223a5b33342c36372c3134302c3132392c3231352c36392c3136302c3135362c3230302c31302c3232362c35382c3132322c36342c33382c3135362c3230362c3230362c302c3137382c3132302c3139332c362c3135332c3131322c3130392c3135372c3131322c3132322c3133372c3233372c38355d7d2c226c68735f706b223a5b37332c3131342c3136352c3137312c34322c3131372c3139322c3139342c3137342c32302c38312c392c3230392c31392c3134352c3233302c3233302c3130392c34382c3135302c31332c3232392c3139322c35342c3138362c3137372c32382c3133362c31352c3230342c3231342c3132305d2c227268735f706b223a5b3139302c32322c3131312c38362c38322c3138362c3231372c3134312c302c3136382c3130382c3230362c3130392c332c3138342c3230342c382c3138362c3136362c32312c39372c34342c3135352c332c3136352c3139392c3132372c39312c3233382c38362c3139302c35305d7d2c226c68735f706b223a5b3135392c37352c3131382c3132372c3139382c34342c3137392c34322c3231382c3131382c3235332c3139392c32342c37312c3133302c362c3136332c3131342c3133392c31332c3130392c31372c3132372c35312c39342c3133312c3132382c3230332c3131382c3231312c3137392c36365d2c227268735f706b223a5b3139312c3136342c33362c3131312c37362c3132372c3231382c3230352c3234322c3134322c3230312c3233322c3235322c3233322c35372c39362c3131372c3232362c37332c34322c3231372c3235342c3130382c3233342c3234372c3137362c3234372c3133302c32342c36332c31392c38355d7d2c226c68735f706b223a5b35342c33392c3235342c33322c3131392c39332c3138322c3132372c3136352c3134362c3230352c33392c36352c3139362c3134362c36392c36392c34332c3139382c3130322c3139342c35372c31332c3230302c3232332c39382c38322c3134312c3133362c35382c3235322c3130325d2c227268735f706b223a5b3137372c34322c33372c3133322c3133352c3130322c3135342c392c3233362c31392c3235302c3235312c39382c36352c3133302c3232352c3136382c3232362c3136352c34392c35302c35322c3134312c3136392c35312c3230342c3234362c3130302c3233372c3234362c39322c32345d7d2c226c68735f706b223a5b33302c38302c3232322c3233372c3139302c342c3130352c3230362c37302c31372c3234382c3134322c362c31332c3137352c3136332c38342c3231352c3132322c3235352c3232302c3131382c34382c33312c34352c33332c3233372c3234352c3235302c3234302c3132392c3131355d2c227268735f706b223a5b3132332c31302c31352c36332c3138312c3231382c31302c36362c3138382c3138312c3130302c3138302c3130302c3139352c3137382c38372c3233362c32382c3138322c35362c3232362c35382c3234302c3131322c392c3133322c39332c33302c33372c3136332c3134322c39315d7d",
                    "operational_certificate":"5b5b5b3131322c39352c34322c39372c382c3235322c31382c3231342c31392c3231382c3231372c3234322c3233302c3138372c3234302c3133392c31342c3135382c3137392c3234392c3231312c36332c3132332c342c32362c3132362c3132312c3234372c302c35372c31362c3136315d2c312c37312c5b3132392c3234382c3133342c3132342c3230372c3130332c3233312c37302c3130372c32382c3134322c3134312c38362c3234392c3230352c31312c33392c3232382c3130382c3132322c3233312c3138322c3132372c3130312c3234352c33332c3135322c3233342c35342c36372c3138312c39362c3137372c3234362c32382c322c3235322c3130382c35392c3231352c3232372c3230392c3131382c3130352c3135342c37312c36332c3134352c3132372c3137352c3133382c3131352c39362c3233352c3131382c31322c3234302c3232352c3130392c3130382c3231322c3232392c35372c31305d5d2c5b33302c3138312c32302c37382c33392c3232332c352c3133372c3134312c3138392c372c3132372c34352c3232372c3230362c3135372c39352c3131352c36312c3132382c3135392c3135362c34332c3132372c302c34302c3134332c3138332c3233302c32352c39312c3137305d5d",
                    "kes_period":22,
                    "stake":1009497432569
                }]',
                '2023-03-16T01:51:00.880Z',
                '2023-03-16T02:07:22.145Z'
            );
            "#,
            )
            .unwrap();
    }

    #[tokio::test]
    async fn test_golden_master() {
        let connection = main_db_connection().unwrap();
        insert_golden_certificate(&connection);

        let repository = CertificateRepository::new(Arc::new(connection));
        let certificate_records = repository
            .get_latest_certificates::<CertificateRecord>(usize::MAX)
            .await
            .expect("Getting Golden certificates should not fail");

        assert_eq!(certificate_records.len(), 2);
    }

    #[tokio::test]
    async fn persisting_many_without_any_records_dont_crash() {
        let connection = main_db_connection().unwrap();
        let repository = CertificateRepository::new(Arc::new(connection));

        let modified_records = repository
            .create_many_certificates(Vec::new())
            .await
            .expect("saving many records should not fail even with an empty list");
        let current_records = repository
            .get_latest_certificates::<CertificateRecord>(usize::MAX)
            .await
            .unwrap();

        assert_eq!(0, modified_records.len());
        assert_eq!(0, current_records.len());
    }

    #[tokio::test]
    async fn repository_get_certificate() {
        let (certificates, _) = setup_certificate_chain(5, 2);
        let expected_hash = certificates[0].hash.clone();
        let connection = Arc::new(main_db_connection().unwrap());
        insert_certificate_records(&connection, certificates.clone());

        let repository: CertificateRepository = CertificateRepository::new(connection);
        let certificate = repository.get_certificate::<Certificate>("whatever").await.unwrap();
        assert!(certificate.is_none());

        let certificate = repository
            .get_certificate::<Certificate>(&expected_hash)
            .await
            .unwrap()
            .expect("The certificate exist and should be returned.");

        assert_eq!(expected_hash, certificate.hash);
    }

    #[tokio::test]
    async fn repository_get_latest_certificates() {
        let (certificates, _) = setup_certificate_chain(5, 2);
        let connection = Arc::new(main_db_connection().unwrap());
        insert_certificate_records(&connection, certificates.clone());

        let repository = CertificateRepository::new(connection);
        let latest_certificates =
            repository.get_latest_certificates(certificates.len()).await.unwrap();
        let expected: Vec<Certificate> = certificates.into_iter().rev().collect();

        assert_eq!(expected, latest_certificates);
    }

    #[tokio::test]
    async fn repository_get_latest_genesis_certificate() {
        let (certificates, _) = setup_certificate_chain(5, 2);
        let connection = Arc::new(main_db_connection().unwrap());
        insert_certificate_records(&connection, certificates.clone());

        let repository = CertificateRepository::new(connection);
        let latest_certificates = repository.get_latest_genesis_certificate().await.unwrap();
        let expected = Some(certificates.last().unwrap().clone());

        assert_eq!(expected, latest_certificates);
    }

    #[tokio::test]
    async fn get_master_certificate_no_certificate_recorded_returns_none() {
        let connection = Arc::new(main_db_connection().unwrap());

        let repository: CertificateRepository = CertificateRepository::new(connection);
        let certificate = repository
            .get_master_certificate_for_epoch::<Certificate>(Epoch(1))
            .await
            .unwrap();

        assert_eq!(None, certificate);
    }

    #[tokio::test]
    async fn get_master_certificate_one_cert_in_current_epoch_recorded_returns_that_one() {
        let connection = Arc::new(main_db_connection().unwrap());
        let certificate = CertificateRecord::dummy_genesis("1", Epoch(1));
        let expected_certificate: Certificate = certificate.clone().into();
        insert_certificate_records(&connection, vec![certificate]);

        let repository: CertificateRepository = CertificateRepository::new(connection);
        let certificate = repository
            .get_master_certificate_for_epoch::<Certificate>(Epoch(1))
            .await
            .unwrap()
            .expect("This should return a certificate.");

        assert_eq!(expected_certificate, certificate);
    }

    #[tokio::test]
    async fn get_master_certificate_multiple_cert_in_current_epoch_returns_first_of_current_epoch()
    {
        let connection = Arc::new(main_db_connection().unwrap());
        let certificates = vec![
            CertificateRecord::dummy_genesis("1", Epoch(1)),
            CertificateRecord::dummy_db_snapshot("2", "1", Epoch(1), 2),
            CertificateRecord::dummy_db_snapshot("3", "1", Epoch(1), 3),
        ];
        let expected_certificate: Certificate = certificates.first().unwrap().clone().into();
        insert_certificate_records(&connection, certificates);

        let repository: CertificateRepository = CertificateRepository::new(connection);
        let certificate = repository
            .get_master_certificate_for_epoch::<Certificate>(Epoch(1))
            .await
            .unwrap()
            .expect("This should return a certificate.");

        assert_eq!(expected_certificate, certificate);
    }

    #[tokio::test]
    async fn get_master_certificate_multiple_cert_in_previous_epoch_none_in_the_current_returns_first_of_previous_epoch(
    ) {
        let connection = Arc::new(main_db_connection().unwrap());
        let certificates = vec![
            CertificateRecord::dummy_genesis("1", Epoch(1)),
            CertificateRecord::dummy_db_snapshot("2", "1", Epoch(1), 2),
            CertificateRecord::dummy_db_snapshot("3", "1", Epoch(1), 3),
        ];
        let expected_certificate: Certificate = certificates.first().unwrap().clone().into();
        insert_certificate_records(&connection, certificates);

        let repository: CertificateRepository = CertificateRepository::new(connection);
        let certificate = repository
            .get_master_certificate_for_epoch::<Certificate>(Epoch(2))
            .await
            .unwrap()
            .expect("This should return a certificate.");

        assert_eq!(expected_certificate, certificate);
    }

    #[tokio::test]
    async fn get_master_certificate_multiple_cert_in_previous_one_cert_in_current_epoch_returns_one_in_current_epoch(
    ) {
        let connection = Arc::new(main_db_connection().unwrap());
        let certificates = vec![
            CertificateRecord::dummy_genesis("1", Epoch(1)),
            CertificateRecord::dummy_db_snapshot("2", "1", Epoch(1), 2),
            CertificateRecord::dummy_db_snapshot("3", "1", Epoch(1), 3),
            CertificateRecord::dummy_db_snapshot("4", "1", Epoch(2), 4),
        ];
        let expected_certificate: Certificate = certificates.last().unwrap().clone().into();
        insert_certificate_records(&connection, certificates);

        let repository: CertificateRepository = CertificateRepository::new(connection);
        let certificate = repository
            .get_master_certificate_for_epoch::<Certificate>(Epoch(2))
            .await
            .unwrap()
            .expect("This should return a certificate.");

        assert_eq!(expected_certificate, certificate);
    }

    #[tokio::test]
    async fn get_master_certificate_multiple_cert_in_previous_multiple_in_current_epoch_returns_first_of_current_epoch(
    ) {
        let connection = Arc::new(main_db_connection().unwrap());
        let certificates = vec![
            CertificateRecord::dummy_genesis("1", Epoch(1)),
            CertificateRecord::dummy_db_snapshot("2", "1", Epoch(1), 2),
            CertificateRecord::dummy_db_snapshot("3", "1", Epoch(1), 3),
            CertificateRecord::dummy_db_snapshot("4", "1", Epoch(2), 4),
            CertificateRecord::dummy_db_snapshot("5", "4", Epoch(2), 5),
            CertificateRecord::dummy_db_snapshot("6", "4", Epoch(2), 6),
        ];
        let expected_certificate: Certificate = certificates.get(3).unwrap().clone().into();
        insert_certificate_records(&connection, certificates);

        let repository: CertificateRepository = CertificateRepository::new(connection);
        let certificate = repository
            .get_master_certificate_for_epoch(Epoch(2))
            .await
            .unwrap()
            .expect("This should return a certificate.");
        assert_eq!(expected_certificate, certificate);
    }

    #[tokio::test]
    async fn get_master_certificate_multiple_cert_in_penultimate_epoch_none_in_previous_returns_none(
    ) {
        let connection = Arc::new(main_db_connection().unwrap());
        let certificates = vec![
            CertificateRecord::dummy_genesis("1", Epoch(1)),
            CertificateRecord::dummy_db_snapshot("2", "1", Epoch(1), 2),
            CertificateRecord::dummy_db_snapshot("3", "1", Epoch(1), 3),
        ];
        insert_certificate_records(&connection, certificates);

        let repository: CertificateRepository = CertificateRepository::new(connection);
        let certificate = repository
            .get_master_certificate_for_epoch::<Certificate>(Epoch(3))
            .await
            .unwrap();

        assert_eq!(None, certificate);
    }

    #[tokio::test]
    async fn get_master_certificate_second_genesis_after_multiple_cert_in_current_epoch_returns_last_genesis(
    ) {
        let connection = Arc::new(main_db_connection().unwrap());
        let certificates = vec![
            CertificateRecord::dummy_genesis("1", Epoch(1)),
            CertificateRecord::dummy_db_snapshot("2", "1", Epoch(1), 2),
            CertificateRecord::dummy_db_snapshot("3", "1", Epoch(1), 3),
            CertificateRecord::dummy_genesis("4", Epoch(1)),
        ];
        let expected_certificate: Certificate = certificates.last().unwrap().clone().into();
        insert_certificate_records(&connection, certificates);

        let repository: CertificateRepository = CertificateRepository::new(connection);
        let certificate = repository
            .get_master_certificate_for_epoch(Epoch(2))
            .await
            .unwrap()
            .expect("This should return a certificate.");

        assert_eq!(expected_certificate, certificate);
    }

    #[tokio::test]
    async fn get_master_certificate_second_genesis_after_multiple_cert_in_multiple_epochs_returns_last_genesis(
    ) {
        let connection = Arc::new(main_db_connection().unwrap());
        let certificates = vec![
            CertificateRecord::dummy_genesis("1", Epoch(1)),
            CertificateRecord::dummy_db_snapshot("2", "1", Epoch(1), 2),
            CertificateRecord::dummy_db_snapshot("3", "1", Epoch(1), 2),
            CertificateRecord::dummy_db_snapshot("4", "1", Epoch(2), 4),
            CertificateRecord::dummy_db_snapshot("5", "1", Epoch(2), 5),
            CertificateRecord::dummy_genesis("6", Epoch(2)),
        ];
        let expected_certificate: Certificate = certificates.last().unwrap().clone().into();
        insert_certificate_records(&connection, certificates);

        let repository: CertificateRepository = CertificateRepository::new(connection);
        let certificate = repository
            .get_master_certificate_for_epoch(Epoch(2))
            .await
            .unwrap()
            .expect("This should return a certificate.");

        assert_eq!(expected_certificate, certificate);
    }

    #[tokio::test]
    async fn get_master_certificate_new_genesis_after_multiple_cert_in_previous_epoch_returns_last_genesis(
    ) {
        let connection = Arc::new(main_db_connection().unwrap());
        let certificates = vec![
            CertificateRecord::dummy_genesis("1", Epoch(1)),
            CertificateRecord::dummy_db_snapshot("2", "1", Epoch(1), 2),
            CertificateRecord::dummy_db_snapshot("3", "1", Epoch(1), 3),
            CertificateRecord::dummy_genesis("4", Epoch(2)),
        ];
        let expected_certificate: Certificate = certificates.last().unwrap().clone().into();
        insert_certificate_records(&connection, certificates);

        let repository: CertificateRepository = CertificateRepository::new(connection);
        let certificate = repository
            .get_master_certificate_for_epoch(Epoch(2))
            .await
            .unwrap()
            .expect("This should return a certificate.");

        assert_eq!(expected_certificate, certificate);
    }

    #[tokio::test]
    async fn get_master_certificate_for_epoch() {
        let (certificates, _) = setup_certificate_chain(3, 1);
        let expected_certificate_id = &certificates[2].hash;
        let epoch = &certificates[2].epoch;
        let connection = Arc::new(main_db_connection().unwrap());
        insert_certificate_records(&connection, certificates.clone());

        let repository: CertificateRepository = CertificateRepository::new(connection);
        let certificate = repository
            .get_master_certificate_for_epoch::<Certificate>(*epoch)
            .await
            .unwrap()
            .expect("This should return a certificate.");

        assert_eq!(expected_certificate_id.to_string(), certificate.hash);
    }

    #[tokio::test]
    async fn save_certificate() {
        let (certificates, _) = setup_certificate_chain(5, 3);
        let connection = Arc::new(main_db_connection().unwrap());
        let repository: CertificateRepository = CertificateRepository::new(connection.clone());
        let certificate = repository.create_certificate(certificates[4].clone()).await.unwrap();

        assert_eq!(certificates[4].hash, certificate.hash);
        {
            let cert = connection
                .fetch_first(GetCertificateRecordQuery::by_certificate_id(
                    &certificates[4].hash,
                ))
                .unwrap()
                .expect("There should be a certificate in the database with this hash ID.");

            assert_eq!(certificates[4].hash, cert.certificate_id);
        }
    }

    #[tokio::test]
    async fn delete_only_given_certificates() {
        let connection = Arc::new(main_db_connection().unwrap());
        let repository = CertificateRepository::new(connection.clone());
        let records = vec![
            CertificateRecord::dummy_genesis("1", Epoch(1)),
            CertificateRecord::dummy_db_snapshot("2", "1", Epoch(1), 2),
            CertificateRecord::dummy_db_snapshot("3", "1", Epoch(1), 3),
        ];
        insert_certificate_records(&connection, records.clone());
        let certificates: Vec<Certificate> = records.into_iter().map(|c| c.into()).collect();

        // Delete all records except the first
        repository
            .delete_certificates(&certificates.iter().filter(|r| r.hash != "1").collect::<Vec<_>>())
            .await
            .unwrap();

        let expected_remaining_certificate = certificates.first().unwrap().clone();
        let remaining_certificates = repository.get_latest_certificates(usize::MAX).await.unwrap();

        assert_eq!(vec![expected_remaining_certificate], remaining_certificates)
    }
}
