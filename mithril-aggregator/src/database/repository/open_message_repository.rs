use std::sync::Arc;

use chrono::Utc;

use mithril_common::entities::{Epoch, ProtocolMessage, SignedEntityType};
use mithril_common::StdResult;
use mithril_persistence::sqlite::{ConnectionExtensions, SqliteConnection};

use crate::database::query::{
    DeleteOpenMessageQuery, GetOpenMessageQuery, GetOpenMessageWithSingleSignaturesQuery,
    InsertOpenMessageQuery, UpdateOpenMessageQuery,
};
use crate::database::record::{OpenMessageRecord, OpenMessageWithSingleSignaturesRecord};

/// ## Open message repository
///
/// This is a business oriented layer to perform actions on the database through
/// queries.
pub struct OpenMessageRepository {
    connection: Arc<SqliteConnection>,
}

impl OpenMessageRepository {
    /// Instanciate service
    pub fn new(connection: Arc<SqliteConnection>) -> Self {
        Self { connection }
    }

    /// Return the latest [OpenMessageRecord] for the given Epoch and [SignedEntityType].
    pub async fn get_open_message(
        &self,
        signed_entity_type: &SignedEntityType,
    ) -> StdResult<Option<OpenMessageRecord>> {
        self.connection
            .fetch_first(GetOpenMessageQuery::by_epoch_and_signed_entity_type(
                signed_entity_type.get_epoch(),
                signed_entity_type,
            )?)
    }

    /// Return an open message with its associated single signatures for the given Epoch and [SignedEntityType].
    pub async fn get_open_message_with_single_signatures(
        &self,
        signed_entity_type: &SignedEntityType,
    ) -> StdResult<Option<OpenMessageWithSingleSignaturesRecord>> {
        self.connection.fetch_first(
            GetOpenMessageWithSingleSignaturesQuery::by_epoch_and_signed_entity_type(
                signed_entity_type.get_epoch(),
                signed_entity_type,
            )?,
        )
    }

    /// Return the expired [OpenMessageRecord] for the given Epoch and [SignedEntityType] if it exists
    pub async fn get_expired_open_message(
        &self,
        signed_entity_type: &SignedEntityType,
    ) -> StdResult<Option<OpenMessageRecord>> {
        self.connection
            .fetch_first(GetOpenMessageQuery::by_expired_entity_type(
                Utc::now(),
                signed_entity_type,
            )?)
    }

    /// Create a new [OpenMessageRecord] in the database.
    pub async fn create_open_message(
        &self,
        epoch: Epoch,
        signed_entity_type: &SignedEntityType,
        protocol_message: &ProtocolMessage,
    ) -> StdResult<OpenMessageRecord> {
        let message = self.connection.fetch_first(InsertOpenMessageQuery::one(
            epoch,
            signed_entity_type,
            protocol_message,
        )?)?;

        message.ok_or_else(|| panic!("Inserting an open_message should not return nothing."))
    }

    /// Updates an [OpenMessageRecord] in the database.
    pub async fn update_open_message(
        &self,
        open_message: &OpenMessageRecord,
    ) -> StdResult<OpenMessageRecord> {
        let message = self
            .connection
            .fetch_first(UpdateOpenMessageQuery::one(open_message)?)?;

        message.ok_or_else(|| panic!("Updating an open_message should not return nothing."))
    }

    /// Remove all the [OpenMessageRecord] for the strictly previous epochs of the given epoch in the database.
    /// It returns the number of messages removed.
    pub async fn clean_epoch(&self, epoch: Epoch) -> StdResult<usize> {
        let cursor = self
            .connection
            .fetch(DeleteOpenMessageQuery::below_epoch_threshold(epoch))?;

        Ok(cursor.count())
    }
}

#[cfg(test)]
mod tests {
    use mithril_common::entities::{BlockNumber, CardanoDbBeacon};

    use crate::database::record::SingleSignatureRecord;
    use crate::database::test_helper::{
        insert_epoch_settings, insert_single_signatures_in_db, main_db_connection,
        setup_single_signature_records,
    };

    use super::*;

    async fn get_connection() -> Arc<SqliteConnection> {
        let connection = main_db_connection().unwrap();
        insert_epoch_settings(&connection, &[1, 2]).unwrap();
        Arc::new(connection)
    }

    fn insert_golden_open_message_with_signature(connection: &SqliteConnection) {
        connection
            .execute(
                r#"
                insert into open_message values(
                    'd9498619-c12d-4379-ba76-c63035afd03c',
                    275,
                    275,
                    0,
                    '2023-07-27T00:02:44.505640275+00:00',
                    '{ "message_parts": {
                        "next_aggregate_verification_key":"7b226d745f636f6d6d69746d656e74223a7b22726f6f74223a5b3131312c3230352c3133392c3131322c32382c392c3233382c3134382c3133342c302c3230372c3233302c3234312c3130352c3135372c3131302c3232362c3131342c32362c35332c3136362c3235342c3230382c3132372c3231362c3230362c3230302c34382c35352c32312c3231372c31335d2c226e725f6c6561766573223a332c22686173686572223a6e756c6c7d2c22746f74616c5f7374616b65223a32383439323639303636317d"
                    }}',
                    1,
                    0,
                    '2021-07-27T01:02:44.505640275+00:00'
                );

                insert into single_signature values(
                    'd9498619-c12d-4379-ba76-c63035afd03c',
                    'pool1r0tln8nct3mpyvehgy6uu3cdlmjnmtr2fxjcqnfl6v0qg0we42e',
                    274,
                    '[15,49,52,56,84,85,109,138,171,174,194,209,221,222,224,247,257,258,261,272,299,317,336,346,347,351,394,408,431,453,457,480,481,504,525,535,553,571,572,573,588,591,594,598,603,628,635,637,645,652,663,694,696,700,710,714,727,731,738,745,747,757,763,811,825,831,853,855,891,896,901,917,980,986,989,1010,1025,1077,1082,1092,1096,1140,1146,1147,1171,1192,1197,1246,1248,1261,1270,1277,1280,1290,1304,1349,1360,1363,1374,1409,1416,1418,1425,1432,1437,1440,1476,1481,1491,1499,1505,1527,1528,1544,1552,1559,1561,1571,1574,1596,1628,1638,1659,1680,1733,1736,1761,1782,1807,1868,1873,1877,1915,1923,1926,1927,1968,1969,1999,2078,2084,2125,2154,2156,2200,2207,2214,2231,2245,2247,2248,2280,2337,2364,2404,2442,2452,2461,2472,2484,2500,2511,2544,2565,2574,2578,2597,2600,2607,2611,2612,2620,2626,2638,2651,2668,2689,2698,2717,2764,2767,2843,2847,2855,2867,2869,2873,2906,2911,2918,2919,2921,2933,2936,2950,2953,2958,2960,2967,2973,2994,3002,3004,3030,3031,3037,3049,3056,3132,3136,3140,3194,3218,3240,3261,3283,3294,3298,3318,3320,3324,3358,3361,3368,3373,3378,3398,3415,3417,3428,3450,3458,3462,3467,3501,3512,3539,3545,3558,3568,3573,3581,3600,3618,3628,3634,3635,3638,3646,3667,3677,3698,3699,3701,3706,3708,3728,3741,3744,3748,3762,3771,3779,3792,3806,3807,3821,3823,3827,3828,3842,3849,3850,3854,3856,3861,3907,3925,3938,3942,3950,3985,3998,4015,4018,4021,4077,4092,4094,4103,4115,4165,4174,4188,4190,4199,4216,4220,4223,4252,4280,4314,4315,4338,4340,4353,4363,4367,4400,4403,4407,4419,4423,4427,4429,4450,4472,4486,4489,4497,4525,4537,4542,4550,4578,4598,4601,4613,4618,4621,4623,4640,4648,4656,4660,4661,4702,4710,4715,4737,4748,4753,4754,4766,4776,4779,4784,4794,4801,4803,4834,4854,4855,4861,4871,4873,4878,4887,4915,4920,4923,4945,4950,4951,4960,4962,4980,4993,4999,5028,5067,5068,5081,5091,5125,5129,5132,5133,5142,5176,5194,5223,5239,5256,5267,5292,5300,5337,5343,5354,5357,5366,5375,5376,5386,5405,5409,5416,5454,5457,5458,5465,5467,5471,5483,5490,5504,5540,5552,5565,5582,5617,5646,5659,5660,5666,5678,5685,5696,5706,5716,5722,5746,5752,5753,5760,5762,5782,5798,5799,5804,5810,5816,5817,5844,5857,5864,5873,5894,5970,5974,5994,6002,6006,6025,6026,6031,6047,6052,6065,6077,6084,6085,6098,6108,6115,6123,6137,6146,6171,6195,6206,6219,6229,6261,6263,6266,6274,6281,6301,6308,6312,6339,6360,6378,6422,6425,6449,6462,6477,6499,6508,6545,6546,6549,6551,6554,6563,6587,6589,6593,6599,6609,6610,6625,6636,6642,6644,6649,6653,6669,6673,6683,6697,6710,6712,6714,6717,6732,6766,6813,6864,6896,6908,6919,6943,6947,6965,6968,6969,6987,7000,7001,7022,7035,7037,7046,7047,7059,7074,7136,7146,7147,7161,7174,7191,7193,7221,7222,7225,7227,7255,7263,7281,7294,7313,7330,7349,7375,7387,7427,7442,7452,7466,7472,7482,7483,7488,7540,7586,7602,7624,7636,7657,7675,7678,7683,7691,7696,7713,7726,7737,7740,7781,7800,7809,7826,7827,7833,7836,7863,7868,7878,7886,7895,7923,7942,7945,7993,8007,8023,8029,8040,8051,8056,8079,8092,8094,8099,8120,8137,8152,8175,8191,8213,8219,8271,8280,8281,8293,8296,8300,8301,8304,8312,8326,8329,8336,8346,8347,8352,8363,8395,8397,8403,8405,8413,8426,8437,8441,8442,8458,8488,8519,8527,8534,8543,8643,8663,8669,8691,8730,8748,8756,8757,8760,8763,8772,8800,8806,8825,8837,8850,8853,8857,8864,8887,8903,8924,8970,8988,9015,9051,9084,9102,9111,9121,9122,9147,9171,9177,9178,9183,9194,9210,9246,9253,9266,9279,9292,9338,9339,9344,9348,9359,9374,9378,9404,9410,9418,9464,9468,9472,9479,9489,9494,9497,9549,9604,9613,9644,9663,9684,9686,9691,9696,9707,9717,9718,9773,9779,9794,9795,9796,9824,9871,9876,9881,9883,9886,9899,9920,9921,9922,9929,9930,9955,9956,9961,9982,9988,9991,10008,10025,10036,10038,10061,10064,10069,10070,10087,10090,10098,10119,10122,10124,10126,10139,10158,10164,10187,10203,10205,10242,10259,10269,10270,10285,10318,10324,10360,10381,10382,10407,10420,10438,10469,10481,10504,10508,10510,10590,10595,10608,10614,10626,10632,10662,10679,10685,10697,10705,10716,10719,10743,10790,10801,10815,10830,10844,10847,10856,10860,10877,10919,10930,10933,10938,10940,10942,10945,10950,10967,10985,10995,11021,11029,11032,11039,11131,11158,11170,11192,11205,11209,11220,11270,11283,11299,11328,11352,11358,11373,11376,11391,11421,11422,11431,11438,11449,11457,11474,11497,11506,11512,11542,11548,11563,11581,11591,11592,11593,11602,11657,11659,11673,11695,11706,11712,11717,11729,11744,11767,11777,11779,11793,11804,11824,11826,11843,11880,11884,11887,11924,11934,11936,11940,11966,11978,11989,11998,12026,12030,12037,12059,12063,12076,12087,12105,12145,12160,12161,12165,12170,12204,12236,12254,12258,12259,12303,12305,12313,12327,12334,12339,12355,12360,12367,12391,12415,12427,12463,12464,12532,12554,12568,12572,12595,12631,12637,12672,12678,12679,12701,12702,12705,12723,12725,12735,12753,12756,12776,12781,12805,12811,12831,12849,12855,12863,12873,12880,12885,12892,12896,12898,12904,12916,12932,12944,12946,12952,12953,12955,12965,12990,13002,13007,13047,13071,13079,13090,13102,13144,13159,13161,13173,13174,13188,13208,13216,13227,13246,13249,13268,13293,13296,13319,13323,13340,13349,13356,13378,13379,13388,13398,13432,13433,13467,13519,13524,13533,13566,13572,13596,13619,13641,13647,13656,13659,13671,13685,13693,13703,13752,13787,13793,13798,13801,13805,13807,13808,13820,13830,13841,13845,13857,13862,13870,13898,13908,13910,13935,13939,13942,13949,13952,13958,13968,13972,14003,14007,14037,14046,14051,14066,14075,14125,14127,14144,14149,14151,14163,14196,14202,14223,14243,14247,14248,14252,14255,14290,14293,14299,14362,14382,14392,14411,14429,14459,14467,14485,14502,14509,14540,14562,14570,14605,14619,14631,14640,14655,14681,14684,14698,14703,14704,14722,14735,14739,14765,14774,14814,14836,14842,14866,14873,14880,14884,14892,14897,14948,14966,14978,14984,14989,14999,15016,15025,15031,15041,15066,15079,15120,15124,15144,15173,15183,15186,15196,15212,15218,15230,15234,15244,15245,15254,15272,15273,15283,15291,15303,15320,15355,15369,15378,15403,15407,15412,15413,15426,15444,15498,15505,15509,15526,15528,15559,15564,15615,15619,15621,15626,15629,15650,15651,15663,15667,15685,15702,15712,15726,15733,15734,15743,15762,15794,15809,15820,15828,15872,15887,15889,15896,15897,15964,15982,15992,16002,16008,16020,16022,16023,16042,16054,16071,16082,16099,16116,16132,16140,16142,16164,16181,16196,16201,16204,16214,16230,16234,16235,16238,16239,16257,16275,16309,16364,16367,16379,16398,16423,16451,16454,16468,16471,16543,16547,16548,16557,16565,16571,16573,16580,16606,16613,16629,16636,16655,16656,16660,16679,16680,16685,16729,16735,16738,16739,16745,16767,16800,16810,16812,16850,16866,16893,16904,16927,16958,16961,16967,16975,16983,16989,17000,17060,17066,17088,17097,17102,17109,17114,17124,17139,17140,17144,17148,17167,17174,17195,17204,17220,17224,17234,17246,17251,17273,17292,17294,17305,17308,17314,17320,17321,17382,17388,17417,17427,17432,17445,17449,17465,17468,17473,17490,17502,17507,17519,17523,17577,17597,17610,17612,17622,17634,17639,17645,17671,17677,17713,17719,17728,17743,17748,17780,17795,17807,17808,17810,17817,17819,17825,17834,17837,17854,17882,17888,17895,17898,17899,17902,17929,17931,17933,17937,17938,17942,17952,17958,17959,17980,17986,17997,18004,18024,18026,18041,18043,18050,18076,18117,18122,18140,18154,18157,18163,18169,18178,18181,18191,18211,18214,18218,18247,18263,18265,18271,18274,18278,18320,18350,18360,18381,18397,18412,18428,18470,18476,18478,18484,18507,18522,18536,18546,18551,18552,18567,18573,18580,18582,18593,18602,18609,18616,18631,18632,18652,18665,18680,18685,18710,18721,18735,18745,18748,18759,18783,18786,18787,18790,18796,18802,18805,18810,18846,18858,18872,18873,18888,18905,18910,18919,18933,18936,18941,18944,18953,18981,18989,18999,19039,19077,19122,19153,19154,19156,19163,19169,19197,19198,19199,19229,19244,19245,19304,19306,19322,19343,19346,19348,19350,19352,19372,19379,19397,19405,19417,19452,19461,19468,19477,19499,19551,19574,19586,19595,19614,19635,19673,19683,19706,19718,19722,19764,19807,19849,19851,19885,19911,19937,19963,19964,19984,19987,19995,19996,20005,20010,20021,20053,20057,20095,20100,20101,20138,20143,20149,20151,20155,20159,20176,20186,20193,20195,20211,20215,20258,20270,20297,20305,20311,20336,20351,20370,20380,20390,20407,20413,20417,20439,20442,20444,20453,20455,20468,20498,20510,20518,20530,20532,20539,20552,20553,20584,20588,20600,20602,20638,20656,20675,20677,20693,20698,20728,20735,20762,20807,20808,20832,20847,20862,20894,20897,20903,20924,20938,20952,20960]',
                    '',
                    '2023-07-27T00:06:20.710956040+00:00'
                );

            "#,
            )
            .unwrap();
    }

    #[tokio::test]
    async fn test_golden_master() {
        let connection = main_db_connection().unwrap();
        insert_golden_open_message_with_signature(&connection);

        let repository = OpenMessageRepository::new(Arc::new(connection));
        repository
            .get_open_message(&SignedEntityType::MithrilStakeDistribution(Epoch(275)))
            .await
            .expect("Getting Golden open message should not fail")
            .expect("An open message should exist for this signed entity type");

        repository
            .get_open_message_with_single_signatures(&SignedEntityType::MithrilStakeDistribution(
                Epoch(275),
            ))
            .await
            .expect("Getting Golden open message should not fail")
            .expect(
                "An open message with single signatures should exist for this signed entity type",
            );
    }

    #[tokio::test]
    async fn repository_get_open_message() {
        let connection = get_connection().await;
        let repository = OpenMessageRepository::new(connection.clone());
        let epoch = Epoch(1);

        for signed_entity_type in [
            SignedEntityType::MithrilStakeDistribution(epoch),
            SignedEntityType::CardanoImmutableFilesFull(CardanoDbBeacon::new("devnet", *epoch, 1)),
            SignedEntityType::CardanoTransactions(epoch, BlockNumber(100)),
        ] {
            repository
                .create_open_message(epoch, &signed_entity_type, &ProtocolMessage::new())
                .await
                .unwrap();
            let open_message_result = repository
                .get_open_message(&signed_entity_type)
                .await
                .unwrap();
            assert!(open_message_result.is_some());
        }
    }

    #[tokio::test]
    async fn repository_get_expired_open_message() {
        let connection = get_connection().await;
        let repository = OpenMessageRepository::new(connection.clone());
        let epoch = Epoch(1);
        let signed_entity_type = SignedEntityType::MithrilStakeDistribution(epoch);

        let mut open_message = repository
            .create_open_message(epoch, &signed_entity_type, &ProtocolMessage::new())
            .await
            .unwrap();

        let open_message_result = repository
            .get_expired_open_message(&signed_entity_type)
            .await
            .unwrap();
        assert!(open_message_result.is_none());

        open_message.expires_at = Some(Utc::now() - chrono::Days::new(100));
        repository.update_open_message(&open_message).await.unwrap();

        let open_message_result = repository
            .get_expired_open_message(&signed_entity_type)
            .await
            .unwrap();
        assert!(open_message_result.is_some());
    }

    #[tokio::test]
    async fn repository_create_open_message() {
        let connection = get_connection().await;
        let repository = OpenMessageRepository::new(connection.clone());
        let epoch = Epoch(1);
        let open_message = repository
            .create_open_message(
                epoch,
                &SignedEntityType::CardanoImmutableFilesFull(CardanoDbBeacon::default()),
                &ProtocolMessage::new(),
            )
            .await
            .unwrap();

        assert_eq!(Epoch(1), open_message.epoch);
        assert_eq!(
            SignedEntityType::CardanoImmutableFilesFull(CardanoDbBeacon::default()),
            open_message.signed_entity_type
        );

        let message = {
            let message = connection
                .fetch_first(GetOpenMessageQuery::by_id(&open_message.open_message_id))
                .unwrap();

            message.unwrap_or_else(|| {
                panic!(
                    "OpenMessage ID='{}' should exist in the database.",
                    open_message.open_message_id
                )
            })
        };

        assert_eq!(open_message.protocol_message, message.protocol_message);
        assert_eq!(open_message.epoch, message.epoch);
    }

    #[tokio::test]
    async fn repository_update_open_message() {
        let connection = get_connection().await;
        let repository = OpenMessageRepository::new(connection.clone());
        let epoch = Epoch(1);
        let open_message = repository
            .create_open_message(
                epoch,
                &SignedEntityType::CardanoImmutableFilesFull(CardanoDbBeacon::default()),
                &ProtocolMessage::new(),
            )
            .await
            .unwrap();

        let mut open_message_updated = open_message;
        open_message_updated.is_certified = true;
        let open_message_saved = repository
            .update_open_message(&open_message_updated)
            .await
            .unwrap();

        assert_eq!(open_message_updated, open_message_saved);
    }

    #[tokio::test]
    async fn repository_clean_open_message() {
        let connection = get_connection().await;
        let repository = OpenMessageRepository::new(connection.clone());
        let beacon = CardanoDbBeacon {
            epoch: Epoch(1),
            ..CardanoDbBeacon::default()
        };
        let _ = repository
            .create_open_message(
                beacon.epoch,
                &SignedEntityType::CardanoImmutableFilesFull(beacon.clone()),
                &ProtocolMessage::new(),
            )
            .await
            .unwrap();
        let _ = repository
            .create_open_message(
                beacon.epoch,
                &SignedEntityType::CardanoImmutableFilesFull(CardanoDbBeacon {
                    epoch: Epoch(2),
                    ..beacon
                }),
                &ProtocolMessage::new(),
            )
            .await
            .unwrap();
        let count = repository.clean_epoch(Epoch(2)).await.unwrap();

        assert_eq!(2, count);
    }

    #[tokio::test]
    async fn repository_get_open_message_with_single_signatures_when_signatures_exist() {
        let connection = Arc::new(main_db_connection().unwrap());
        let repository = OpenMessageRepository::new(connection.clone());

        let open_message = repository
            .create_open_message(
                Epoch(1),
                &SignedEntityType::MithrilStakeDistribution(Epoch(1)),
                &ProtocolMessage::default(),
            )
            .await
            .unwrap();
        let single_signature_records: Vec<SingleSignatureRecord> =
            setup_single_signature_records(1, 1, 4)
                .into_iter()
                .map(|s| SingleSignatureRecord {
                    open_message_id: open_message.open_message_id,
                    ..s
                })
                .collect();
        {
            insert_single_signatures_in_db(&connection, single_signature_records).unwrap();
        }

        let open_message_with_single_signatures = repository
            .get_open_message_with_single_signatures(&open_message.signed_entity_type)
            .await
            .unwrap()
            .unwrap();
        assert_eq!(
            4,
            open_message_with_single_signatures.single_signatures.len()
        )
    }

    #[tokio::test]
    async fn repository_get_open_message_with_single_signatures_when_signatures_not_exist() {
        let connection = main_db_connection().unwrap();
        let repository = OpenMessageRepository::new(Arc::new(connection));

        let open_message = OpenMessageRecord::dummy();
        repository
            .create_open_message(
                open_message.epoch,
                &open_message.signed_entity_type,
                &open_message.protocol_message,
            )
            .await
            .unwrap();

        let open_message_with_single_signatures = repository
            .get_open_message_with_single_signatures(&open_message.signed_entity_type)
            .await
            .unwrap()
            .unwrap();
        assert!(open_message_with_single_signatures
            .single_signatures
            .is_empty())
    }
}
