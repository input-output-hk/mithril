<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>Mithril. A complete guide. Blog</title>
        <link>https://mithril.network/doc/adr/</link>
        <description>Mithril. A complete guide. Blog</description>
        <lastBuildDate>Fri, 21 Mar 2025 00:00:00 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>en</language>
        <item>
            <title><![CDATA[10. Specific Mithril Http status code
]]></title>
            <link>https://mithril.network/doc/adr/10</link>
            <guid>https://mithril.network/doc/adr/10</guid>
            <pubDate>Fri, 21 Mar 2025 00:00:00 GMT</pubDate>
            <description><![CDATA[Status]]></description>
            <content:encoded><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="status">Status<a href="https://mithril.network/doc/adr/10#status" class="hash-link" aria-label="Direct link to Status" title="Direct link to Status">​</a></h2>
<p>Accepted</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="context">Context<a href="https://mithril.network/doc/adr/10#context" class="hash-link" aria-label="Direct link to Context" title="Direct link to Context">​</a></h2>
<p>In exchanges between the signer and the aggregator, we need to retrieve the reason why a request was unsuccessful.
Error handling will depend on the specific functional case of Mithril.
We could have reused existing HTTP codes, but they are too general and could be returned for cases other than the one we wish to isolate.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="decision">Decision<a href="https://mithril.network/doc/adr/10#decision" class="hash-link" aria-label="Direct link to Decision" title="Direct link to Decision">​</a></h2>
<p>We therefore decided to return specific error codes when we need to identify the functional case.
We start at 450 for client error codes and at 550 for server error codes.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="consequences">Consequences<a href="https://mithril.network/doc/adr/10#consequences" class="hash-link" aria-label="Direct link to Consequences" title="Direct link to Consequences">​</a></h2>
<p>Specific Mithril HTTP status code on server error should be between 550 and 599.
For client error the HTTP status code should be between 450 and 499.</p>]]></content:encoded>
            <category>Accepted</category>
        </item>
        <item>
            <title><![CDATA[9. Database migration squashing
]]></title>
            <link>https://mithril.network/doc/adr/9</link>
            <guid>https://mithril.network/doc/adr/9</guid>
            <pubDate>Thu, 13 Mar 2025 00:00:00 GMT</pubDate>
            <description><![CDATA[Status]]></description>
            <content:encoded><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="status">Status<a href="https://mithril.network/doc/adr/9#status" class="hash-link" aria-label="Direct link to Status" title="Direct link to Status">​</a></h2>
<p>Accepted</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="context">Context<a href="https://mithril.network/doc/adr/9#context" class="hash-link" aria-label="Direct link to Context" title="Direct link to Context">​</a></h2>
<p>Over time, many database migrations have accumulated in Mithril nodes. Since these migrations are applied sequentially, the resulting database schema has become difficult to understand and maintain.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="decision">Decision<a href="https://mithril.network/doc/adr/9#decision" class="hash-link" aria-label="Direct link to Decision" title="Direct link to Decision">​</a></h2>
<p>To address this, the team decided to implement migration squashing once too many migrations have accumulated for a store. This process consolidates all existing migrations into a single, equivalent migration.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="consequences">Consequences<a href="https://mithril.network/doc/adr/9#consequences" class="hash-link" aria-label="Direct link to Consequences" title="Direct link to Consequences">​</a></h2>
<ul>
<li>This applies to the migrations of all Mithril node stores</li>
<li>A squashed migration will be applied when a database is initialized for the first time</li>
<li>A squashed migration must be optional and should only run if it has not been previously applied with the equivalent migration sequence</li>
<li>Some nodes may have only partially applied the equivalent sequence of migrations and cannot apply the squashed migration immediately:<!-- -->
<ul>
<li>They must first run the migration using the latest distribution that does not include the squashed migration, ensuring their database is prepared to apply it</li>
<li>This distribution is associated with a squashed migration to provide a smooth user experience.</li>
</ul>
</li>
</ul>]]></content:encoded>
            <category>Accepted</category>
        </item>
        <item>
            <title><![CDATA[8. Standardize JSON Message Testing
]]></title>
            <link>https://mithril.network/doc/adr/8</link>
            <guid>https://mithril.network/doc/adr/8</guid>
            <pubDate>Tue, 14 Jan 2025 00:00:00 GMT</pubDate>
            <description><![CDATA[Status]]></description>
            <content:encoded><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="status">Status<a href="https://mithril.network/doc/adr/8#status" class="hash-link" aria-label="Direct link to Status" title="Direct link to Status">​</a></h2>
<p>Accepted</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="context">Context<a href="https://mithril.network/doc/adr/8#context" class="hash-link" aria-label="Direct link to Context" title="Direct link to Context">​</a></h2>
<ul>
<li>To ensure backward compatibility and correctness of JSON messages exchanged between nodes, we need a standardized approach
to test the deserialization of these messages.</li>
<li>Golden testing is a technique where the expected output (golden data) is stored and used to verify the correctness of
the system's output. This approach helps in detecting unintended changes in the output and ensures that the system
behaves as expected over time.</li>
<li>By using golden testing for JSON message deserialization, we can ensure that any changes to the message structures are
backward compatible and that the deserialization process yields the expected results.</li>
<li>We have been using golden testing for JSON messages in the project, but the approach used ad-hoc versions that did not
correspond to any OpenAPI versions, making it difficult to track the changes and maintain backward compatibility.</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="decision">Decision<a href="https://mithril.network/doc/adr/8#decision" class="hash-link" aria-label="Direct link to Decision" title="Direct link to Decision">​</a></h2>
<p>We will standardize the testing of JSON messages by following the steps below:</p>
<p>When adding a new JSON message structure, the following steps should be taken:</p>
<ul>
<li>Introduce a constant <code>CURRENT_JSON</code> string containing an exhaustive example of the JSON currently exchanged between nodes.</li>
<li>Implement a <code>golden_message_current</code> method that returns the representation of the <code>CURRENT_JSON</code> using the current structure.</li>
<li>Implement a <code>test_current_json_deserialized_into_current_message</code> test that checks that deserializing the <code>CURRENT_JSON</code> into the current structure yields the output stored in <code>golden_message_current</code>.</li>
</ul>
<p>When modifying an existing JSON message structure, if backward compatibility is maintained, the following steps should be taken:</p>
<ul>
<li>Given <code>X_Y_ZZ</code> is the version of the OpenAPI before the change:<!-- -->
<ul>
<li>Create a copy of the previous version structure as it was before the backward-compatible change, suffixed with <code>UntilVX_Y_ZZ</code>, e.g., <code>CertificateMessageUntilV0_1_32</code>.</li>
<li>Create a copy the <code>golden_message_current</code> method named <code>golden_message_until_open_api_X_Y_ZZ</code>, and update its return type to the version structure suffixed with <code>UntilVX_Y_ZZ</code>.</li>
<li>Implement a <code>test_current_json_deserialized_into_message_supported_until_open_api_X_Y_ZZ</code> test that checks that deserializing the <code>CURRENT_JSON</code> into the previous structure yields the output stored in <code>golden_message_until_open_api_X_Y_ZZ</code>.</li>
</ul>
</li>
<li>Modify the <code>CURRENT_JSON</code> string to reflect the new structure.</li>
<li>Modify the <code>golden_message_current</code> method to return the representation of the <code>CURRENT_JSON</code> using the new structure.</li>
</ul>
<p>When modifying an existing JSON message structure, if backward compatibility is not maintained, the following steps should be taken:</p>
<ul>
<li>Modify the <code>CURRENT_JSON</code> string to reflect the new structure.</li>
<li>Modify the <code>golden_message_current</code> method to return the representation of the <code>CURRENT_JSON</code> using the new structure.</li>
<li>Remove all <code>golden_message_until_open_api_X_Y_ZZ</code> method and the corresponding structure and tests, as they are no longer relevant.</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="consequences">Consequences<a href="https://mithril.network/doc/adr/8#consequences" class="hash-link" aria-label="Direct link to Consequences" title="Direct link to Consequences">​</a></h2>
<ul>
<li>Ensures that any changes to the JSON message structure are backward compatible.</li>
<li>Provides a clear and standardized approach to testing JSON message deserialization.</li>
<li>Helps maintain the integrity and reliability of the communication between nodes.</li>
<li>Requires maintaining multiple versions of message structures and corresponding tests, which may increase the maintenance overhead.</li>
</ul>]]></content:encoded>
            <category>Accepted</category>
        </item>
        <item>
            <title><![CDATA[7. Standardize log output
]]></title>
            <link>https://mithril.network/doc/adr/7</link>
            <guid>https://mithril.network/doc/adr/7</guid>
            <pubDate>Sun, 07 Apr 2024 00:00:00 GMT</pubDate>
            <description><![CDATA[Status]]></description>
            <content:encoded><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="status">Status<a href="https://mithril.network/doc/adr/7#status" class="hash-link" aria-label="Direct link to Status" title="Direct link to Status">​</a></h2>
<p>Accepted</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="context">Context<a href="https://mithril.network/doc/adr/7#context" class="hash-link" aria-label="Direct link to Context" title="Direct link to Context">​</a></h2>
<ul>
<li><a href="https://mithril.network/doc/adr/2">ADR 2</a> is not completely relevant now, we have migrated recently the logs in the client to <code>stderr</code>. Only the result of the command execution is in <code>stdout</code>. This makes it possible to exploit the result, see our <a href="https://mithril.network/doc/dev-blog/2024/02/26/mithril-client-cli-output-breaking-change">blog post</a>.</li>
<li>Mithril aggregator logs are always redirected to <code>stdout</code> but it mixes 2 types of CLI commands, some of which would benefit from the logs output to <code>stderr</code>.</li>
<li>Mithril aggregator and Mithril client CLI have not a consistent log strategy, that's why we need to standardize them.</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="decision">Decision<a href="https://mithril.network/doc/adr/7#decision" class="hash-link" aria-label="Direct link to Decision" title="Direct link to Decision">​</a></h2>
<ul>
<li>For commands that provide a result or execute an action, logs are sent to <code>stderr</code>. Only the result of the command is sent to <code>stdout</code>.</li>
<li>For commands that launch a program without an expected result (server), logs are sent to <code>stdout</code>.</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="consequences">Consequences<a href="https://mithril.network/doc/adr/7#consequences" class="hash-link" aria-label="Direct link to Consequences" title="Direct link to Consequences">​</a></h2>
<ul>
<li>End users who use <code>stdout</code> logs would have a breaking change. They will have to retrieve the logs that come from <code>stderr</code> in addition.</li>
<li>Commands <code>genesis</code>, <code>era</code> and <code>tools</code> from Mithril aggregator now send their logs to <code>stderr</code>.</li>
</ul>]]></content:encoded>
            <category>Accepted</category>
        </item>
        <item>
            <title><![CDATA[6. Errors implementation Standard
]]></title>
            <link>https://mithril.network/doc/adr/6</link>
            <guid>https://mithril.network/doc/adr/6</guid>
            <pubDate>Wed, 27 Sep 2023 00:00:00 GMT</pubDate>
            <description><![CDATA[Status]]></description>
            <content:encoded><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="status">Status<a href="https://mithril.network/doc/adr/6#status" class="hash-link" aria-label="Direct link to Status" title="Direct link to Status">​</a></h2>
<p>Accepted</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="context">Context<a href="https://mithril.network/doc/adr/6#context" class="hash-link" aria-label="Direct link to Context" title="Direct link to Context">​</a></h2>
<p>Error handling is difficult with Rust:</p>
<ul>
<li>Many ways of implementing them with different crates (<a href="https://crates.io/crates/thiserror" target="_blank" rel="noopener noreferrer"><code>thiserror</code></a>, <a href="https://crates.io/crates/anyhow" target="_blank" rel="noopener noreferrer"><code>anyhow</code></a>, ...)</li>
<li>No exception like handling of errors</li>
<li>No stack trace or context available by default</li>
<li>Backtrace uniquely when a panic occurs and if <code>RUST_BACKTRACE</code> environment variable is set to <code>1</code> or <code>full</code></li>
</ul>
<p>We think the errors handling should be done in a consistent way in the project.
Thus we have worked on a standardization of their implementation and tried to apply it to the whole repository.
This has enabled us to have a clear vision of the do and don't that we intend to summarize in this ADR.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="decision">Decision<a href="https://mithril.network/doc/adr/6#decision" class="hash-link" aria-label="Direct link to Decision" title="Direct link to Decision">​</a></h2>
<p><em>Therefore</em></p>
<ul>
<li>We have decided to use <code>thiserror</code> and <code>anyhow</code> crates to implement the errors:<!-- -->
<ul>
<li><a href="https://crates.io/crates/thiserror" target="_blank" rel="noopener noreferrer"><code>thiserror</code></a> is used to create module or domain errors that come from our developments and can be easily identified (as they are strongly typed).</li>
<li><a href="https://crates.io/crates/anyhow" target="_blank" rel="noopener noreferrer"><code>anyhow</code></a> is used to add a context to an error triggered by a sub-system. The context is a convenient way to get 'stack trace' like debug information.</li>
</ul>
</li>
</ul>
<p>Here is a <a href="https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2021&amp;gist=bf667c443696beb90106f6ae627a57b9" target="_blank" rel="noopener noreferrer">Rust playground</a> that summarizes the usage of <code>thiserror</code>:</p>
<div class="language-rust codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-rust codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token attribute attr-name" style="color:#00a4db">#[allow(unused_imports)]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">use</span><span class="token plain"> </span><span class="token namespace" style="opacity:0.7">anyhow</span><span class="token namespace punctuation" style="opacity:0.7;color:#393A34">::</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain">anyhow</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token class-name">Context</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token class-name">Result</span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">// 1.0.71</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">use</span><span class="token plain"> </span><span class="token namespace" style="opacity:0.7">thiserror</span><span class="token namespace punctuation" style="opacity:0.7;color:#393A34">::</span><span class="token class-name">Error</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">// 1.0.43</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token attribute attr-name" style="color:#00a4db">#[derive(Error, Debug)]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token attribute attr-name" style="color:#00a4db">#[error(</span><span class="token attribute attr-name string" style="color:#e3116c">"Codec error: {msg}"</span><span class="token attribute attr-name" style="color:#00a4db">)]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">pub</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token type-definition class-name">CodecError</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    msg</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token class-name">String</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token attribute attr-name" style="color:#00a4db">#[source]</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">// optional if field name is `source`</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    source</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token namespace" style="opacity:0.7">anyhow</span><span class="token namespace punctuation" style="opacity:0.7;color:#393A34">::</span><span class="token class-name">Error</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token attribute attr-name" style="color:#00a4db">#[derive(Error, Debug)]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">pub</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">enum</span><span class="token plain"> </span><span class="token type-definition class-name">DomainError</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token attribute attr-name" style="color:#00a4db">#[error(</span><span class="token attribute attr-name string" style="color:#e3116c">"Error with codec: {0:?}"</span><span class="token attribute attr-name" style="color:#00a4db">)]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token class-name">CodecWithOnlyDebug</span><span class="token punctuation" style="color:#393A34">(</span><span class="token class-name">CodecError</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token attribute attr-name" style="color:#00a4db">#[error(</span><span class="token attribute attr-name string" style="color:#e3116c">"Error with codec"</span><span class="token attribute attr-name" style="color:#00a4db">)]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token class-name">CodecWithSource</span><span class="token punctuation" style="color:#393A34">(</span><span class="token attribute attr-name" style="color:#00a4db">#[source]</span><span class="token plain"> </span><span class="token class-name">CodecError</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token attribute attr-name" style="color:#00a4db">#[error(</span><span class="token attribute attr-name string" style="color:#e3116c">"Error with codec: {0}"</span><span class="token attribute attr-name" style="color:#00a4db">)]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token class-name">CodecWithoutAnything</span><span class="token punctuation" style="color:#393A34">(</span><span class="token class-name">CodecError</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token attribute attr-name" style="color:#00a4db">#[error(</span><span class="token attribute attr-name string" style="color:#e3116c">"Anyhow error: {0:?}"</span><span class="token attribute attr-name" style="color:#00a4db">)]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token class-name">AnyhowWrapWithOnlyDebug</span><span class="token punctuation" style="color:#393A34">(</span><span class="token namespace" style="opacity:0.7">anyhow</span><span class="token namespace punctuation" style="opacity:0.7;color:#393A34">::</span><span class="token class-name">Error</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token attribute attr-name" style="color:#00a4db">#[error(</span><span class="token attribute attr-name string" style="color:#e3116c">"Anyhow error"</span><span class="token attribute attr-name" style="color:#00a4db">)]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token class-name">AnyhowWrapWithSource</span><span class="token punctuation" style="color:#393A34">(</span><span class="token attribute attr-name" style="color:#00a4db">#[source]</span><span class="token plain"> </span><span class="token namespace" style="opacity:0.7">anyhow</span><span class="token namespace punctuation" style="opacity:0.7;color:#393A34">::</span><span class="token class-name">Error</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token attribute attr-name" style="color:#00a4db">#[error(</span><span class="token attribute attr-name string" style="color:#e3116c">"Anyhow error: {0}"</span><span class="token attribute attr-name" style="color:#00a4db">)]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token class-name">AnyhowWrapWithoutAnything</span><span class="token punctuation" style="color:#393A34">(</span><span class="token namespace" style="opacity:0.7">anyhow</span><span class="token namespace punctuation" style="opacity:0.7;color:#393A34">::</span><span class="token class-name">Error</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">fn</span><span class="token plain"> </span><span class="token function-definition function" style="color:#d73a49">anyhow_result</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">-&gt;</span><span class="token plain"> </span><span class="token class-name">Result</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token string" style="color:#e3116c">"invalid_number"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">parse</span><span class="token punctuation" style="color:#393A34">::</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token keyword" style="color:#00009f">u64</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">map</span><span class="token punctuation" style="color:#393A34">(</span><span class="token closure-params closure-punctuation punctuation" style="color:#393A34">|</span><span class="token closure-params">_</span><span class="token closure-params closure-punctuation punctuation" style="color:#393A34">|</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">with_context</span><span class="token punctuation" style="color:#393A34">(</span><span class="token closure-params closure-punctuation punctuation" style="color:#393A34">|</span><span class="token closure-params closure-punctuation punctuation" style="color:#393A34">|</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"Reading database failure"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">fn</span><span class="token plain"> </span><span class="token function-definition function" style="color:#d73a49">thiserror_struct</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">-&gt;</span><span class="token plain"> </span><span class="token class-name">Result</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token class-name">CodecError</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token class-name">Err</span><span class="token punctuation" style="color:#393A34">(</span><span class="token class-name">CodecError</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        msg</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"My message"</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">to_string</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        source</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token macro property" style="color:#36acaa">anyhow!</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"Could not decode config"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token operator" style="color:#393A34">?</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token class-name">Ok</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">fn</span><span class="token plain"> </span><span class="token function-definition function" style="color:#d73a49">print_error</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">title</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token keyword" style="color:#00009f">str</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> error</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token namespace" style="opacity:0.7">anyhow</span><span class="token namespace punctuation" style="opacity:0.7;color:#393A34">::</span><span class="token class-name">Error</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token macro property" style="color:#36acaa">println!</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"{title:-^80}"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token macro property" style="color:#36acaa">println!</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"{error:?}\n"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">fn</span><span class="token plain"> </span><span class="token function-definition function" style="color:#d73a49">main</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token macro property" style="color:#36acaa">println!</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"1 - Printing errors from enum variant that contains a error struct\n"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// Debug the inner error struct: "normal" debug without the anyhow touch</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">print_error</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token string" style="color:#e3116c">"DomainError::CodecWithOnlyDebug"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token macro property" style="color:#36acaa">anyhow!</span><span class="token punctuation" style="color:#393A34">(</span><span class="token class-name">DomainError</span><span class="token punctuation" style="color:#393A34">::</span><span class="token class-name">CodecWithOnlyDebug</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token function" style="color:#d73a49">thiserror_struct</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">unwrap_err</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// marking the inner error struct as source: anyhow will be able to make a</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// stacktrace out of this error. Nice !</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">print_error</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token string" style="color:#e3116c">"DomainError::CodecWithSource"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token macro property" style="color:#36acaa">anyhow!</span><span class="token punctuation" style="color:#393A34">(</span><span class="token class-name">DomainError</span><span class="token punctuation" style="color:#393A34">::</span><span class="token class-name">CodecWithSource</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token function" style="color:#d73a49">thiserror_struct</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">unwrap_err</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// without debugging the inner error: only show the error text</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">print_error</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token string" style="color:#e3116c">"DomainError::CodecWithoutAnything"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token macro property" style="color:#36acaa">anyhow!</span><span class="token punctuation" style="color:#393A34">(</span><span class="token class-name">DomainError</span><span class="token punctuation" style="color:#393A34">::</span><span class="token class-name">CodecWithoutAnything</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token function" style="color:#d73a49">thiserror_struct</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">unwrap_err</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token macro property" style="color:#36acaa">println!</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"\n2 - Printing errors from enum variant that contains a anyhow error\n"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// using only debug: the first two errors of the stack will be merged</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">print_error</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token string" style="color:#e3116c">"DomainError::AnyhowWrapWithOnlyDebug"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token macro property" style="color:#36acaa">anyhow!</span><span class="token punctuation" style="color:#393A34">(</span><span class="token class-name">DomainError</span><span class="token punctuation" style="color:#393A34">::</span><span class="token class-name">AnyhowWrapWithOnlyDebug</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token function" style="color:#d73a49">anyhow_result</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">with_context</span><span class="token punctuation" style="color:#393A34">(</span><span class="token closure-params closure-punctuation punctuation" style="color:#393A34">|</span><span class="token closure-params closure-punctuation punctuation" style="color:#393A34">|</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"context"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">unwrap_err</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// using #[source] attribute: each error of the stack will have a line</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">print_error</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token string" style="color:#e3116c">"DomainError::AnyhowWrapWithSource"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token macro property" style="color:#36acaa">anyhow!</span><span class="token punctuation" style="color:#393A34">(</span><span class="token class-name">DomainError</span><span class="token punctuation" style="color:#393A34">::</span><span class="token class-name">AnyhowWrapWithSource</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token function" style="color:#d73a49">anyhow_result</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">with_context</span><span class="token punctuation" style="color:#393A34">(</span><span class="token closure-params closure-punctuation punctuation" style="color:#393A34">|</span><span class="token closure-params closure-punctuation punctuation" style="color:#393A34">|</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"context"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">unwrap_err</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// without debug nor source: only the uppermost error is print</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">print_error</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token string" style="color:#e3116c">"DomainError::AnyhowWrapWithoutAnything"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token macro property" style="color:#36acaa">anyhow!</span><span class="token punctuation" style="color:#393A34">(</span><span class="token class-name">DomainError</span><span class="token punctuation" style="color:#393A34">::</span><span class="token class-name">AnyhowWrapWithoutAnything</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token function" style="color:#d73a49">anyhow_result</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">with_context</span><span class="token punctuation" style="color:#393A34">(</span><span class="token closure-params closure-punctuation punctuation" style="color:#393A34">|</span><span class="token closure-params closure-punctuation punctuation" style="color:#393A34">|</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"context"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">unwrap_err</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span></code></pre></div></div>
<p>Which will output errors this way:</p>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">1 - Printing errors from enum variant that contains a error struct</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">------------------------DomainError::CodecWithOnlyDebug-------------------------</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Error with codec: CodecError { msg: "My message", source: Could not decode config }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">--------------------------DomainError::CodecWithSource--------------------------</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Error with codec</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Caused by:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    0: Codec error: My message</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    1: Could not decode config</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">-----------------------DomainError::CodecWithoutAnything------------------------</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Error with codec: Codec error: My message</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">2 - Printing errors from enum variant that contains a anyhow error</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">----------------------DomainError::AnyhowWrapWithOnlyDebug----------------------</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Anyhow error: context</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Caused by:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    0: Reading database failure</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    1: invalid digit found in string</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">-----------------------DomainError::AnyhowWrapWithSource------------------------</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Anyhow error</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Caused by:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    0: context</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    1: Reading database failure</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    2: invalid digit found in string</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">---------------------DomainError::AnyhowWrapWithoutAnything---------------------</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Anyhow error: context</span><br></span></code></pre></div></div>
<p>Here is a <a href="https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2021&amp;gist=90f962ab001d2ea0321fc5da0d4ec0f1" target="_blank" rel="noopener noreferrer">Rust playground</a> that summarizes the usage of the <code>context</code> feature form <code>anyhow</code>:</p>
<div class="language-rust codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-rust codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token attribute attr-name" style="color:#00a4db">#[allow(unused_imports)]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">use</span><span class="token plain"> </span><span class="token namespace" style="opacity:0.7">anyhow</span><span class="token namespace punctuation" style="opacity:0.7;color:#393A34">::</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain">anyhow</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token class-name">Context</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token class-name">Result</span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">// 1.0.71</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">fn</span><span class="token plain"> </span><span class="token function-definition function" style="color:#d73a49">read_db</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">-&gt;</span><span class="token plain"> </span><span class="token class-name">Result</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token string" style="color:#e3116c">"invalid_number"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">parse</span><span class="token punctuation" style="color:#393A34">::</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token keyword" style="color:#00009f">u64</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">map</span><span class="token punctuation" style="color:#393A34">(</span><span class="token closure-params closure-punctuation punctuation" style="color:#393A34">|</span><span class="token closure-params">_</span><span class="token closure-params closure-punctuation punctuation" style="color:#393A34">|</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">with_context</span><span class="token punctuation" style="color:#393A34">(</span><span class="token closure-params closure-punctuation punctuation" style="color:#393A34">|</span><span class="token closure-params closure-punctuation punctuation" style="color:#393A34">|</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"Reading database failure"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">fn</span><span class="token plain"> </span><span class="token function-definition function" style="color:#d73a49">do_work</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">-&gt;</span><span class="token plain"> </span><span class="token class-name">Result</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">read_db</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">with_context</span><span class="token punctuation" style="color:#393A34">(</span><span class="token closure-params closure-punctuation punctuation" style="color:#393A34">|</span><span class="token closure-params closure-punctuation punctuation" style="color:#393A34">|</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"Important work failed while reading database"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">fn</span><span class="token plain"> </span><span class="token function-definition function" style="color:#d73a49">do_service_work</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">-&gt;</span><span class="token plain"> </span><span class="token class-name">Result</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">do_work</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">with_context</span><span class="token punctuation" style="color:#393A34">(</span><span class="token closure-params closure-punctuation punctuation" style="color:#393A34">|</span><span class="token closure-params closure-punctuation punctuation" style="color:#393A34">|</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"Service could not do the important work"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">fn</span><span class="token plain"> </span><span class="token function-definition function" style="color:#d73a49">main</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> error </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">do_service_work</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">unwrap_err</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token macro property" style="color:#36acaa">println!</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"Error string:\n {error}\n\n"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token macro property" style="color:#36acaa">println!</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"Error debug:\n {error:?}\n\n"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token macro property" style="color:#36acaa">println!</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"Error pretty:\n {error:#?}\n\n"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span></code></pre></div></div>
<p>Which will output errors this way:</p>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">Error string:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> Service could not do the important work</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Error debug:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> Service could not do the important work</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Caused by:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    0: Important work failed while reading database</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    1: Reading database failure</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    2: invalid digit found in string</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Error pretty:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> Error {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    context: "Service could not do the important work",</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    source: Error {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        context: "Important work failed while reading database",</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        source: Error {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            context: "Reading database failure",</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            source: ParseIntError {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                kind: InvalidDigit,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            },</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        },</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    },</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="consequences">Consequences<a href="https://mithril.network/doc/adr/6#consequences" class="hash-link" aria-label="Direct link to Consequences" title="Direct link to Consequences">​</a></h2>
<ul>
<li>We have defined the following aliases that should be used by default:<!-- -->
<ul>
<li><code>StdResult</code>: the default result that should be returned by a function (unless a more specific type is required).</li>
<li><code>StdError</code>: the default error that should be used (unless a more specific type is required).</li>
</ul>
</li>
</ul>
<div class="language-rust codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-rust codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">/* Code extracted from mithril-common::lib.rs */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">/// Generic error type</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">pub</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">type</span><span class="token plain"> </span><span class="token type-definition class-name">StdError</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token namespace" style="opacity:0.7">anyhow</span><span class="token namespace punctuation" style="opacity:0.7;color:#393A34">::</span><span class="token class-name">Error</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">/// Generic result type</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">pub</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">type</span><span class="token plain"> </span><span class="token type-definition class-name">StdResult</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token class-name">T</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token namespace" style="opacity:0.7">anyhow</span><span class="token namespace punctuation" style="opacity:0.7;color:#393A34">::</span><span class="token class-name">Result</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token class-name">T</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token class-name">StdError</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre></div></div>
<ul>
<li>
<p>The function that returns an error from a sub-system should systematically add a context to the error with the <code>with_context</code> method, in order to provide clear stack traces and ease debugging.</p>
</li>
<li>
<p>When printing an <code>StdError</code> we should use the debug format without the pretty modifier, ie:</p>
</li>
</ul>
<div class="language-rust codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-rust codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token macro property" style="color:#36acaa">println!</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"Error debug:\n {error:?}\n\n"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre></div></div>
<ul>
<li>When wrapping an error in a <code>thiserror</code> enum variant we should use the <code>source</code> attribute that will provide a clearer stack trace:</li>
</ul>
<div class="language-rust codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-rust codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">/// Correct usage with `source` attribute</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token attribute attr-name" style="color:#00a4db">#[derive(Error, Debug)]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">pub</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">enum</span><span class="token plain"> </span><span class="token type-definition class-name">DomainError</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token attribute attr-name" style="color:#00a4db">#[error(</span><span class="token attribute attr-name string" style="color:#e3116c">"Anyhow error"</span><span class="token attribute attr-name" style="color:#00a4db">)]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token class-name">AnyhowWrapWithSource</span><span class="token punctuation" style="color:#393A34">(</span><span class="token attribute attr-name" style="color:#00a4db">#[source]</span><span class="token plain"> </span><span class="token class-name">StdError</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre></div></div>
<div class="language-rust codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-rust codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">/// Incorrect usage without `source` attribute</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token attribute attr-name" style="color:#00a4db">#[derive(Error, Debug)]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">pub</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">enum</span><span class="token plain"> </span><span class="token type-definition class-name">DomainError</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token attribute attr-name" style="color:#00a4db">#[error(</span><span class="token attribute attr-name string" style="color:#e3116c">"Anyhow error: {0}"</span><span class="token attribute attr-name" style="color:#00a4db">)]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token class-name">AnyhowWrapWithoutAnything</span><span class="token punctuation" style="color:#393A34">(</span><span class="token class-name">StdError</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre></div></div>
<ul>
<li>Here are some tips on how to discriminate between creating a new error using <code>thiserror</code> or using an <code>StdResult</code>:<!-- -->
<ul>
<li>If you raise an anyhow error which only contains a string this means that you are creating a new error that doesn't come from a sub-system. In that case you should create a type using <code>thiserror</code> intead, ie:</li>
</ul>
</li>
</ul>
<div class="language-rust codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-rust codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">// Avoid</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token class-name">Err</span><span class="token punctuation" style="color:#393A34">(</span><span class="token macro property" style="color:#36acaa">anyhow!</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"my new error"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">// Prefer</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token attribute attr-name" style="color:#00a4db">#[derive(Debug,Error)]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">pub</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">enum</span><span class="token plain"> </span><span class="token type-definition class-name">MyError</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token class-name">MyNewError</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token class-name">Err</span><span class="token punctuation" style="color:#393A34">(</span><span class="token class-name">MyError</span><span class="token punctuation" style="color:#393A34">::</span><span class="token class-name">MyNewError</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre></div></div>
<ul>
<li>(<em>Still undecided</em>) You should avoid wrapping a <code>StdError</code> in a <code>thiserror</code> type. This <strong>breaks</strong> the stack trace and makes it really difficult to retrieve the innermost errors using <code>downcast_ref</code>. When the <code>thiserror</code> type is itself wrapped in a <code>StdError</code> afterward, you would have to <code>downcast_ref</code> twice: first to get the <code>thiserror</code> type and then to get the innermost error.
This should be restricted to the topmost errors of our system (ie the state machine errors).</li>
</ul>]]></content:encoded>
            <category>Accepted</category>
        </item>
        <item>
            <title><![CDATA[5. Use rfc3339 for date formatting
]]></title>
            <link>https://mithril.network/doc/adr/5</link>
            <guid>https://mithril.network/doc/adr/5</guid>
            <pubDate>Wed, 21 Jun 2023 00:00:00 GMT</pubDate>
            <description><![CDATA[Status]]></description>
            <content:encoded><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="status">Status<a href="https://mithril.network/doc/adr/5#status" class="hash-link" aria-label="Direct link to Status" title="Direct link to Status">​</a></h2>
<p>Accepted</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="context">Context<a href="https://mithril.network/doc/adr/5#context" class="hash-link" aria-label="Direct link to Context" title="Direct link to Context">​</a></h2>
<p>Previously, on the Mithril project we did not have a preferred format for the dates in our applications, leading to
multiple formats being used.</p>
<p>For example when querying a certificate from an aggregator, the <code>initiated_at</code> field did not specify the timezone,
timezone that could be found in the <code>sealed_at</code> field:</p>
<div class="language-json codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-json codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token property" style="color:#36acaa">"initiated_at"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"2023-05-26T00:02:23"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token property" style="color:#36acaa">"sealed_at"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"2023-05-26T00:03:23.998753492Z"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre></div></div>
<p>Same problem in our databases where a date could be stored without timezone and milliseconds (ie: <code>2023-06-13 16:35:28</code>)
in one table column and with them in another (ie: <code>2023-06-13T16:35:28.143292875Z</code>).</p>
<p>The <a href="https://datatracker.ietf.org/doc/html/rfc3339" target="_blank" rel="noopener noreferrer">RFC 3339</a> is a widely used, easily readable, mostly numeric (no
translation is needed to parse the day or the month), format. Also, it always includes the timezone meaning that our
client can convert such date to their local time if needed.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="decision">Decision<a href="https://mithril.network/doc/adr/5#decision" class="hash-link" aria-label="Direct link to Decision" title="Direct link to Decision">​</a></h2>
<p><em>Therefore</em></p>
<ul>
<li>We commit to use <strong>RFC 3339</strong> compatible date and time whenever we need to store or show a date and time.</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="consequences">Consequences<a href="https://mithril.network/doc/adr/5#consequences" class="hash-link" aria-label="Direct link to Consequences" title="Direct link to Consequences">​</a></h2>
<ul>
<li>All dates and time must use a dedicated type in the application, ie: the <code>DateTime&lt;Utc&gt;</code> type from
<a href="https://crates.io/crates/chrono" target="_blank" rel="noopener noreferrer">chrono</a> crate.<!-- -->
<ul>
<li>This means that dates must <strong>never</strong> be stored in our types using Strings.</li>
</ul>
</li>
<li>Internally, we will always use the <strong>UTC timezone</strong>, to avoid useless conversions between timezones.</li>
<li>Users or scripts querying dates from our applications or from our databases will be able to parse all of them using
the same format.</li>
</ul>]]></content:encoded>
            <category>Accepted</category>
        </item>
        <item>
            <title><![CDATA[4. Mithril Network Upgrade Strategy
]]></title>
            <link>https://mithril.network/doc/adr/4</link>
            <guid>https://mithril.network/doc/adr/4</guid>
            <pubDate>Thu, 05 Jan 2023 00:00:00 GMT</pubDate>
            <description><![CDATA[Status]]></description>
            <content:encoded><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="status">Status<a href="https://mithril.network/doc/adr/4#status" class="hash-link" aria-label="Direct link to Status" title="Direct link to Status">​</a></h2>
<p>Accepted</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="context">Context<a href="https://mithril.network/doc/adr/4#context" class="hash-link" aria-label="Direct link to Context" title="Direct link to Context">​</a></h2>
<p>When we will run Mithril on mainnet there will be thousands of signers running. Upgrading the version of the nodes has an impact as different versions of API, messages, signature may lead to loss of a significant part of the signers population over one epoch or more. In any case we must prevent a gap in the certificate chain while upgrading critical parts.</p>
<p>We need to be able to keep enough of signer nodes and the aggregator able to work together in order to produce at least one certificate per epoch.</p>
<p>Examples of such changes:</p>
<ul>
<li>change in the message structure</li>
<li>change in the cryptographic algorithm</li>
<li>change in communication channels</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="decision">Decision<a href="https://mithril.network/doc/adr/4#decision" class="hash-link" aria-label="Direct link to Decision" title="Direct link to Decision">​</a></h2>
<p>In order to synchronize all nodes behavior transition, the Release Team will define Eras that start at a given Cardano Epoch and lasts until the next Era begins. When nodes detect an Era change, they switch from old to new behavior hence all transitioning at almost the same time.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="consequences">Consequences<a href="https://mithril.network/doc/adr/4#consequences" class="hash-link" aria-label="Direct link to Consequences" title="Direct link to Consequences">​</a></h2>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="release-team">Release Team<a href="https://mithril.network/doc/adr/4#release-team" class="hash-link" aria-label="Direct link to Release Team" title="Direct link to Release Team">​</a></h3>
<p>The release team is the team responsible of releasing new versions of Mithril software. The <strong>Release Team</strong> will be responsible to set the Epoch at which <strong>Eras</strong> change using an <strong>Era Activation Marker</strong>. In order to be able to determine when the new Era will begin, the Release Team has to know what is the share of the total Mithril stake that can run the new behavior. Signer node software versions has to be <strong>monitored</strong>.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="version-monitoring">Version monitoring<a href="https://mithril.network/doc/adr/4#version-monitoring" class="hash-link" aria-label="Direct link to Version monitoring" title="Direct link to Version monitoring">​</a></h3>
<p>The Release Team must be aware of the software version run by the Signer nodes and their associated stake. The version is going to be added to all HTTP headers in inter-node communication. In a first step, the Aggregator nodes will record this information, and provide the mapping of stakes to Signer nodes.</p>
<p>This configuration works in the case where there is a centralized Aggregator Node (as it is today). In the future, there may be several Aggregator nodes working in a decentralized manner. This would mean having a separate monitoring service, and also monitor the aggregators node versions.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="era-activation-marker">Era Activation Marker<a href="https://mithril.network/doc/adr/4#era-activation-marker" class="hash-link" aria-label="Direct link to Era Activation Marker" title="Direct link to Era Activation Marker">​</a></h3>
<p>An Era Activation Marker is an information shared among all the nodes. For every upgrade, there are two phases:</p>
<ul>
<li>a first marker is set on the blockchain that just indicates a new Era will start soon and softwares shall be updated.</li>
<li>a second marker is set that specifies the Epoch when they must switch from old to new behavior.</li>
</ul>
<p>Every Era Activation Marker will be a transaction in the Cardano blockchain. This implies the nodes must be able to read transactions of the blockchain. Era Activation Markers can be of the same type, the first maker does not hold any Epoch information whereas the second does.</p>
<p>Node will check the blockchain for Markers at startup and for every new Epoch. When a node detects a Marker, it will warn the user if it does not support the incoming Era that he must upgrade his node. If the node detects it does not support the current Era, it will stop working with an explicit error message. To ease that operation, Era Activation Marker will be made sortable.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="behavior-switch">Behavior Switch<a href="https://mithril.network/doc/adr/4#behavior-switch" class="hash-link" aria-label="Direct link to Behavior Switch" title="Direct link to Behavior Switch">​</a></h3>
<p>The nodes must be able to switch from one behavior to another when the Era Epoch is reached. This means the software must embed both behaviors. The switch is developed as a one time operation, there is no rollback mechanism available. Once the Epoch is transitioned and the switch has occurred, a new software release can remove the old behavior from the codebase.</p>
<!-- -->
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="client-side-era-awareness">Client-side era awareness<a href="https://mithril.network/doc/adr/4#client-side-era-awareness" class="hash-link" aria-label="Direct link to Client-side era awareness" title="Direct link to Client-side era awareness">​</a></h3>
<p>The Mithril clients do not have access to a Cardano node and therefore can not read the Era Activation Markers stored on chain. As a consequence, they rely on the current era run by the aggregator, by using the era advertised by its <code>/status</code> route.</p>]]></content:encoded>
            <category>Accepted</category>
        </item>
        <item>
            <title><![CDATA[3. Release process and versioning
]]></title>
            <link>https://mithril.network/doc/adr/3</link>
            <guid>https://mithril.network/doc/adr/3</guid>
            <pubDate>Fri, 21 Oct 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[Status]]></description>
            <content:encoded><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="status">Status<a href="https://mithril.network/doc/adr/3#status" class="hash-link" aria-label="Direct link to Status" title="Direct link to Status">​</a></h2>
<p>Accepted</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="context">Context<a href="https://mithril.network/doc/adr/3#context" class="hash-link" aria-label="Direct link to Context" title="Direct link to Context">​</a></h2>
<p>In order to deliver regularly the software to our users, we should implement a release process based on a predictable versioning scheme.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="versioning">Versioning<a href="https://mithril.network/doc/adr/3#versioning" class="hash-link" aria-label="Direct link to Versioning" title="Direct link to Versioning">​</a></h3>
<p>A Release Version determines a distribution of determined node versions and underlying libraries.</p>
<ul>
<li>Our softwares must be able to interact seamlessly with other Mithril software.</li>
<li>Our softwares must be able to be hosted on crates.io.</li>
<li>Our softwares must clearly indicate compatibility with other Mithril components to end users.</li>
</ul>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="release-process">Release process<a href="https://mithril.network/doc/adr/3#release-process" class="hash-link" aria-label="Direct link to Release process" title="Direct link to Release process">​</a></h3>
<p>A Release is a software package that is built once and then promoted from the testing environment to the production environment. It can be signed.</p>
<ul>
<li>Keep it simple.</li>
<li>Automated as much as possible: all points not requiring human decision shall be automated.</li>
<li>Minimize the mean time to release.</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="decision">Decision<a href="https://mithril.network/doc/adr/3#decision" class="hash-link" aria-label="Direct link to Decision" title="Direct link to Decision">​</a></h2>
<p>There are 3 versioned layers in the Mithril stack:</p>
<ul>
<li>HTTP API protocol to ensure compatibility in the communication between nodes (use Semver).</li>
<li>Crate version: each node &amp; library has its own version (use Semver). The commit digest is automatically added to the version by the CI pipeline.</li>
<li>Release Version: the distribution version (use version scheme <strong>YYWW.patch</strong> | <strong>YYWW.patch-name</strong>). The VERSION file is computed by the pipeline from the tag release.</li>
</ul>
<p>The documentation is tied to a Release Version.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="release-process-1">Release Process<a href="https://mithril.network/doc/adr/3#release-process-1" class="hash-link" aria-label="Direct link to Release Process" title="Direct link to Release Process">​</a></h3>
<p>Starting just after a new release has been made:</p>
<ol>
<li>Develop on a dedicated development branch.</li>
<li>When merging PR on main: update the <code>Cargo.toml</code> files with version of the updated nodes.</li>
<li>Once merged, the CI creates an <code>unstable</code> tag &amp; release which is deployed on testing environment.</li>
<li>Push a tag using the distribution version format on this commit with a <code>-prerelease</code> suffix.</li>
<li>The CI gets the built artifacts associated with this commit and generates a named pre-release which is deployed on <code>pre-release</code> for testing.</li>
<li>Push a tag using the distribution version format on this commit without the <code>-prerelease</code> suffix.</li>
<li>The CI gets the built artifacts associated with this commit and generates a named release which is deployed on <code>pre-release</code> for testing.</li>
<li>In the release GitHub interface, edit the newly generated release, uncheck the <code>This is a pre-release</code> checkbox.</li>
<li>The CI gets the built artifacts associated with this commit and generates a named release which is deployed on <code>release</code>.</li>
<li>Create a commit:<!-- -->
<ol>
<li>to promote the documentation website from future to current.</li>
<li>to update the SQL schema with alterations from the previous release.</li>
</ol>
</li>
</ol>
<p><a href="https://mithril.network/doc/assets/files/release_process-a9ce55af510cd542b71e68a485251004.jpg" target="_blank"><img decoding="async" loading="lazy" alt="Release Process" src="https://mithril.network/doc/assets/images/release_process-a9ce55af510cd542b71e68a485251004.jpg" width="1220" height="819" class="img_ev3q"></a></p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="hotfix-release">Hotfix Release<a href="https://mithril.network/doc/adr/3#hotfix-release" class="hash-link" aria-label="Direct link to Hotfix Release" title="Direct link to Hotfix Release">​</a></h3>
<p>​
In case of a blocking issue (following a distribution release) on the release environment that requires an immediate fix:
​</p>
<ol>
<li>Create a branch on the last release tag with the following scheme: <code>hotfix/{last_distribution-version}.{last_patch_number + 1}</code>.</li>
<li>Development of the fix is done on this branch.</li>
<li>After each commit on this branch, the CI creates an <code>unstable</code> tag &amp; release which is not deployed on testing environment (testing must be done on an ad hoc environment manually created).</li>
<li>Push a tag on the branch last commit using the branch distribution version with a <code>-hotfix</code> suffix.</li>
<li>The CI gets the built artifacts associated with this commit and generates a named pre-release which is deployed on <code>pre-release</code> for testing.</li>
<li>In the release GitHub interface, edit the newly generated release, uncheck the <code>This is a pre-release</code> checkbox.</li>
<li>The CI gets the built artifacts associated with this commit and generates a named release which is deployed on <code>release</code>.</li>
<li>Merge the hotfix branch on main branch (and adapt the changes if they are not compatible with the current main branch).</li>
</ol>]]></content:encoded>
            <category>Accepted</category>
        </item>
        <item>
            <title><![CDATA[2. Use simple structured logging
]]></title>
            <link>https://mithril.network/doc/adr/2</link>
            <guid>https://mithril.network/doc/adr/2</guid>
            <pubDate>Sun, 24 Apr 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[Status]]></description>
            <content:encoded><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="status">Status<a href="https://mithril.network/doc/adr/2#status" class="hash-link" aria-label="Direct link to Status" title="Direct link to Status">​</a></h2>
<p>Superseded by <a href="https://mithril.network/doc/adr/7">ADR 7</a></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="context">Context<a href="https://mithril.network/doc/adr/2#context" class="hash-link" aria-label="Direct link to Context" title="Direct link to Context">​</a></h2>
<ul>
<li>Logs are a critical tool for operating any software system, enabling <a href="https://cloud.google.com/architecture/devops/devops-measurement-monitoring-and-observability" target="_blank" rel="noopener noreferrer">observability</a> of the system.</li>
<li>Following <a href="https://12factor.net/logs" target="_blank" rel="noopener noreferrer">12 Factor Apps</a> principles, providing the needed components and tools to be able to configure logging and monitoring should not be the responsibility of the software components</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="decision">Decision<a href="https://mithril.network/doc/adr/2#decision" class="hash-link" aria-label="Direct link to Decision" title="Direct link to Decision">​</a></h2>
<p><em>Therefore</em></p>
<ul>
<li>Each component of the system use <a href="https://www.sumologic.com/glossary/structured-logging/" target="_blank" rel="noopener noreferrer">Structured logging</a> using documented and standardised JSON format for its logs</li>
<li>Logs are always emitted to <code>stdout</code> of the process the component is part of</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="consequences">Consequences<a href="https://mithril.network/doc/adr/2#consequences" class="hash-link" aria-label="Direct link to Consequences" title="Direct link to Consequences">​</a></h2>
<ul>
<li>The schema of the logged items should be properly documented in a JSON schema</li>
<li>It is the responsibility of the node operator to consume the logs and process them</li>
<li>We use existing libraries to provide needed log infrastructure, like <a href="https://zsiciarz.github.io/24daysofrust/book/vol2/day4.html" target="_blank" rel="noopener noreferrer">slog</a> for Rust</li>
</ul>]]></content:encoded>
            <category>Superseded</category>
        </item>
        <item>
            <title><![CDATA[1. Record Architecture Decisions
]]></title>
            <link>https://mithril.network/doc/adr/1</link>
            <guid>https://mithril.network/doc/adr/1</guid>
            <pubDate>Thu, 21 Apr 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[Status]]></description>
            <content:encoded><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="status">Status<a href="https://mithril.network/doc/adr/1#status" class="hash-link" aria-label="Direct link to Status" title="Direct link to Status">​</a></h2>
<p>Accepted</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="context">Context<a href="https://mithril.network/doc/adr/1#context" class="hash-link" aria-label="Direct link to Context" title="Direct link to Context">​</a></h2>
<p>We are in search for a means to describe our technical architecture.</p>
<p>We are a small team working in a very lean and agile way (XP), so we naturally
prefer also light-weight documentation methods which also accomodate change
easily.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="decision">Decision<a href="https://mithril.network/doc/adr/1#decision" class="hash-link" aria-label="Direct link to Decision" title="Direct link to Decision">​</a></h2>
<ul>
<li>We will use <em>Architecture Decision Records</em>, as described by Michael Nygard in
this
<a href="http://thinkrelevance.com/blog/2011/11/15/documenting-architecture-decisions" target="_blank" rel="noopener noreferrer">article</a>.</li>
<li>We will follow the convention of storing those ADRs as Markdown formatted
documents stored under <code>docs/adr</code> directory, as exemplified in Nat Pryce's
<a href="https://github.com/npryce/adr-tools" target="_blank" rel="noopener noreferrer">adr-tools</a>. This does not imply we will
be using <code>adr-tools</code> itself.</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="consequences">Consequences<a href="https://mithril.network/doc/adr/1#consequences" class="hash-link" aria-label="Direct link to Consequences" title="Direct link to Consequences">​</a></h2>
<p>See Michael Nygard's article, linked above.</p>]]></content:encoded>
            <category>Accepted</category>
        </item>
    </channel>
</rss>