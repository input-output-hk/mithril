"use strict";(self.webpackChunkmithril_doc=self.webpackChunkmithril_doc||[]).push([[1582],{45416:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>c,default:()=>h,frontMatter:()=>s,metadata:()=>i,toc:()=>o});const i=JSON.parse('{"id":"manual/develop/nodes/mithril-client-library","title":"Mithril client library","description":"Mithril client library can be used by Rust developers to use the Mithril network in their applications.","source":"@site/versioned_docs/version-maintained/manual/develop/nodes/mithril-client-library.md","sourceDirName":"manual/develop/nodes","slug":"/manual/develop/nodes/mithril-client-library","permalink":"/doc/manual/develop/nodes/mithril-client-library","draft":false,"unlisted":false,"editUrl":"https://github.com/input-output-hk/mithril/edit/main/docs/website/root/manual/develop/nodes/mithril-client-library.md","tags":[],"version":"maintained","sidebarPosition":4,"frontMatter":{"sidebar_position":4},"sidebar":"manualSideBar","previous":{"title":"Mithril client node","permalink":"/doc/manual/develop/nodes/mithril-client"},"next":{"title":"Mithril client library WASM","permalink":"/doc/manual/develop/nodes/mithril-client-library-wasm"}}');var a=t(74848),r=t(28453);const s={sidebar_position:4},c="Mithril client library",l={},o=[{value:"Resources",id:"resources",level:2},{value:"Prerequisites",id:"prerequisites",level:2},{value:"Installation",id:"installation",level:2},{value:"Using the Mithril client library",id:"using-the-mithril-client-library",level:2},{value:"Cardano transactions",id:"cardano-transactions",level:3},{value:"Cardano stake distribution",id:"cardano-stake-distribution",level:3},{value:"Cardano database",id:"cardano-database",level:3},{value:"Cardano database v2",id:"cardano-database-v2",level:3}];function d(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"mithril-client-library",children:"Mithril client library"})}),"\n",(0,a.jsxs)(n.admonition,{type:"info",children:[(0,a.jsx)(n.p,{children:"Mithril client library can be used by Rust developers to use the Mithril network in their applications."}),(0,a.jsx)(n.p,{children:"It is responsible for handling the different types of data certified by Mithril and available through a Mithril aggregator:"}),(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.a,{href:"/doc/glossary#cardano-transaction",children:(0,a.jsx)(n.strong,{children:"Cardano transaction"})}),": list and get snapshots, get proofs"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.a,{href:"/doc/glossary#stake-distribution",children:(0,a.jsx)(n.strong,{children:"Cardano stake distribution"})}),": list, get, and get by epoch"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.a,{href:"/doc/glossary#cardano-database",children:(0,a.jsx)(n.strong,{children:"Cardano database"})}),": list, get, download the tarball, and record statistics"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.a,{href:"/doc/glossary#stake-distribution",children:(0,a.jsx)(n.strong,{children:"Mithril stake distribution"})}),": list and get"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.a,{href:"/doc/glossary#certificate",children:(0,a.jsx)(n.strong,{children:"Certificate"})}),": list, get, and chain validation."]}),"\n"]})]}),"\n",(0,a.jsx)(n.admonition,{type:"tip",children:(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:["For more information about the ",(0,a.jsx)(n.strong,{children:"Mithril network"}),", please see the ",(0,a.jsx)(n.a,{href:"/doc/mithril/advanced/mithril-network/architecture",children:"architecture"})," overview"]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:["For more information about the ",(0,a.jsx)(n.strong,{children:"Mithril client"})," node, please see ",(0,a.jsx)(n.a,{href:"/doc/mithril/advanced/mithril-network/client",children:"this overview"})]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:["Check out the ",(0,a.jsx)(n.a,{href:"/doc/manual/getting-started/bootstrap-cardano-node",children:(0,a.jsx)(n.code,{children:"Bootstrap a Cardano node"})})," guide."]}),"\n"]}),"\n"]})}),"\n",(0,a.jsx)(n.admonition,{type:"info",children:(0,a.jsxs)(n.p,{children:["The Mithril network configurations are available in the ",(0,a.jsx)(n.a,{href:"/doc/manual/getting-started/network-configurations",children:(0,a.jsx)(n.strong,{children:"Network configurations"})})," section of the user manual."]})}),"\n",(0,a.jsx)(n.h2,{id:"resources",children:"Resources"}),"\n",(0,a.jsxs)(n.table,{children:[(0,a.jsx)(n.thead,{children:(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.th,{style:{textAlign:"center"},children:"Node"}),(0,a.jsx)(n.th,{style:{textAlign:"center"},children:"Source repository"}),(0,a.jsx)(n.th,{style:{textAlign:"center"},children:"Rust documentation"}),(0,a.jsx)(n.th,{style:{textAlign:"center"},children:"Network configurations"})]})}),(0,a.jsx)(n.tbody,{children:(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{style:{textAlign:"center"},children:(0,a.jsx)(n.strong,{children:"Mithril client"})}),(0,a.jsx)(n.td,{style:{textAlign:"center"},children:(0,a.jsx)(n.a,{href:"https://github.com/input-output-hk/mithril/tree/main/mithril-client",children:"\u2197\ufe0f"})}),(0,a.jsx)(n.td,{style:{textAlign:"center"},children:(0,a.jsx)(n.a,{href:"https://mithril.network/rust-doc/mithril_client/index.html",children:"\u2197\ufe0f"})}),(0,a.jsx)(n.td,{style:{textAlign:"center"},children:(0,a.jsx)(n.a,{href:"/doc/manual/getting-started/network-configurations",children:"\u2197\ufe0f"})})]})})]}),"\n",(0,a.jsx)(n.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:["Install the latest stable version of the ",(0,a.jsx)(n.a,{href:"https://www.rust-lang.org/learn/get-started",children:"correctly configured"})," Rust toolchain"]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:["Install build tools ",(0,a.jsx)(n.code,{children:"build-essential"})," and ",(0,a.jsx)(n.code,{children:"m4"}),"; for example, on Ubuntu/Debian/Mint, run ",(0,a.jsx)(n.code,{children:"sudo apt install build-essential m4"})]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:["Install OpenSSL development libraries; for example, on Ubuntu/Debian/Mint, run ",(0,a.jsx)(n.code,{children:"apt install libssl-dev"}),"."]}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"installation",children:"Installation"}),"\n",(0,a.jsxs)(n.p,{children:["In your project, use ",(0,a.jsx)(n.code,{children:"cargo"})," to add ",(0,a.jsx)(n.a,{href:"https://crates.io/crates/mithril-client",children:"mithril-client"})," crate as a dependency:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"cargo add mithril-client\n"})}),"\n",(0,a.jsx)(n.admonition,{type:"info",children:(0,a.jsxs)(n.p,{children:["Mithril client is an asynchronous library. You will need a runtime to execute your futures. We recommend using the crate ",(0,a.jsx)(n.a,{href:"https://crates.io/crates/tokio",children:"tokio"}),", as the library has been tested with it."]})}),"\n",(0,a.jsx)(n.h2,{id:"using-the-mithril-client-library",children:"Using the Mithril client library"}),"\n",(0,a.jsx)(n.h3,{id:"cardano-transactions",children:"Cardano transactions"}),"\n",(0,a.jsxs)(n.p,{children:["Here is a basic example of the code targetting the ",(0,a.jsx)(n.code,{children:"release-preprod"})," network aggregator:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-rust",metastring:'title="/src/main.rs"',children:'use mithril_client::{ClientBuilder, MessageBuilder, MithrilResult};\n\n#[tokio::main]\nasync fn main() -> MithrilResult<()> {\n    const AGGREGATOR_ENDPOINT: &str =\n        "https://aggregator.release-preprod.api.mithril.network/aggregator";\n    const GENESIS_VERIFICATION_KEY: &str = "5b3132372c37332c3132342c3136312c362c3133372c3133312c3231332c3230372c3131372c3139382c38352c3137362c3139392c3136322c3234312c36382c3132332c3131392c3134352c31332c3233322c3234332c34392c3232392c322c3234392c3230352c3230352c33392c3233352c34345d";\n    let client = ClientBuilder::aggregator(AGGREGATOR_ENDPOINT, GENESIS_VERIFICATION_KEY)\n        .with_origin_tag(Some("EXAMPLE".to_string()))\n        .build()?;\n\n    let transactions_hashes = [\n        "f9b5221b3ead45d46c0ecae6bee18a0746c5694d0285281cca1b651bce5f49a5",\n        "7769e8b78cc86890660ff5451c110b0a0d0413c8b8ebb17a64e017b4cd881777",\n    ];\n    let cardano_transaction_proof = client\n        .cardano_transaction()\n        .get_proofs(&transactions_hashes)\n        .await\n        .unwrap();\n\n    let verified_transactions = cardano_transaction_proof.verify().unwrap();\n\n    let certificate = client\n        .certificate()\n        .verify_chain(&cardano_transaction_proof.certificate_hash)\n        .await\n        .unwrap();\n\n    let message = MessageBuilder::new()\n        .compute_cardano_transactions_proofs_message(&certificate, &verified_transactions);\n    assert!(certificate.match_message(&message));\n\n    println!(\n        r###"Cardano transactions with hashes "\'{}\'" have been successfully certified by Mithril."###,\n        verified_transactions.certified_transactions().join(","),\n    );\n    if !cardano_transaction_proof\n        .non_certified_transactions\n        .is_empty()\n    {\n        println!(\n            r###"No proof could be computed for Cardano transactions with hashes "\'{}\'".\n\n            Mithril may not have signed those transactions yet, please try again later."###,\n            cardano_transaction_proof\n                .non_certified_transactions\n                .join(","),\n        );\n    }\n\n    Ok(())\n}\n'})}),"\n",(0,a.jsxs)(n.admonition,{type:"info",children:[(0,a.jsxs)(n.p,{children:["An full example is available in the ",(0,a.jsx)(n.a,{href:"https://github.com/input-output-hk/mithril/tree/main/examples/client-cardano-transaction/src/main.rs",children:"Mithril repository"}),". To run it, execute the following command:"]}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"cargo run -p client-cardano-transaction <TRANSACTIONS_HASHES>\n"})}),(0,a.jsx)(n.p,{children:"or directly from the example crate directory:"}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"cargo run\n"})})]}),"\n",(0,a.jsx)(n.h3,{id:"cardano-stake-distribution",children:"Cardano stake distribution"}),"\n",(0,a.jsxs)(n.p,{children:["Here is a basic example of the code targetting the ",(0,a.jsx)(n.code,{children:"release-preprod"})," network aggregator:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-rust",metastring:'title="/src/main.rs"',children:'use mithril_client::{ClientBuilder, MessageBuilder, MithrilResult};\n\n#[tokio::main]\nasync fn main() -> MithrilResult<()> {\n    const AGGREGATOR_ENDPOINT: &str =\n        "https://aggregator.release-preprod.api.mithril.network/aggregator";\n    const GENESIS_VERIFICATION_KEY: &str = "5b3132372c37332c3132342c3136312c362c3133372c3133312c3231332c3230372c3131372c3139382c38352c3137362c3139392c3136322c3234312c36382c3132332c3131392c3134352c31332c3233322c3234332c34392c3232392c322c3234392c3230352c3230352c33392c3233352c34345d";\n    let client = ClientBuilder::aggregator(AGGREGATOR_ENDPOINT, GENESIS_VERIFICATION_KEY)\n        .with_origin_tag(Some("EXAMPLE".to_string()))\n        .build()?;\n\n    let cardano_stake_distributions = client.cardano_stake_distribution().list().await?;\n    let last_epoch = cardano_stake_distributions.first().unwrap().epoch;\n\n    let cardano_stake_distribution = client\n        .cardano_stake_distribution()\n        .get_by_epoch(last_epoch)\n        .await?\n        .unwrap();\n\n    let certificate = client\n        .certificate()\n        .verify_chain(&cardano_stake_distribution.certificate_hash)\n        .await?;\n\n    let message = MessageBuilder::new()\n        .compute_cardano_stake_distribution_message(&certificate, &cardano_stake_distribution)?;\n\n    assert!(certificate.match_message(&message));\n\n    Ok(())\n}\n'})}),"\n",(0,a.jsxs)(n.admonition,{type:"info",children:[(0,a.jsxs)(n.p,{children:["An full example is available in the ",(0,a.jsx)(n.a,{href:"https://github.com/input-output-hk/mithril/tree/main/examples/client-cardano-stake-distribution/src/main.rs",children:"Mithril repository"}),". To run it, execute the following command:"]}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"cargo run -p client-cardano-stake-distribution\n"})}),(0,a.jsx)(n.p,{children:"or directly from the example crate directory:"}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"cargo run\n"})})]}),"\n",(0,a.jsx)(n.h3,{id:"cardano-database",children:"Cardano database"}),"\n",(0,a.jsxs)(n.p,{children:["Here is a basic example of the code targetting the ",(0,a.jsx)(n.code,{children:"release-preprod"})," network aggregator:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-rust",metastring:'title="/src/main.rs"',children:'use mithril_client::{ClientBuilder, MessageBuilder};\nuse std::path::Path;\n\n#[tokio::main]\nasync fn main() -> mithril_client::MithrilResult<()> {\n    const AGGREGATOR_ENDPOINT: &str =\n        "https://aggregator.release-preprod.api.mithril.network/aggregator";\n    const GENESIS_VERIFICATION_KEY: &str = "5b3132372c37332c3132342c3136312c362c3133372c3133312c3231332c3230372c3131372c3139382c38352c3137362c3139392c3136322c3234312c36382c3132332c3131392c3134352c31332c3233322c3234332c34392c3232392c322c3234392c3230352c3230352c33392c3233352c34345d";\n    const ANCILLARY_VERIFICATION_KEY: &str = "5b3138392c3139322c3231362c3135302c3131342c3231362c3233372c3231302c34352c31382c32312c3139362c3230382c3234362c3134362c322c3235322c3234332c3235312c3139372c32382c3135372c3230342c3134352c33302c31342c3232382c3136382c3132392c38332c3133362c33365d";\n    let client = ClientBuilder::aggregator(AGGREGATOR_ENDPOINT, GENESIS_VERIFICATION_KEY)\n        .set_ancillary_verification_key(ANCILLARY_VERIFICATION_KEY.to_string())\n        .with_origin_tag(Some("EXAMPLE".to_string()))\n        .build()?;\n    let snapshots = client.cardano_database().list().await?;\n\n    let last_digest = snapshots.first().unwrap().digest.as_ref();\n    let snapshot = client.cardano_database().get(last_digest).await?.unwrap();\n\n    let certificate = client\n        .certificate()\n        .verify_chain(&snapshot.certificate_hash)\n        .await?;\n\n    // Note: the directory must already exist, and the user running this code must have read/write access to it.\n    let target_directory = Path::new(".");\n    client\n        .cardano_database()\n        .download_unpack_full(&snapshot, target_directory)\n        .await?;\n\n    if let Err(e) = client.cardano_database().add_statistics(&snapshot).await {\n        println!("Could not increment snapshot download statistics: {:?}", e);\n    }\n\n    let message = MessageBuilder::new()\n        .compute_snapshot_message(&certificate, target_directory)\n        .await?;\n    assert!(certificate.match_message(&message));\n\n    Ok(())\n}\n'})}),"\n",(0,a.jsxs)(n.admonition,{type:"info",children:[(0,a.jsxs)(n.p,{children:["Snapshot download and certificate chain validation can take quite some time, even with a fast computer and network. We have implemented a feedback mechanism for them; more details are available in the ",(0,a.jsx)(n.a,{href:"https://mithril.network/rust-doc/mithril_client/feedback/index.html",children:"feedback sub-module"}),"."]}),(0,a.jsxs)(n.p,{children:["An example of implementation with the crate ",(0,a.jsx)(n.a,{href:"https://crates.io/crates/indicatif",children:"indicatif"})," is available in the ",(0,a.jsx)(n.a,{href:"https://github.com/input-output-hk/mithril/tree/main/examples/client-cardano-database/src/main.rs",children:"Mithril repository"}),". To run it, execute the following command:"]}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"cargo run -p client-cardano-database\n"})}),(0,a.jsx)(n.p,{children:"or directly from the example crate directory:"}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"cargo run\n"})})]}),"\n",(0,a.jsx)(n.h3,{id:"cardano-database-v2",children:"Cardano database v2"}),"\n",(0,a.jsxs)(n.p,{children:["Below is a basic example using the new ",(0,a.jsx)(n.code,{children:"CardanoDatabase"})," functions. Make sure the target aggregator signs ",(0,a.jsx)(n.code,{children:"CardanoDatabase"})," incremental snapshot."]}),"\n",(0,a.jsxs)(n.admonition,{type:"tip",children:[(0,a.jsxs)(n.p,{children:["You can verify that the aggregator signs ",(0,a.jsx)(n.strong,{children:"CardanoDatabase"})," by running the command below:"]}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"wget -q -O - YOUR_AGGREGATOR_ENDPOINT | jq '.capabilities.signed_entity_types | contains([\"CardanoDatabase\"])'\n"})}),(0,a.jsxs)(n.p,{children:["For example, with the aggregator on the ",(0,a.jsx)(n.code,{children:"testing-preview"})," Mithril network:"]}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"wget -q -O - https://aggregator.testing-preview.api.mithril.network/aggregator | jq '.capabilities.signed_entity_types | contains([\"CardanoDatabase\"])'\n"})})]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-rust",metastring:'title="/src/main.rs"',children:'use mithril_client::{\n    cardano_database_client::{DownloadUnpackOptions, ImmutableFileRange},\n    ClientBuilder, MessageBuilder,\n};\nuse std::path::Path;\n\n#[tokio::main]\nasync fn main() -> mithril_client::MithrilResult<()> {\n    const AGGREGATOR_ENDPOINT: &str =\n        "https://aggregator.testing-preview.api.mithril.network/aggregator";\n    const GENESIS_VERIFICATION_KEY: &str = "5b3132372c37332c3132342c3136312c362c3133372c3133312c3231332c3230372c3131372c3139382c38352c3137362c3139392c3136322c3234312c36382c3132332c3131392c3134352c31332c3233322c3234332c34392c3232392c322c3234392c3230352c3230352c33392c3233352c34345d";\n    const ANCILLARY_VERIFICATION_KEY: &str = "5b3138392c3139322c3231362c3135302c3131342c3231362c3233372c3231302c34352c31382c32312c3139362c3230382c3234362c3134362c322c3235322c3234332c3235312c3139372c32382c3135372c3230342c3134352c33302c31342c3232382c3136382c3132392c38332c3133362c33365d";\n    let client = ClientBuilder::aggregator(AGGREGATOR_ENDPOINT, GENESIS_VERIFICATION_KEY)\n        .set_ancillary_verification_key(ANCILLARY_VERIFICATION_KEY.to_string())\n        .with_origin_tag(Some("EXAMPLE".to_string()))\n        .build()?;\n\n    let snapshots = client.cardano_database_v2().list().await?;\n\n    let latest_hash = snapshots.first().unwrap().hash.as_ref();\n    let snapshot = client\n        .cardano_database_v2()\n        .get(latest_hash)\n        .await?\n        .unwrap();\n\n    let certificate = client\n        .certificate()\n        .verify_chain(&snapshot.certificate_hash)\n        .await?;\n\n    let immutable_file_range = ImmutableFileRange::From(15000);\n    let download_unpack_options = DownloadUnpackOptions {\n        allow_override: true,\n        include_ancillary: false,\n        ..DownloadUnpackOptions::default()\n    };\n\n    // Note: the directory must already exist, and the user running this code must have read/write access to it.\n    let target_directory = Path::new(".");\n    client\n        .cardano_database_v2()\n        .download_unpack(\n            &snapshot,\n            &immutable_file_range,\n            &target_directory,\n            download_unpack_options,\n        )\n        .await?;\n\n    let verified_digests = client\n        .cardano_database_v2()\n        .download_and_verify_digests(\n            &certificate,\n            &snapshot\n        )\n        .await?;\n\n    let allow_missing_immutables_files = false;\n    let merkle_proof = client\n        .cardano_database_v2()\n        .verify_cardano_database(\n            &certificate,\n            &snapshot,\n            &immutable_file_range,\n            allow_missing_immutables_files,\n            &target_directory,\n            &verified_digest,\n        ),\n    )\n    .await?;\n\n    let message = MessageBuilder::new()\n        .compute_cardano_database_message(&certificate, &merkle_proof)\n        .await?;\n    assert!(certificate.match_message(&message));\n\n    Ok(())\n}\n'})}),"\n",(0,a.jsxs)(n.admonition,{type:"info",children:[(0,a.jsxs)(n.p,{children:["An full example is available in the ",(0,a.jsx)(n.a,{href:"https://github.com/input-output-hk/mithril/tree/main/examples/client-cardano-database-v2/src/main.rs",children:"Mithril repository"}),". To run it, execute the following command:"]}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"cargo run -p client-cardano-database-v2\n"})}),(0,a.jsx)(n.p,{children:"or directly from the example crate directory:"}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"cargo run\n"})})]}),"\n",(0,a.jsx)(n.admonition,{type:"tip",children:(0,a.jsxs)(n.p,{children:["You can read the complete ",(0,a.jsx)(n.a,{href:"https://mithril.network/rust-doc/mithril_client/index.html",children:"developer documentation"}),"."]})})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>c});var i=t(96540);const a={},r=i.createContext(a);function s(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:s(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);